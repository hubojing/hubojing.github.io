<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>靖待的技术博客</title>
  
  <subtitle>小清新IT旅程|为中华之崛起而读书</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://hubojing.github.io/"/>
  <updated>2019-09-24T12:00:47.386Z</updated>
  <id>https://hubojing.github.io/</id>
  
  <author>
    <name>靖待</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>初涉Hadoop</title>
    <link href="https://hubojing.github.io/2019/09/24/%E5%88%9D%E6%B6%89Hadoop/"/>
    <id>https://hubojing.github.io/2019/09/24/初涉Hadoop/</id>
    <published>2019-09-24T10:45:27.000Z</published>
    <updated>2019-09-24T12:00:47.386Z</updated>
    
    <content type="html"><![CDATA[<div align="left"><br><img src="https://github.com/hubojing/BlogImages/blob/master/%E5%88%9D%E6%B6%89Hadoop%E2%80%94%E2%80%94%E5%8C%BA%E5%88%AB.png?raw=true" width="300" height="180" style="float:right;"><br><br><br>　　<strong>最基本的概念。</strong><br><br><br> </div><a id="more"></a><p>最近看到一篇用Hadoop解决交通问题的论文，然而我还没有接触过……</p><h1 id="Hadoop是什么"><a href="#Hadoop是什么" class="headerlink" title="Hadoop是什么"></a>Hadoop是什么</h1><p>Hadoop是一个开源的大数据框架<br>Hadoop是一个分布式计算的解决方案<br>Hadoop=HDFS(分布式文件系统)+MapReduce(分布式计算)<br>HDFS：存储是大数据技术的基础<br>MapReduce编程模型：分布式计算是大数据应用的解决方案</p><h2 id="HDFS概念"><a href="#HDFS概念" class="headerlink" title="HDFS概念"></a>HDFS概念</h2><h3 id="数据块"><a href="#数据块" class="headerlink" title="数据块"></a>数据块</h3><p>默认大小为64MB，一般设置为128M，备份x3</p><h3 id="NameNode"><a href="#NameNode" class="headerlink" title="NameNode"></a>NameNode</h3><p>管理文件系统的命名空间，存放文件元数据<br>维护着文件系统的所有文件和目录，文件与数据块的映射<br>记录每个文件中各个块所在数据节点的信息</p><h3 id="DataNode"><a href="#DataNode" class="headerlink" title="DataNode"></a>DataNode</h3><p>存储并检索数据块<br>向NameNode更新所存储块的列表</p><h2 id="HDFS优缺点"><a href="#HDFS优缺点" class="headerlink" title="HDFS优缺点"></a>HDFS优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>适合大文件存储，支持TB、PB级的数据存储，并有副本策略<br>可以构建在廉价的机器上，并有一定的容错和恢复机制<br>支持流式数据访问，一次写入，多次读取最高效</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>不适合大量小文件存储<br>不适合并发写入，不支持文件随机修改<br>不支持随机读等低延时的访问方式</p><h1 id="Hadoop基础架构"><a href="#Hadoop基础架构" class="headerlink" title="Hadoop基础架构"></a>Hadoop基础架构</h1><h2 id="YARN概念"><a href="#YARN概念" class="headerlink" title="YARN概念"></a>YARN概念</h2><h3 id="ResourceManager"><a href="#ResourceManager" class="headerlink" title="ResourceManager"></a>ResourceManager</h3><p>分配和调度资源<br>启动并监控ApplicationMaster<br>监控NodeManager</p><h3 id="ApplicationMaster"><a href="#ApplicationMaster" class="headerlink" title="ApplicationMaster"></a>ApplicationMaster</h3><p>为MR类型的程序申请资源，并分配给内部任务<br>负责数据的切分<br>监控任务的执行及容错<br>NodeManager<br>管理单个节点的资源<br>处理来自ResourceManager的命令<br>处理来自ApplicationMaster的命令</p><h2 id="MapReduce编程模型"><a href="#MapReduce编程模型" class="headerlink" title="MapReduce编程模型"></a>MapReduce编程模型</h2><p>输入一个大文件，通过Split之后，将其分为多个分片<br>每个文件分片由单独的机器去处理，这就是Map方法<br>将各个机器计算的结果进行汇总并得到最终的结果，这就是Reduce方法</p><h2 id="1-0和2-0区别"><a href="#1-0和2-0区别" class="headerlink" title="1.0和2.0区别"></a>1.0和2.0区别</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/%E5%88%9D%E6%B6%89Hadoop%E2%80%94%E2%80%94%E5%8C%BA%E5%88%AB.png?raw=true" alt="区别" title="">                </div>                <div class="image-caption">区别</div>            </figure><h1 id="Hadoop生态圈"><a href="#Hadoop生态圈" class="headerlink" title="Hadoop生态圈"></a>Hadoop生态圈</h1><p>很多…</p><h2 id="HBase"><a href="#HBase" class="headerlink" title="HBase"></a>HBase</h2><p>高可靠，高性能，面向列，可伸缩，实时读写的分布式数据库<br>利用HDFS作为其文件存储系统，支持MR程序读取数据<br>存储非结构化和半结构化数据<br>RowKey:数据唯一标识，按字典排序<br>Column Family:列族，多个列的集合。最多不要超过3个<br>TimeStamp时间戳：支持多版本数据同时存在</p><h2 id="Spark"><a href="#Spark" class="headerlink" title="Spark"></a>Spark</h2><p>基于内存计算的大数据并行计算框架<br>Spark是MapReduce的替代方案，兼容HDFS, HIVE等数据源<br>优点：<br>基于内存计算的分布式计算框架<br>抽象出分布式内存存储数据结构 弹性分布式数据集RDD<br>基于事件驱动，通过线程池复用线程提高性能</p>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;left&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://github.com/hubojing/BlogImages/blob/master/%E5%88%9D%E6%B6%89Hadoop%E2%80%94%E2%80%94%E5%8C%BA%E5%88%AB.png?raw=true&quot; width=&quot;300&quot; height=&quot;180&quot; style=&quot;float:right;&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;　　&lt;strong&gt;最基本的概念。&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt; &lt;/div&gt;
    
    </summary>
    
      <category term="数据挖掘" scheme="https://hubojing.github.io/categories/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/"/>
    
    
      <category term="Hadoop" scheme="https://hubojing.github.io/tags/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客进阶优化</title>
    <link href="https://hubojing.github.io/2019/09/14/hexo%E5%8D%9A%E5%AE%A2%E8%BF%9B%E9%98%B6%E4%BC%98%E5%8C%96/"/>
    <id>https://hubojing.github.io/2019/09/14/hexo博客进阶优化/</id>
    <published>2019-09-14T15:03:40.000Z</published>
    <updated>2019-09-14T07:28:39.173Z</updated>
    
    <content type="html"><![CDATA[<div align="left"><br><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1511116107294&di=a91ad5adc5431ecb1865be565f7b0e82&imgtype=0&src=http%3A%2F%2Fpic4.zhimg.com%2Fd4c1239e75c02e8482c22017a6c8d407_r.jpg" width="300" height="180" style="float:right;"><br>　　<br>　　　<br>　　<strong>Hexo优化的一些汇总整理。</strong><br>　　<br>　　<br> </div><a id="more"></a><h1 id="老记录"><a href="#老记录" class="headerlink" title="老记录"></a>老记录</h1><p><a href="https://hubojing.github.io/2015/11/10/hexo%E4%BC%98%E5%8C%96/">https://hubojing.github.io/2015/11/10/hexo%E4%BC%98%E5%8C%96/</a><br>原来写的，排版什么的不是很好看…</p><h2 id="一些重要参考"><a href="#一些重要参考" class="headerlink" title="一些重要参考"></a>一些重要参考</h2><ul><li>HEXO  <a href="https://hexo.io/" target="_blank" rel="noopener">https://hexo.io/</a></li><li>Hexo在github上构建免费的web应用   <a href="http://blog.fens.me/hexo-blog-github/" target="_blank" rel="noopener">http://blog.fens.me/hexo-blog-github/</a></li><li>Hexo你的博客  <a href="http://www.tuicool.com/articles/AfQnQjy/" target="_blank" rel="noopener">http://www.tuicool.com/articles/AfQnQjy/</a></li><li>不蒜子  <a href="http://ibruce.info/2015/04/04/busuanzi/" target="_blank" rel="noopener">http://ibruce.info/2015/04/04/busuanzi/</a></li><li>Markdown 编辑器语法指南  <a href="https://segmentfault.com/markdown/" target="_blank" rel="noopener">https://segmentfault.com/markdown/</a></li><li>Markdown入门  <a href="http://www.360doc.com/content/13/1119/13/3300331_330476656.shtml/" target="_blank" rel="noopener">http://www.360doc.com/content/13/1119/13/3300331_330476656.shtml/</a></li><li>GitHub for Windows 2.0使用教程  <a href="http://www.cnblogs.com/jiqing9006/p/3987702.html/" target="_blank" rel="noopener">http://www.cnblogs.com/jiqing9006/p/3987702.html/</a></li><li>Github使用技巧  higrid.net/hi/docs/github-cheat-sheet/</li><li>解决Hexo置顶问题  <a href="http://www.netcan666.com/2015/11/22/%E8%A7%A3%E5%86%B3Hexo%E7%BD%AE%E9%A1%B6%E9%97%AE%E9%A2%98/" target="_blank" rel="noopener">http://www.netcan666.com/2015/11/22/%E8%A7%A3%E5%86%B3Hexo%E7%BD%AE%E9%A1%B6%E9%97%AE%E9%A2%98/</a></li><li>如何向google提交sitemap（详细）  <a href="http://fionat.github.io/blog/2013/10/23/sitemap/" target="_blank" rel="noopener">http://fionat.github.io/blog/2013/10/23/sitemap/</a></li><li>用微信与Github搭建“微博”  <a href="https://joway.github.io/posts/Toy/2016-05-14-%E7%94%A8%E5%BE%AE%E4%BF%A1%E4%B8%8EGithub%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E5%BE%AE%E5%8D%9A.html/" target="_blank" rel="noopener">https://joway.github.io/posts/Toy/2016-05-14-%E7%94%A8%E5%BE%AE%E4%BF%A1%E4%B8%8EGithub%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E5%BE%AE%E5%8D%9A.html/</a></li><li>多说样式（UA浏览器标识、旋转头像）  <a href="http://moxfive.xyz/2015/09/29/duoshuo-style/#" target="_blank" rel="noopener">http://moxfive.xyz/2015/09/29/duoshuo-style/#</a></li><li>添加相册功能  <a href="http://www.tuicool.com/articles/fYZ7Zrj" target="_blank" rel="noopener">http://www.tuicool.com/articles/fYZ7Zrj</a></li><li>页面自动刷新与移动端调试  <a href="http://moxfive.xyz/2016/03/27/hexo-browsersync/" target="_blank" rel="noopener">http://moxfive.xyz/2016/03/27/hexo-browsersync/</a></li><li>chrome 谷歌浏览器报错DNS查找失败的解决办法 <a href="http://www.t522.com/suibi/238.html/" target="_blank" rel="noopener">http://www.t522.com/suibi/238.html/</a></li><li>用自己的页面做主页 <a href="https://jacklightchen.github.io/blog/2016/10/27/HexoOverview/" target="_blank" rel="noopener">https://jacklightchen.github.io/blog/2016/10/27/HexoOverview/</a></li><li>统计文章字数  <a href="https://github.com/willin/hexo-wordcount" target="_blank" rel="noopener">https://github.com/willin/hexo-wordcount</a></li></ul><h2 id="高级进阶"><a href="#高级进阶" class="headerlink" title="高级进阶"></a>高级进阶</h2><ul><li>Daocloud持续集成————Hexo博客自动发布系统  <a href="https://nullun.tk/ci/daocloud/Daocloud%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E2%80%94%E2%80%94%E2%80%94%E2%80%94Hexo%E5%8D%9A%E5%AE%A2%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F/#more/" target="_blank" rel="noopener">https://nullun.tk/ci/daocloud/Daocloud%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E2%80%94%E2%80%94%E2%80%94%E2%80%94Hexo%E5%8D%9A%E5%AE%A2%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F/#more/</a></li><li>使用 Termux 在手机上运行 linux 黑科技 <a href="http://www.oyohyee.com/post/Note/Termux.html/" target="_blank" rel="noopener">http://www.oyohyee.com/post/Note/Termux.html/</a></li><li>Hexo+Github实现相册功能 <a href="http://blog.csdn.net/u013082989/article/details/70162293/" target="_blank" rel="noopener">http://blog.csdn.net/u013082989/article/details/70162293/</a></li><li>Hexo+yilia主题实现文章目录和添加视频 <a href="http://blog.csdn.net/u013082989/article/details/70212008/" target="_blank" rel="noopener">http://blog.csdn.net/u013082989/article/details/70212008/</a></li><li>用 Hexo 做个人 Wiki 知识管理系统 <a href="https://www.v2ex.com/t/347176?p=1/" target="_blank" rel="noopener">https://www.v2ex.com/t/347176?p=1/</a></li><li>Hexo自定义页面的方法 <a href="http://www.cnblogs.com/refined-x/p/7160174.html/" target="_blank" rel="noopener">http://www.cnblogs.com/refined-x/p/7160174.html/</a></li><li>在 Hexo 博客中跳过渲染，创建自定义网页 <a href="http://www.jianshu.com/p/f89428fce8d5/" target="_blank" rel="noopener">http://www.jianshu.com/p/f89428fce8d5/</a></li><li>增加打赏功能  <a href="http://cighao.com/2016/02/23/add-donate-to-hexo/" target="_blank" rel="noopener">http://cighao.com/2016/02/23/add-donate-to-hexo/</a></li><li>hexo移植    <a href="http://nodlee.com/2015/06/07/how-to-porting-hexo/#more" target="_blank" rel="noopener">http://nodlee.com/2015/06/07/how-to-porting-hexo/#more</a></li></ul><h2 id="网页特效"><a href="#网页特效" class="headerlink" title="网页特效"></a>网页特效</h2><ul><li>鼠标点击特效 <a href="https://laod.cn/design/page/javascript-texiao.html" target="_blank" rel="noopener">https://laod.cn/design/page/javascript-texiao.html</a></li></ul><h1 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h1><p>node_modules/hexo-generator-index/lib/generator.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line"></span><br><span class="line">var pagination = require(&apos;hexo-pagination&apos;);</span><br><span class="line"></span><br><span class="line">module.exports = function(locals)&#123;</span><br><span class="line">  var config = this.config;</span><br><span class="line">  var posts = locals.posts;</span><br><span class="line"></span><br><span class="line">    posts.data = posts.data.sort(function(a, b) &#123;</span><br><span class="line">        if(a.top &amp;&amp; b.top) &#123; // 两篇文章top都有定义</span><br><span class="line">            if(a.top == b.top) return b.date - a.date; // 若top值一样则按照文章日期降序排</span><br><span class="line">            else return b.top - a.top; // 否则按照top值降序排</span><br><span class="line">        &#125;</span><br><span class="line">        else if(a.top &amp;&amp; !b.top) &#123; // 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）</span><br><span class="line">            return -1;</span><br><span class="line">        &#125;</span><br><span class="line">        else if(!a.top &amp;&amp; b.top) &#123;</span><br><span class="line">            return 1;</span><br><span class="line">        &#125;</span><br><span class="line">        else return b.date - a.date; // 都没定义按照文章日期降序排</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">  var paginationDir = config.pagination_dir || &apos;page&apos;;</span><br><span class="line"></span><br><span class="line">  return pagination(&apos;&apos;, posts, &#123;</span><br><span class="line">    perPage: config.index_generator.per_page,</span><br><span class="line">    layout: [&apos;index&apos;, &apos;archive&apos;],</span><br><span class="line">    format: paginationDir + &apos;/%d/&apos;,</span><br><span class="line">    data: &#123;</span><br><span class="line">      __index: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>按更新时间排序：改一下上面文章里的代码 a.date, b.date 分别改为 a.updated, b.updated<br>参考资料：<a href="http://www.netcan666.com/2015/11/22/解决Hexo置顶问题/" target="_blank" rel="noopener">http://www.netcan666.com/2015/11/22/解决Hexo置顶问题/</a></p><p>原始代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line"></span><br><span class="line">var pagination = require(&apos;hexo-pagination&apos;);</span><br><span class="line"></span><br><span class="line">module.exports = function(locals)&#123;</span><br><span class="line">  var config = this.config;</span><br><span class="line">  var posts = locals.posts.sort(&apos;-date&apos;);</span><br><span class="line">  var paginationDir = config.pagination_dir || &apos;page&apos;;</span><br><span class="line"></span><br><span class="line">  return pagination(&apos;&apos;, posts, &#123;</span><br><span class="line">    perPage: config.index_generator.per_page,</span><br><span class="line">    layout: [&apos;index&apos;, &apos;archive&apos;],</span><br><span class="line">    format: paginationDir + &apos;/%d/&apos;,</span><br><span class="line">    data: &#123;</span><br><span class="line">      __index: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;left&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1511116107294&amp;di=a91ad5adc5431ecb1865be565f7b0e82&amp;imgtype=0&amp;src=http%3A%2F%2Fpic4.zhimg.com%2Fd4c1239e75c02e8482c22017a6c8d407_r.jpg&quot; width=&quot;300&quot; height=&quot;180&quot; style=&quot;float:right;&quot;&gt;&lt;br&gt;　　&lt;br&gt;　　　&lt;br&gt;　　&lt;strong&gt;Hexo优化的一些汇总整理。&lt;/strong&gt;&lt;br&gt;　　&lt;br&gt;　　&lt;br&gt; &lt;/div&gt;
    
    </summary>
    
      <category term="互联网" scheme="https://hubojing.github.io/categories/%E4%BA%92%E8%81%94%E7%BD%91/"/>
    
    
      <category term="hexo" scheme="https://hubojing.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>SSD重装系统最简教程</title>
    <link href="https://hubojing.github.io/2019/09/12/SSD%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F%E6%9C%80%E7%AE%80%E6%95%99%E7%A8%8B/"/>
    <id>https://hubojing.github.io/2019/09/12/SSD重装系统最简教程/</id>
    <published>2019-09-12T05:59:01.000Z</published>
    <updated>2019-09-12T05:59:01.000Z</updated>
    
    <content type="html"><![CDATA[<div align="left"><br><img src="https://github.com/hubojing/BlogImages/blob/master/SSD重装系统最简教程——SSD.jpg?raw=true" width="300" height="180" style="float:right;"><br><br><br>　　<strong>懒人装机必备。（预计可以节约100元装机费）</strong><br><br><br> </div><a id="more"></a><h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>一直没看好心仪的笔记本，但为了接下来的学习任务，决定先把我古老的联想Y400改造了凑合用一段时间，刚好内存和SSD的价格都降下来了。换了8G内存，加了SSD。</p><h1 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/SSD重装系统最简教程——内存条.jpg?raw=true" alt="内存条" title="">                </div>                <div class="image-caption">内存条</div>            </figure><p>目的是能用就OK，所以越便宜越好……<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/SSD重装系统最简教程——SSD.jpg?raw=true" alt="SSD" title="">                </div>                <div class="image-caption">SSD</div>            </figure><br>SSD也有更便宜的，不过数据还是重要，买个适配好点的吧…（数据最终还是要存到硬盘的嘛…内存坏了的损失比SSD小，希望我没想错）<br>具体物理安装过程没什么好说的，就是拆机就完事了。</p><h1 id="重装系统"><a href="#重装系统" class="headerlink" title="重装系统"></a>重装系统</h1><p>真不建议迁移系统，感觉现在所谓的迁移系统都有很多的缺漏，不是真正意义上的迁移。我试了试傲梅分区助手的迁移功能，其实还是假迁移。还是重装最合适。</p><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>MSDN，我告诉你下载原版win10的iso文件。</p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p>一个很偷懒且硬核的方法：先暂时卸下机械硬盘，只安装SSD。然后直接点开下载的文件里的setup安装就好了。不过我没尝试，因为好不容易把后盖给盖上了，实在是不想拧螺丝了。<br>网上有很多U盘制作工具，但是不够简洁。而且还容易制作失败。（我用老毛桃制作就失败了…)<br>我觉得最简单的是用软碟通UltraISO制作U盘启动盘。所以先下载UltraISO，安装。</p><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><p>插入一个空8G以上U盘。<br>打开UltraISO，将下载好的iso文件导入，点击<code>启动</code>-<code>写入硬盘映像</code>。写入，完成。</p><h2 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h2><p>重启，屏幕亮起时按F1进入BIOS，将USB启动设置优先级到第一。保存。系统进入安装引导页。</p><h2 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h2><p>正常安装，记得将系统选择安装在SSD里。等待。</p><p>重装成功！</p><p>我看到有同学花100块去找人装系统，唉，这个钱花的好亏。（我只收50！<del>手动滑稽</del>）</p>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;left&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://github.com/hubojing/BlogImages/blob/master/SSD重装系统最简教程——SSD.jpg?raw=true&quot; width=&quot;300&quot; height=&quot;180&quot; style=&quot;float:right;&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;　　&lt;strong&gt;懒人装机必备。（预计可以节约100元装机费）&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt; &lt;/div&gt;
    
    </summary>
    
      <category term="互联网" scheme="https://hubojing.github.io/categories/%E4%BA%92%E8%81%94%E7%BD%91/"/>
    
    
      <category term="硬件" scheme="https://hubojing.github.io/tags/%E7%A1%AC%E4%BB%B6/"/>
    
      <category term="装机" scheme="https://hubojing.github.io/tags/%E8%A3%85%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Github+SSH就这么连</title>
    <link href="https://hubojing.github.io/2019/09/11/Github+SSH%E5%B0%B1%E8%BF%99%E4%B9%88%E8%BF%9E/"/>
    <id>https://hubojing.github.io/2019/09/11/Github+SSH就这么连/</id>
    <published>2019-09-11T13:06:02.000Z</published>
    <updated>2019-09-11T13:06:02.000Z</updated>
    
    <content type="html"><![CDATA[<div align="left"><br><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1568355520376&di=b5e9cb8cb9ab1438053528171c8ec33a&imgtype=0&src=http%3A%2F%2Fa1.jikexueyuan.com%2Fhome%2F201509%2F14%2Fab63%2F55f627e6b9bd3.jpg" width="300" height="180" style="float:right;"><br><br><br>　　<strong>这篇文章很短。</strong><br><br><br> </div><a id="more"></a><h1 id="官方说明"><a href="#官方说明" class="headerlink" title="官方说明"></a>官方说明</h1><p><a href="https://help.github.com/en/articles/connecting-to-github-with-ssh" target="_blank" rel="noopener">https://help.github.com/en/articles/connecting-to-github-with-ssh</a><br>不知道是我英语进步了还是咋的，感觉官网的文档写的特别清晰，阅读起来也特别清爽。</p><p>电脑重装了，反正又要添加SSH。我寻思着以前有记录就翻了翻，唉，刚写技术博那会儿的文章真是乱的不能看。干脆重新整理一下吧。</p><p>整个过程非常简单！<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -b 4096 -C <span class="string">"your_email@example.com"</span></span><br></pre></td></tr></table></figure></p><p>不停回车。（没设密码）</p><p>在<code>/c/Users/you/.ssh</code>文件夹中复制id_rsa.pub中的全部。</p><p>在Github的Setting中的<code>SSH and GPG keys</code>中新建SSH，并粘贴刚才的内容。</p><p>完成！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>检测一下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi hubojing! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure></p><p>成功！</p>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;left&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1568355520376&amp;di=b5e9cb8cb9ab1438053528171c8ec33a&amp;imgtype=0&amp;src=http%3A%2F%2Fa1.jikexueyuan.com%2Fhome%2F201509%2F14%2Fab63%2F55f627e6b9bd3.jpg&quot; width=&quot;300&quot; height=&quot;180&quot; style=&quot;float:right;&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;　　&lt;strong&gt;这篇文章很短。&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt; &lt;/div&gt;
    
    </summary>
    
      <category term="互联网" scheme="https://hubojing.github.io/categories/%E4%BA%92%E8%81%94%E7%BD%91/"/>
    
    
      <category term="Github" scheme="https://hubojing.github.io/tags/Github/"/>
    
      <category term="SSH" scheme="https://hubojing.github.io/tags/SSH/"/>
    
  </entry>
  
  <entry>
    <title>ChromeDevTools调试备忘</title>
    <link href="https://hubojing.github.io/2019/08/14/ChromeDevTools%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7%E8%B0%83%E8%AF%95%E6%8C%87%E5%8D%97/"/>
    <id>https://hubojing.github.io/2019/08/14/ChromeDevTools开发者工具调试指南/</id>
    <published>2019-08-14T07:22:21.000Z</published>
    <updated>2019-08-14T07:22:21.000Z</updated>
    
    <content type="html"><![CDATA[<div align="left"><br><img src="http://img5.imgtn.bdimg.com/it/u=2635564510,3265083659&fm=15&gp=0.jpg" width="300" height="180" style="float:right;"><br><br><br>　　<strong>笔记备忘。</strong><br><br><br> </div><a id="more"></a><h1 id="打开Chrome开发者工具"><a href="#打开Chrome开发者工具" class="headerlink" title="打开Chrome开发者工具"></a>打开Chrome开发者工具</h1><ol><li>打开最近关闭的状态：Ctrl+Shift+I(Windows) 或 Cmd+Opt+I(Mac)</li><li>快速查看DOM或样式：Ctrl+Shift+C(Windows) 或 Command+Option+C(Mac)</li><li>快速进入Console查看log运行JavaScript:Ctrl+Shift+J(Windows) 或 Command+Option+J(Mac)</li><li>F12打开</li></ol><h1 id="在Console中访问节点"><a href="#在Console中访问节点" class="headerlink" title="在Console中访问节点"></a>在Console中访问节点</h1><ul><li>使用<code>document.querySelectAll</code>访问</li><li>使用<code>$0</code>快速访问选中的元素</li><li>拷贝 -&gt; JS Path</li></ul><p>在Elements页面按ESC键可以同时打开Console面板。</p><h1 id="DOM中断点调试"><a href="#DOM中断点调试" class="headerlink" title="DOM中断点调试"></a>DOM中断点调试</h1><ul><li>属性修改时打断点：break on -&gt; attribute modifications</li><li>节点删除时打断点：break on -&gt; node removal</li><li>子树修改时打断点：break on -&gt; subtree modifications</li></ul><h1 id="断点调试JS"><a href="#断点调试JS" class="headerlink" title="断点调试JS"></a>断点调试JS</h1><ul><li>console.log()</li><li>alert()</li><li>debugger</li><li>事件断点</li><li>鼠标选中</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;left&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://img5.imgtn.bdimg.com/it/u=2635564510,3265083659&amp;fm=15&amp;gp=0.jpg&quot; width=&quot;300&quot; height=&quot;180&quot; style=&quot;float:right;&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;　　&lt;strong&gt;笔记备忘。&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt; &lt;/div&gt;
    
    </summary>
    
      <category term="互联网" scheme="https://hubojing.github.io/categories/%E4%BA%92%E8%81%94%E7%BD%91/"/>
    
    
      <category term="Web" scheme="https://hubojing.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>初涉Maven</title>
    <link href="https://hubojing.github.io/2019/08/10/%E5%88%9D%E6%B6%89Maven/"/>
    <id>https://hubojing.github.io/2019/08/10/初涉Maven/</id>
    <published>2019-08-10T08:26:08.000Z</published>
    <updated>2019-08-10T08:26:08.000Z</updated>
    
    <content type="html"><![CDATA[<div align="left"><br><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1566053618&di=1c2188a5925b739efac2428e79001e35&imgtype=jpg&er=1&src=http%3A%2F%2Fi1.wp.com%2Fdevops.com%2Fwp-content%2Fuploads%2F2015%2F11%2FMaven_logo.svg_.png" width="300" height="180" style="float:right;"><br><br><br>　　<strong>笔记。</strong><br><br><br> </div><a id="more"></a><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>官网下载安装包，解压。</p><p>bin目录包含mvn的运行脚本<br>boot目录包含一个类加载器的框架<br>conf是配置文件目录</p><p>配置环境变量<code>M2_HOME</code><br>变量值：<code>E:\maven\apache-maven-3.6.1</code></p><p>Path中添加<code>%M2_HOME%\bin</code></p><p>cmd输入<code>mvn -v</code></p><p>输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Maven home: E:\maven\apache-maven-3.6.1\bin\..</span><br><span class="line">Java version: 1.8.0_201, vendor: Oracle Corporation, runtime: E:\JDK\jre</span><br><span class="line">Default locale: zh_CN, platform encoding: GBK</span><br><span class="line">OS name: &quot;windows 10&quot;, version: &quot;10.0&quot;, arch: &quot;amd64&quot;, family: &quot;windows&quot;</span><br></pre></td></tr></table></figure></p><p>即安装成功。</p><h1 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">src</span><br><span class="line">    -main</span><br><span class="line">        -java</span><br><span class="line">            -package</span><br><span class="line">    -test</span><br><span class="line">        -java</span><br><span class="line">            -package</span><br><span class="line">    resources</span><br></pre></td></tr></table></figure><p>新建结构E:\maven\code\maven01\src\main\java\com\jinger\maven01\model<br>在这里新建HelloWorld.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jinger.maven01.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Hello World!"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>新建结构E:\maven\code\maven01\src\test\java\com\jinger\maven01\model<br>在这里新建HelloWorldTest.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jinger.maven01.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.*;</span><br><span class="line"><span class="keyword">import</span> org.junit.Assert.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldTest</span></span>&#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">Assert.assertEquals(<span class="string">"Hello World!"</span>,<span class="keyword">new</span> HelloWorld().sayHello());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在E:\maven\code\maven01新建pom.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.jinger.maven01<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven01-model<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>groupId的值是项目包名<br>artifactId的值是模块名</p><p>cmd里<code>mvn compile</code>编译，第一次安装会自动下载相关依赖。</p><p><code>mvn test</code>测试，显示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">-------------------------------------------------------</span><br><span class="line"> T E S T S</span><br><span class="line">-------------------------------------------------------</span><br><span class="line">Running com.jinger.maven01.model.HelloWorldTest</span><br><span class="line">Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.039 sec</span><br><span class="line"></span><br><span class="line">Results :</span><br><span class="line"></span><br><span class="line">Tests run: 1, Failures: 0, Errors: 0, Skipped: 0</span><br><span class="line"></span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] BUILD SUCCESS</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Total time:  2.068 s</span><br><span class="line">[INFO] Finished at: 2019-07-28T17:26:39+08:00</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br></pre></td></tr></table></figure></p><p>跟目录下生成了target文件夹</p><p><code>mvn package</code>打包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[INFO] Building jar: E:\maven\code\maven01\target\maven01-model-0.0.1SNAPSHOT.jar</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] BUILD SUCCESS</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Total time:  01:46 min</span><br><span class="line">[INFO] Finished at: 2019-07-28T17:29:43+08:00</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>生成了jar包。</p><h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><p>mvn -v 查看maven版本<br>    compile 编译<br>    test 测试<br>    package 打包</p><pre><code>clean 删除targetinstall 安装jar包到本地仓库中</code></pre><p>新建结构E:\maven\code\maven02\src\main\java\com\jinger\maven02\util<br>在这里新建Speak.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jinger.maven02.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.jinger.maven01.model.HelloWorld;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Speak</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">sayHi</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> HelloWorld().sayHello();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>新建结构E:\maven\code\maven02\src\test\java\com\jinger\maven02\util<br>在这里新建SpeakTest.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jinger.maven02.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.*;</span><br><span class="line"><span class="keyword">import</span> org.junit.Assert.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpeakTest</span></span>&#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">Assert.assertEquals(<span class="string">"Hello World!"</span>,<span class="keyword">new</span> Speak().sayHi());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>mvn compile</code>编译</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">错误：[ERROR] /E:/maven/code/maven02/src/main/java/com/jinger/maven02/util/Speak.java:[3,32] 程序包com.jinger.maven01.model不存在</span><br></pre></td></tr></table></figure><p>进入maven01文件夹执行<code>mvn install</code>发送到本地仓库中<br>在pow.xml加入依赖项<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.jinger.maven01<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven01-model<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>完整pom.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.jinger.maven02<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven02-model02<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.jinger.maven01<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven01-model<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="自动创建目录骨架"><a href="#自动创建目录骨架" class="headerlink" title="自动创建目录骨架"></a>自动创建目录骨架</h1><p>archetype插件<br>创建目录的两种方式：</p><ol><li><code>mvn archetype:generate</code><br>选1389  Choose org.apache.maven.archetypes:maven-archetype-quickstart version 再选最新版</li></ol><p>Confirm properties configuration:<br>groupId: com.jinger.maven03<br>artifactId: maven03-service<br>version: 1.0.0SNAPSHOT<br>package: com.jinger.maven03.service</p><ol start="2"><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mvn archetype:generate -DgroupId=组织名, 公司网址的反写+项目名</span><br><span class="line">-DartifactId=项目名-模块名</span><br><span class="line">-Dversion=版本号</span><br><span class="line">-Dpackage=代码所存在的包名</span><br></pre></td></tr></table></figure></li></ol><h1 id="坐标和仓库"><a href="#坐标和仓库" class="headerlink" title="坐标和仓库"></a>坐标和仓库</h1><p>构件通过坐标作为其唯一标识</p><p>修改镜像仓库位置：<br>E:\maven\apache-maven-3.6.1\conf<br>打开settings.xml<br>146行增加<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven.net.cn<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>central mirror in China<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.net.cn/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这个源好像不太行，换成阿里云的可以<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span> *</span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>修改默认本地仓库位置<br>49行增加<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>E:/maven/repo<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>将该settings.xml复制到repo文件夹下。</p><h1 id="在Eclipse中的使用"><a href="#在Eclipse中的使用" class="headerlink" title="在Eclipse中的使用"></a>在Eclipse中的使用</h1><p>新版Eclipse自带Maven插件。<br>新建New-Other-Maven Project，选择quickstart模板。<br>Group Id:com.jinger.hi<br>Artifact Id:hi</p><p>建成后，对pom.xml右键，Run As-2 Maven build …<br>在Goals中填入compile</p><p>再在Goals中填入package<br>jar包构建成功</p><h1 id="Maven生命周期和插件"><a href="#Maven生命周期和插件" class="headerlink" title="Maven生命周期和插件"></a>Maven生命周期和插件</h1><p>完整的项目构建过程包括：<br>清理、编译、测试、打包、集成测试、验证、部署</p><p>maven生命周期：<br>clean 清理项目<br>default 构建项目<br>site 生成项目站点</p><h2 id="clean清理项目"><a href="#clean清理项目" class="headerlink" title="clean清理项目"></a>clean清理项目</h2><p>pre-clean 执行清理前的工作<br>clean 清理上一次构建生成的所有文件<br>post-clean 执行清理后的文件</p><h2 id="default-构建项目（最核心）"><a href="#default-构建项目（最核心）" class="headerlink" title="default 构建项目（最核心）"></a>default 构建项目（最核心）</h2><p>compile test package install</p><h2 id="site-生成项目站点"><a href="#site-生成项目站点" class="headerlink" title="site 生成项目站点"></a>site 生成项目站点</h2><p>pre-site 在生成项目站点前要完成的工作<br>site 生成项目的站点文档<br>post-site 在生成项目站点后要完成的工作<br>site-deploy 发布生成的站点到服务器上</p><p>举例<br>在pom.xml新增<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-source-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar-no-fork<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>run as - maven build …<br><code>clean package</code></p><h1 id="pom-xml常用元素"><a href="#pom-xml常用元素" class="headerlink" title="pom.xml常用元素"></a>pom.xml常用元素</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">pom.xml：maven项目的核心管理文件，用于项目描述、组织管理、依赖管理、构建信息的管理，Pom中包含了许多的标签。</span><br><span class="line">Pom.xml的常用元素：</span><br><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span>是pom.xml的根元素，包含了pom的一些约束信息。</span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>是一个固定的版本，也是必须的元素，指定了当前pom的版本。</span><br><span class="line">坐标的信息由以下标签组成：</span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>主项目标识，公司网址+项目名组成<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">注意：maven的项目和实际的项目不是一一对应关系，maven项目体现的是模块化的概念，因此一个实际项目往往会划分成很多的模块。</span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>一个模块的标识，项目名+模块名进行标识<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>第一个0标识大版本号，第二个0表示分支版本号，第三个0表示小版本号，一般形式可以写为0.0.1snapshot，snapshot快照、alpha内部测试、beta公测、Release稳定、GA版本正式发布<span class="tag">&lt;<span class="name">version</span>&gt;</span>。</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>maven项目打包的方式，默认打包是jar，、其他类型war、zip、pom等<span class="tag">&lt;<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">其他标签：</span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>项目的描述名，一般是在产生对象文档时候才会使用<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>项目的地址<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>项目的描述<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">developers</span>&gt;</span>开发人员的列表<span class="tag">&lt;/<span class="name">developers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">licenses</span>&gt;</span>许可证的信息，比如经常用到的开源框架，它都会有一些许可证的信息<span class="tag">&lt;/<span class="name">licenses</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">organization</span>&gt;</span>组织信息<span class="tag">&lt;/<span class="name">organization</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span>依赖列表</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    依赖项(可以包含多个)</span><br><span class="line">    依赖项用坐标确定依赖的位置</span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>类型<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>依赖的范围（比如上面写的junit的测试范围是test，只在测试的依赖范围内有用，在主代码中引用junit这个类，它就会报错）<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>设置依赖是否可选(默认是false，子项目默认是false时，子项目默认是继承的，如果为true，子项目必须显示的引入该依赖)<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                排除依赖的传递列表(可以排除多个依赖，比如Ajar包依赖Bjar包，Bjar包又依赖Cjar包，C对于A来说就是传递依赖，如果A不想依赖C，就使用该标签)</span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span><span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagementy</span>&gt;</span>依赖的管理<span class="tag">&lt;/<span class="name">dependencyManagementy</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span>依赖的管理,也可以通过<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span>声明依赖列表,通过<span class="tag">&lt;<span class="name">dependency</span>&gt;</span>包含多个依赖，但是它并不会被运行，也就是说它不会被引入到实际的依赖当中，该标签一般主要用于定义在父模块中，供子模块继承用的。比如之前多个maven项目中，都使用到junit，我们就可以抽象出一个父类的模块，然后在父类模块中对junit进行一个定义，其他子模块直接继承该父模块即可。</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    插件列表</span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span>用于子模块对父模块的pom的继承<span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span>指定多个模块一起编译<span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="scope"><a href="#scope" class="headerlink" title="scope"></a>scope</h3><p>三种classpath：</p><ol><li>编译</li><li>测试</li><li>运行</li></ol><p>compile:默认的范围，编译测试运行都有效<br>provided:在编译和测试时有效<br>runtime:在测试和运行时有效<br>test:只在测试时有效<br>system:与本机系统相关联，可移植性差<br>import:导入的范围，它只使用在dependencyManagement中，表示从其它的pom中导入dependency的配置</p><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><p>依赖的传递：<br>多个项目依次依赖，A&lt;-B&lt;-C，后面的引入前面的项目坐标<br>要把前面的项目编译、打包、安装后，后面的项目才能运行build</p><p>短路冲突：<br>1、短路优先<br>A-&gt;B-&gt;C-&gt;X(jar)<br>A-&gt;D-&gt;X(jar)</p><p>先解析下面的</p><p>2、先声明优先<br>如果路径长度相同，则谁先声明，先解析谁</p><h1 id="聚合和继承"><a href="#聚合和继承" class="headerlink" title="聚合和继承"></a>聚合和继承</h1><ol><li><p>项目的继承<br>在父类项目中使用dependencyManagement对依赖进行管理，但是并不会使用依赖，子类需要使用parent标签，来引用父类中的依赖，一般可以将版本号在父类中进行声明，子类无需声明版本号，这样可以保证子类和父类版本号一致。</p></li><li><p>项目的聚合<br>   将packaging打包方式改为pom，使用modules标签，引入其他项目</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>../A<span class="tag">&lt;/<span class="name">module</span>&gt;</span>       </span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>../B<span class="tag">&lt;/<span class="name">module</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>../C<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="构建web项目"><a href="#构建web项目" class="headerlink" title="构建web项目"></a>构建web项目</h1><p>新建项目，模板选择webapp。<br>GroupId: com.jinger.webdemo<br>Artifact Id:webdemo</p><p>建成后，在Navigator中新建<code>src/main/java</code>和<code>src/test/java`</code>src/test/resources`文件夹</p><p>在Project Explorer中对项目右键<code>Build Path</code>-<code>Configure Build Path</code>-<code>Source</code>，确保Output folder是webdemo/target/classes</p><p>项目属性-Project Facets<br>（没有这一项请下载输入<a href="http://download.eclipse.org/releases/oxygen" target="_blank" rel="noopener">http://download.eclipse.org/releases/oxygen</a> ，选择Web, XML, Java EE and OSGi Enterprise Development 安装即可。）<br>勾选Dynamic Web Module<br>最终发布产品时不需要测试代码，项目属性-Deployment Assemnly，remove相关测试文件。</p><p>在pom.xml的<build>下添加<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mortbay.jetty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jetty-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.1.16.v20140903<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure></build></p><p>run as build <code>jetty:run</code><br>浏览器输入<a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a><br>显示Hello World!</p><p>在打包成功后使用jetty:run来运行jetty服务</p><p><version>标签下<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">goal</span>&gt;</span>run<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br></pre></td></tr></table></figure></version></p><p>run as build <code>clean package</code><br>浏览器输入<a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a><br>显示Hello World!</p><p>使用tomcat同理。</p>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;left&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1566053618&amp;di=1c2188a5925b739efac2428e79001e35&amp;imgtype=jpg&amp;er=1&amp;src=http%3A%2F%2Fi1.wp.com%2Fdevops.com%2Fwp-content%2Fuploads%2F2015%2F11%2FMaven_logo.svg_.png&quot; width=&quot;300&quot; height=&quot;180&quot; style=&quot;float:right;&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;　　&lt;strong&gt;笔记。&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt; &lt;/div&gt;
    
    </summary>
    
      <category term="互联网" scheme="https://hubojing.github.io/categories/%E4%BA%92%E8%81%94%E7%BD%91/"/>
    
    
      <category term="Java" scheme="https://hubojing.github.io/tags/Java/"/>
    
      <category term="Maven" scheme="https://hubojing.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>测手速软件APMShow开发——佟年送给韩商言的礼物</title>
    <link href="https://hubojing.github.io/2019/07/22/%E6%B5%8B%E6%89%8B%E9%80%9F%E8%BD%AF%E4%BB%B6APMShow%E5%BC%80%E5%8F%91%E2%80%94%E2%80%94%E4%BD%9F%E5%B9%B4%E9%80%81%E7%BB%99%E9%9F%A9%E5%95%86%E8%A8%80%E7%9A%84%E7%A4%BC%E7%89%A9/"/>
    <id>https://hubojing.github.io/2019/07/22/测手速软件APMShow开发——佟年送给韩商言的礼物/</id>
    <published>2019-07-22T06:26:45.000Z</published>
    <updated>2019-07-22T13:17:26.000Z</updated>
    
    <content type="html"><![CDATA[<div align="left"><br><img src="http://img3.duitang.com/uploads/item/201608/08/20160808121716_RfcQj.jpeg" width="300" height="180" style="float:right;"><br><br>　　<strong>Electron开发</strong><br>　　<strong>追剧写代码啧啧啧</strong><br>　　<br><br> </div><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>　　最近看了一部剧，可以说是很甜了……<br>　　<del>傻白甜</del>女主角佟年99年计算机专业研二（ε=(´ο｀*)))唉，其实人家肤白貌美智商高碾压众人让人悲伤<br>　　（ACM亚军呜呜呜呜呜…）<br>　　还可爱！</p><p>　　男主韩商言本来设定是顶级电竞选手，后来改成了CTF比赛顶级选手。虽然改的很生硬，但也算是成功科普了CTF。（还是得吐槽，打CTF的人怎么可能不知道计算机专业的东西……）</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1565458984773&di=52ad109e973a29ddebc894ca91bcb49f&imgtype=0&src=http%3A%2F%2Fpic1.win4000.com%2Fpic%2Fc%2F0a%2F157d3f7b7a_250_350.jpg" alt="二次元韩商言" title="">                </div>                <div class="image-caption">二次元韩商言</div>            </figure><blockquote><p>CTF(Capture The Flag)，夺旗赛。CTF是一种流行的信息安全竞赛形式，其英文名可直译为“夺得Flag”，也可意译为“夺旗赛”。其大致流程是，参赛团队之间通过进行攻防对抗、程序分析等形式，率先从主办方给出的比赛环境中得到一串具有一定格式的字符串或其他内容，并将其提交给主办方，从而夺得分数。为了方便称呼，我们把这样的内容称之为“Flag”。</p></blockquote><p>　　这是多么酷炫的比赛啊。剧里所有的家长们却都嫌弃男主不务正业天天玩电脑？？？</p><p>　　写的一手好代码的佟年，送给Gun神的第一件礼物竟然是——<br>　　熬夜写了一个晚上的测手速的软件……<br>　　？<br>　　散发着工科硬核味道的礼物还真是<del>可爱</del>一言难尽哦</p><p>　　不禁使我想起了本科毕业时，本来我也为朋友们准备了毕业礼物的。当时兴致勃勃打算给朋友们每人写一个app……<br>　　然而由于时间都在工作上，<del>加上当时开发速度太慢了，</del>后来拖久了感觉失去了毕业礼物的时效性，就不了了之了……</p><p>　　那么，我要说的是什么<br>　　……<br>　　我要说，这个测手速的软件呢，佟年提到的时候我觉得应该挺简单的，所以我也做了一个，顺便把kk俱乐部里原来那种听音测试也加了进去，娱乐一下哈哈哈哈</p><h1 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h1><p>　　框架：Electron</p><p>　　语言：Html、CSS、JS</p><h1 id="Electron开发"><a href="#Electron开发" class="headerlink" title="Electron开发"></a>Electron开发</h1><h2 id="安装与配置"><a href="#安装与配置" class="headerlink" title="安装与配置"></a>安装与配置</h2><p>　　新建app文件夹。<br>　　初始化<code>npm init</code><br>　　安装Electron<code>npm install electron --save-dev</code></p><h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><p>　　Electron安好了<br>　　再就HTML CSS JS慢慢写呗</p><h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><p><code>npm install electron-packager -g</code></p><p>　　package.json添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;package&quot;: &quot;electron-packager . APMShow --platform=win32 --arch=x64 --out=./out --asar --app-version=0.0.1 --electron-version=5.0.7 --overwrite --ignore=node_modules&quot;</span><br></pre></td></tr></table></figure></p><p>　　执行<code>npm run package</code>打包。</p><h2 id="Electron小笔记"><a href="#Electron小笔记" class="headerlink" title="Electron小笔记"></a>Electron小笔记</h2><h3 id="开启调试工具"><a href="#开启调试工具" class="headerlink" title="开启调试工具"></a>开启调试工具</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">win.webContents.openDevTools()</span><br></pre></td></tr></table></figure><h3 id="锁定窗口大小"><a href="#锁定窗口大小" class="headerlink" title="锁定窗口大小"></a>锁定窗口大小</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">win = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">       width: <span class="number">650</span>,</span><br><span class="line">       height: <span class="number">990</span>,</span><br><span class="line">       resizable: <span class="literal">false</span>,</span><br><span class="line">       webPreferences: &#123;</span><br><span class="line">           nodeIntegration: <span class="literal">true</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure><p>　　<code>resizable: false</code>是重点。</p><h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/测手速软件APMShow开发——APP首页.png?raw=true" alt="首页" title="">                </div>                <div class="image-caption">首页</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/测手速软件APMShow开发——限时测速.png?raw=true" alt="限时测速" title="">                </div>                <div class="image-caption">限时测速</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/测手速软件APMShow开发——倒计时.png?raw=true" alt="倒计时" title="">                </div>                <div class="image-caption">倒计时</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/测手速软件APMShow开发——听音测速.png?raw=true" alt="听音测速" title="">                </div>                <div class="image-caption">听音测速</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/测手速软件APMShow开发——色变测速.png?raw=true" alt="色变测速" title="">                </div>                <div class="image-caption">色变测速</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/测手速软件APMShow开发——结果.png?raw=true" alt="成绩" title="">                </div>                <div class="image-caption">成绩</div>            </figure><p>　　再加个排行榜？</p><h1 id="软件下载"><a href="#软件下载" class="headerlink" title="软件下载"></a>软件下载</h1><p>　　点开文件夹里的exe程序直接运行即可。（也许哪天想给它加个安装程序也未可知…）<br>　　链接：<a href="https://pan.baidu.com/s/1MfuyH7QAHjZT311888t4Og" target="_blank" rel="noopener">https://pan.baidu.com/s/1MfuyH7QAHjZT311888t4Og</a><br>　　提取码：vbz9 </p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>　　<a href="https://github.com/hubojing/APMShow" target="_blank" rel="noopener">https://github.com/hubojing/APMShow</a></p><h1 id="后语"><a href="#后语" class="headerlink" title="后语"></a>后语</h1><p>　　纯属娱乐~~</p><p>　　听说最近韩商言要分手，要不佟年看看可怜的吴白吧……<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://wx1.sinaimg.cn/bmiddle/b54296afgy1g56ksrs7szj20u00u0agy.jpg" alt="表情包" title="">                </div>                <div class="image-caption">表情包</div>            </figure></p>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;left&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://img3.duitang.com/uploads/item/201608/08/20160808121716_RfcQj.jpeg&quot; width=&quot;300&quot; height=&quot;180&quot; style=&quot;float:right;&quot;&gt;&lt;br&gt;&lt;br&gt;　　&lt;strong&gt;Electron开发&lt;/strong&gt;&lt;br&gt;　　&lt;strong&gt;追剧写代码啧啧啧&lt;/strong&gt;&lt;br&gt;　　&lt;br&gt;&lt;br&gt; &lt;/div&gt;
    
    </summary>
    
      <category term="互联网" scheme="https://hubojing.github.io/categories/%E4%BA%92%E8%81%94%E7%BD%91/"/>
    
    
      <category term="前端" scheme="https://hubojing.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="软件开发" scheme="https://hubojing.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
      <category term="Electron" scheme="https://hubojing.github.io/tags/Electron/"/>
    
  </entry>
  
  <entry>
    <title>LBSN基于位置的社交网络</title>
    <link href="https://hubojing.github.io/2019/07/17/LBSN/"/>
    <id>https://hubojing.github.io/2019/07/17/LBSN/</id>
    <published>2019-07-17T06:35:46.000Z</published>
    <updated>2019-07-20T16:03:20.000Z</updated>
    
    <content type="html"><![CDATA[<div align="left"><br><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1565459219422&di=24d422892e8989d6bd18a2a93aae8230&imgtype=0&src=http%3A%2F%2Fpic.51yuansu.com%2Fpic3%2Fcover%2F03%2F05%2F94%2F5b2c9f2655ac0_610.jpg" width="300" height="180" style="float:right;"><br><br><br>　　<strong>一些基础知识。</strong><br><br><br> </div><a id="more"></a><p>签到(check-in)：用户上传自身位置到社交网站的行为。<br>每一个签到的位置称为一个兴趣点POI(Point of Interest)。</p><p>对签到信息聚类，对用户历史轨迹进行机器学习，可预测用户未来的轨迹路线。<br>传统研究模型采用k-means或k-medoids聚类方法将数据划分为k个簇集，通过计算对象之间的相似度进行聚类。</p><p>传统在线社交网络(OSN, Online Social Network)。<br>LBS(Location Based Service),基于位置的服务。<br>LBSN(Location-based Social Network)，基于位置的社会网络。<br>对于不同的LBSN网络，不同的推荐系统使用了不同的推荐算法，常见的推荐算法包括：协同过滤算法、基于内容的推荐算法、基于位置的推荐算法等。</p><h1 id="经典推荐算法"><a href="#经典推荐算法" class="headerlink" title="经典推荐算法"></a>经典推荐算法</h1><h2 id="协同过滤算法-collaborative-filtering-CF"><a href="#协同过滤算法-collaborative-filtering-CF" class="headerlink" title="协同过滤算法(collaborative filtering, CF)"></a>协同过滤算法(collaborative filtering, CF)</h2><h3 id="基于Memory-based-基于内存"><a href="#基于Memory-based-基于内存" class="headerlink" title="基于Memory-based(基于内存)"></a>基于Memory-based(基于内存)</h3><p>又可分为Item-based推荐算法和User-based推荐算法</p><h3 id="基于Model-based-基于模型"><a href="#基于Model-based-基于模型" class="headerlink" title="基于Model-based(基于模型)"></a>基于Model-based(基于模型)</h3><p>又分为<br>分解模型算法：如奇异值分解(Singular Value Decomposition)模型算法<br>基于图模型的推荐算法：如贝叶斯网络(Bayesian Network)模型推荐算法<br>决策树(Decision Tree)模型推荐算法<br>图聚类(Graph Clustering)模型推荐算法</p><h2 id="基于内容的推荐算法"><a href="#基于内容的推荐算法" class="headerlink" title="基于内容的推荐算法"></a>基于内容的推荐算法</h2><h2 id="基于关联规则的推荐算法"><a href="#基于关联规则的推荐算法" class="headerlink" title="基于关联规则的推荐算法"></a>基于关联规则的推荐算法</h2><p>比如Apriori算法</p><h2 id="基于混合的推荐算法"><a href="#基于混合的推荐算法" class="headerlink" title="基于混合的推荐算法"></a>基于混合的推荐算法</h2><p>常用混合思路：加权、特征组合、层叠、变换等</p><h1 id="基于位置的推荐算法"><a href="#基于位置的推荐算法" class="headerlink" title="基于位置的推荐算法"></a>基于位置的推荐算法</h1><h1 id="聚类"><a href="#聚类" class="headerlink" title="聚类"></a>聚类</h1><h2 id="相似性计算"><a href="#相似性计算" class="headerlink" title="相似性计算"></a>相似性计算</h2><h2 id="聚类算法"><a href="#聚类算法" class="headerlink" title="聚类算法"></a>聚类算法</h2><p>k-means算法，又称为k均值算法<br>k-medoids算法，又称为k中心算法</p><h1 id="LBSN用户行为预测"><a href="#LBSN用户行为预测" class="headerlink" title="LBSN用户行为预测"></a>LBSN用户行为预测</h1><h2 id="基于用户个人的数据"><a href="#基于用户个人的数据" class="headerlink" title="基于用户个人的数据"></a>基于用户个人的数据</h2><p>只关注用户的历史移动轨迹来预测用户下一个位置。</p><h2 id="基于所有用户产生的数据"><a href="#基于所有用户产生的数据" class="headerlink" title="基于所有用户产生的数据"></a>基于所有用户产生的数据</h2><p>采用概率分布模型的方法预测下一个位置。</p><h2 id="基于前两种数据的结合"><a href="#基于前两种数据的结合" class="headerlink" title="基于前两种数据的结合"></a>基于前两种数据的结合</h2><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>罗维佳.基于LBSN的个性化推荐技术研究 2016</p>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;left&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1565459219422&amp;di=24d422892e8989d6bd18a2a93aae8230&amp;imgtype=0&amp;src=http%3A%2F%2Fpic.51yuansu.com%2Fpic3%2Fcover%2F03%2F05%2F94%2F5b2c9f2655ac0_610.jpg&quot; width=&quot;300&quot; height=&quot;180&quot; style=&quot;float:right;&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;　　&lt;strong&gt;一些基础知识。&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt; &lt;/div&gt;
    
    </summary>
    
      <category term="互联网" scheme="https://hubojing.github.io/categories/%E4%BA%92%E8%81%94%E7%BD%91/"/>
    
    
      <category term="LBSN" scheme="https://hubojing.github.io/tags/LBSN/"/>
    
      <category term="推荐系统" scheme="https://hubojing.github.io/tags/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>微言笔记</title>
    <link href="https://hubojing.github.io/2019/07/14/%E5%BE%AE%E8%A8%80%E7%AC%94%E8%AE%B0/"/>
    <id>https://hubojing.github.io/2019/07/14/微言笔记/</id>
    <published>2019-07-14T04:11:34.000Z</published>
    <updated>2019-07-14T04:19:04.000Z</updated>
    
    <content type="html"><![CDATA[<div align="left"><br><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563088003944&di=a15683d50ab076b5b7d9383c24ce7d80&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201710%2F11%2F20171011122118_mavCw.jpeg" width="300" height="180" style="float:right;"><br><br><br>　　<strong>来自微言板块（自言自语）的临时笔记汇总。</strong><br><br><br> </div><a id="more"></a><p>程序员是软件食物链的最后一环。架构师吃掉需求，设计师吃掉架构，而程序员则消化设计。</p><p>问题定义-&gt;需求-&gt;架构-&gt;构建-&gt;系统测试-&gt;将来的改进</p><p>一个程序中的设计层次：软件系统-&gt;分解为子系统和包-&gt;分解为包中的类-&gt;分解为类中的数据和子程序-&gt;子程序内部</p><p>问题“这个类需要隐藏些什么？”正切中了接口设计的核心。要养成“我该隐藏些什么？”的习惯。</p><p>好的抽象：类的接口应该展现一致的抽象层次；要理解类所实现的抽象是什么；提供成对的服务；把不相关的信息转移到其他类中；尽可能让接口可编程，而不是表达语义；谨防在修改时破坏接口的抽象；不要添加与接口抽象不一致的公用成员；同时考虑抽象性和内聚性。</p><p>好的封装：尽可能地限制类和成员的可访问性；不要公开暴露成员数据；避免把私用的实现细节放入类的接口中；不要对类的使用者做出任何假设；避免使用友元类；不要因为一个子程序里仅使用公用子程序，就把它归入公开接口；让阅读代码比编写代码更方便；要警惕从语义上破坏封装性；留意过于紧密的耦合关系。</p><p>封装：把数据声明为private，不允许外界随意存取，只能通过特定的接口来操作。继承：成员函数有一个隐藏参数，名为this指针。虚函数与多态：如果预期派生类有可能重新定义某一个成员函数，就在基类中把比函数设为virtual。纯虚函数不需定义其实际操作，它的存在只是为了在派生类中被重新定义（在函数声明之后加上“＝0”即可）。虚函数派生下去仍为虚函数，而且可以省略virtual关键词。</p><p>static成员变量不属于对象的一部分，而是类的的一部分，所以程序可以在还没有诞生任何对象时处理这种成员变量，但首先必须初始化它。不要把static成员变量的初始化操作安排在类的构造函数中，因为构造函数可能一再被调用，而变量的初值却只应设定一次。也不要把初始化操作安排在头文件中，因为它可能会被载入许多地方，因此也就可能被执行许多次。应该在应用程序文件中，类以外的任何位置设定其初值。例如在main之中，或全局函数中，或任何函数之外。</p><p>所谓”Unwinding”：C++按顺序析构，但若发生异常情况(exception)，且程序设计了异常情况处理程序(exception handling)，控制权就会“直接跳”到你所设定的处理程序去。此时堆栈中的C++对象有没有机会被析构，要视编译器而定。若编译器支持unwinding功能，则会在异常情况发生时，将堆栈中的所有对象都析构掉。</p><p>C指针：<br>在C语言里，只有当你在赋值语句的参数前面加了星号（*），才能把该参数从子程序中传回去。<br>在内存分配中使用sizeof()确定变量的大小。由于sizeof()是在编译期间计算的，因此不会带来性能上的损失。</p><p><em>p  p是指针，</em>p是对象</p><p>在Java中，a==b判断的是a和b是否引用了同一个对象，而a.equals(b)判断的是这两个对象是否具有相同的值。一般来说，Java应用程序里应该使用像a.equals(b)这样的表达式，而不要用a==b。</p><p>如果一个错误无法重现，这通常会是一个初始化错误，或者是一个同时间有关的问题，或者是悬空指针(dangling-pointer)问题。如果某个求和结果时对时错，很有可能是参与计算的某个变量未能正确地初始化——可能正好在大多数情况它是从0开始。如果这个问题诡异且变幻莫测，并且又在使用指针，那么几乎可以肯定是代码中有未初始化的指针，或者用了所指向的内存区域已经被释放的指针。</p><p>windows文件结束符Ctrl+Z，UNIX（包括Mac OS X）是Ctrl+D。</p><p>“编辑-编译-调试”（edit-compile-debug）周期</p><p>计算机以比特序列存储数据，每个比特非0即1。大多数计算机以2的整数次幂个比特作为块来处理内存，可寻址的最小内存块称为“字节（byte）”，存储的基本单元称为“字（word）”，它通常由几个字节组成。在C++中，一个字节要至少能容纳机器基本字符集中的字符。大多数机器的字节由8比特构成，字则由32或64比特构成，也就是4或8字节。大多数计算机将内存中的每个字节与一个数字（被称为“地址（address）”）关联起来。</p><p>当我们赋给无符号类型一个超出它表示范围的值时，结果是初始值对无符号类型表示数值总数取模后的余数。例如，8比特大小的unsigned char可以表示0至255区间内的值，如果赋了一个区间以外的值，则实际的结果是该值对256取模后所得的余数。因此，把-1赋给8比特大小的unsigned char所得的结果是255。<br>当我们赋给带符号类型一个超出它表示范围的值时，结果是未定义的（undefined）。此时，程序可能继续工作、可能崩溃，也可能生成垃圾数据。</p><p>如果想声明一个变量而非定义它，就在变量名前添加关键字extern，而且不要显式地初始化变量。<br>C++是一种静态类型（statically typed）语言，其含义是在编译阶段检查类型。</p><p>int i=42;<br>int ＆r＝i;//＆紧随类型名出现，因此是声明的一部分，r是一个引用<br>int <em>p;//</em>紧随类型名出现，因此是声明的一部分，p是一个指针<br>p＝＆i;//＆出现在表达式中，是一个取地址符<br><em>p＝i;//</em>出现在表达式中，是一个解引用符<br>int ＆r2＝<em>p;//＆是声明的一部分，</em>是一个解引用符<br>在声明语句中，＆和*用于组成复合类型；在表达式中，它们的角色又转变成运算符。</p><p>int <em>p1＝nullptr;//等价于int </em>p1＝0;<br>在新标准下，现在的C++程序最好使用nullptr，同时尽量避免使用NULL。</p><p>指向指针的引用<br>引用本身不是一个对象，因此不能定义指向引用的指针。但指针是对象，所以存在对指针的引用:<br>int i＝42;<br>int <em>p;//p是一个int型指针<br>int </em>＆r=p;//r是一个对指针p的引用<br>r=＆i;//r引用了一个指针，因此给r赋值＆i就是令p指向i<br>*r=0;//解引用r得到i，也就是p指向的对象，将i的值改为0</p><p>如果想在多个文件之间共享const对象，必须在变量的定义之前添加extern关键字。</p><p>select SalesPersonID,OrderDate,Max(TotalDue) as MaximumTotalSales<br>from [Sales].[SalesOrderHeader]<br>where SalesPersonID is not null and OrderDate &gt;=’2007/1/1’<br>group by SalesPersonID,OrderDate<br>having Max(TotalDue)&gt;150000<br>order by OrderDate desc</p><p>“A computer program is said to learn from experience E with respect to some task T and some performance measure P, if its performance on T, as measured by P, improves with experience E.”</p><p>建议把较大的数组放在main函数外（局部变量放在堆栈段）。栈溢出不一定是递归调用太多，也可能是局部变量太大。只要总大小超过了允许的范围，就会产生栈溢出。</p><p>计算机图形学：结构特征数据–&gt;图像信号<br>计算机视觉：图像信号—&gt;结构特征数据<br>数字图像处理：图像信号—&gt;图像信号</p><p>JS中如何输出空格:<br>1.document.write(“  “+”1”+”    “+”23”);<br>2.document.write(“”+” 1 2 3 “+””);<br>“white-space:pre;”样式表示”空白会被浏览器保留”</p><p>JavaScript为HTML赋予行为，通过ECMAScript标准，利用BOM对象来操作浏览器窗口，浏览器导航对象，屏幕分辨率，浏览器历史，cookie等，利用DOM操作HTML（核心）。</p>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;left&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1563088003944&amp;di=a15683d50ab076b5b7d9383c24ce7d80&amp;imgtype=0&amp;src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201710%2F11%2F20171011122118_mavCw.jpeg&quot; width=&quot;300&quot; height=&quot;180&quot; style=&quot;float:right;&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;　　&lt;strong&gt;来自微言板块（自言自语）的临时笔记汇总。&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt; &lt;/div&gt;
    
    </summary>
    
      <category term="互联网" scheme="https://hubojing.github.io/categories/%E4%BA%92%E8%81%94%E7%BD%91/"/>
    
    
      <category term="笔记" scheme="https://hubojing.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>图</title>
    <link href="https://hubojing.github.io/2019/06/22/%E5%9B%BE/"/>
    <id>https://hubojing.github.io/2019/06/22/图/</id>
    <published>2019-06-22T07:12:35.000Z</published>
    <updated>2019-06-23T10:44:46.000Z</updated>
    
    <content type="html"><![CDATA[<div align="left"><br><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1550075379443&di=51f53328008b4821ce8f839ac9186c0c&imgtype=0&src=http%3A%2F%2Fhiphotos.baidu.com%2Fdoc%2Fpic%2Fitem%2Fb17eca8065380cd7e40f7c6ba844ad3459828127.jpg" width="300" height="180" style="float:right;"><br><br><br>　　<strong>图、 prim 和 kruskal</strong><br><br><br> </div><a id="more"></a><h1 id="数据结构笔记目录"><a href="#数据结构笔记目录" class="headerlink" title="数据结构笔记目录"></a>数据结构笔记目录</h1><p>栈 <a href="https://hubojing.github.io/2017/11/14/%E6%A0%88/">https://hubojing.github.io/2017/11/14/%E6%A0%88/</a><br>队列 <a href="https://hubojing.github.io/2017/11/12/%E9%98%9F%E5%88%97/">https://hubojing.github.io/2017/11/12/%E9%98%9F%E5%88%97/</a><br>线性表    <a href="https://hubojing.github.io/2019/06/12/%E7%BA%BF%E6%80%A7%E8%A1%A8/">https://hubojing.github.io/2019/06/12/%E7%BA%BF%E6%80%A7%E8%A1%A8/</a><br>树 <a href="https://hubojing.github.io/2017/07/23/%E6%A0%91/">https://hubojing.github.io/2017/07/23/%E6%A0%91/</a></p><h1 id="图的基本操作和遍历"><a href="#图的基本操作和遍历" class="headerlink" title="图的基本操作和遍历"></a>图的基本操作和遍历</h1><h2 id="Node-h"><a href="#Node-h" class="headerlink" title="Node.h"></a>Node.h</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> NODE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NODE_H</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Node(<span class="keyword">char</span> data = <span class="number">0</span>);</span><br><span class="line"><span class="keyword">char</span> m_cData;</span><br><span class="line"><span class="keyword">bool</span> m_bIsVisited;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="Node-cpp"><a href="#Node-cpp" class="headerlink" title="Node.cpp"></a>Node.cpp</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Node.h"</span></span></span><br><span class="line"></span><br><span class="line">Node::Node(<span class="keyword">char</span> data)</span><br><span class="line">&#123;</span><br><span class="line">m_cData = data;</span><br><span class="line">m_bIsVisited = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CMap-h"><a href="#CMap-h" class="headerlink" title="CMap.h"></a>CMap.h</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"Node.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CMap</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">CMap(<span class="keyword">int</span> capacity);</span><br><span class="line">~CMap();</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">addNode</span><span class="params">(Node *pNode)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resetNode</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">setValueToMatrixForDirectedGraph</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> col, <span class="keyword">int</span> val = <span class="number">1</span>)</span></span>;<span class="comment">//为有向图设置邻接矩阵</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">setValueToMatrixForUndirectedGraph</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> col, <span class="keyword">int</span> val = <span class="number">1</span>)</span></span>;<span class="comment">//为无向图设置邻接矩阵</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printMatrix</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">depthFirstTraverse</span><span class="params">(<span class="keyword">int</span> nodeIndex)</span></span>;<span class="comment">//深度优先遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">breadthFirstTraverse</span><span class="params">(<span class="keyword">int</span> nodeIndex)</span></span>;<span class="comment">//广义优先遍历</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">getValueFromMatrix</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> col, <span class="keyword">int</span> &amp;val)</span></span>;<span class="comment">//从矩阵中获取权值</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">breadthFirstTraverseImpl</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; preVec)</span></span>;<span class="comment">//广度优先遍历实现函数</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> m_iCapacity;<span class="comment">//最多可容纳的顶点数</span></span><br><span class="line"><span class="keyword">int</span> m_iNodeCount;<span class="comment">//已添加的顶点个数</span></span><br><span class="line">Node *m_pNodeArray;<span class="comment">//存放顶点数组</span></span><br><span class="line"><span class="keyword">int</span> *m_pMatrix;<span class="comment">//存放邻接矩阵</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="CMap-cpp"><a href="#CMap-cpp" class="headerlink" title="CMap.cpp"></a>CMap.cpp</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"CMap.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line">CMap::CMap(<span class="keyword">int</span> capacity)</span><br><span class="line">&#123;</span><br><span class="line">m_iCapacity = capacity;</span><br><span class="line">m_iNodeCount = <span class="number">0</span>;</span><br><span class="line">m_pNodeArray = <span class="keyword">new</span> Node[m_iCapacity];</span><br><span class="line">m_pMatrix = <span class="keyword">new</span> <span class="keyword">int</span>[m_iCapacity * m_iCapacity];</span><br><span class="line"><span class="built_in">memset</span>(m_pMatrix, <span class="number">0</span>, m_iCapacity*m_iCapacity * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"><span class="comment">// for (int i = 0; i &lt; m_iCapacity*m_iCapacity; ++i)</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">// m_pMatrix[i] = 0;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CMap::~CMap()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span>[]m_pNodeArray;</span><br><span class="line"><span class="keyword">delete</span>[]m_pMatrix;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> CMap::addNode(Node *pNode)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (pNode == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">m_pNodeArray[m_iNodeCount].m_cData = pNode-&gt;m_cData;</span><br><span class="line">m_iNodeCount++;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CMap::resetNode()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m_iNodeCount; ++i)</span><br><span class="line">&#123;</span><br><span class="line">m_pNodeArray[i].m_bIsVisited = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> CMap::setValueToMatrixForDirectedGraph(<span class="keyword">int</span> row, <span class="keyword">int</span> col, <span class="keyword">int</span> val)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (row &lt; <span class="number">0</span> || row &gt;= m_iCapacity)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (col &lt; <span class="number">0</span> || col &gt;= m_iCapacity)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">m_pMatrix[row * m_iCapacity + col] = val;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> CMap::setValueToMatrixForUndirectedGraph(<span class="keyword">int</span> row, <span class="keyword">int</span> col, <span class="keyword">int</span> val)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (row &lt; <span class="number">0</span> || row &gt;= m_iCapacity)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (col &lt; <span class="number">0</span> || col &gt;= m_iCapacity)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">m_pMatrix[row * m_iCapacity + col] = val;</span><br><span class="line">m_pMatrix[col * m_iCapacity + row] = val;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CMap::printMatrix()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m_iCapacity; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m_iCapacity; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; m_pMatrix[i * m_iCapacity + j] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> CMap::getValueFromMatrix(<span class="keyword">int</span> row, <span class="keyword">int</span> col, <span class="keyword">int</span> &amp;val)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (row &lt; <span class="number">0</span> || row &gt;= m_iCapacity)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (col &lt; <span class="number">0</span> || col &gt;= m_iCapacity)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">val = m_pMatrix[row * m_iCapacity + col];</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CMap::depthFirstTraverse(<span class="keyword">int</span> nodeIndex)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> value = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; m_pNodeArray[nodeIndex].m_cData &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">m_pNodeArray[nodeIndex].m_bIsVisited = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过邻接矩阵判断是否与其他顶点相连</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m_iCapacity; ++i)</span><br><span class="line">&#123;</span><br><span class="line">getValueFromMatrix(nodeIndex, i, value);</span><br><span class="line"><span class="keyword">if</span> (value == <span class="number">1</span>)<span class="comment">//判断有弧连接其他顶点</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//再判断该点是否被访问过</span></span><br><span class="line"><span class="keyword">if</span> (m_pNodeArray[i].m_bIsVisited)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">depthFirstTraverse(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CMap::breadthFirstTraverse(<span class="keyword">int</span> nodeIndex)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; m_pNodeArray[nodeIndex].m_cData &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">m_pNodeArray[nodeIndex].m_bIsVisited = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; curVec;</span><br><span class="line">curVec.push_back(nodeIndex);</span><br><span class="line"></span><br><span class="line">breadthFirstTraverseImpl(curVec);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CMap::breadthFirstTraverseImpl(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; preVec)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> value = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; curVec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; (<span class="keyword">int</span>)i &lt; preVec.size(); ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m_iCapacity; ++j)</span><br><span class="line">&#123;</span><br><span class="line">getValueFromMatrix(preVec[i], j, value);</span><br><span class="line"><span class="keyword">if</span> (value != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (m_pNodeArray[j].m_bIsVisited)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; m_pNodeArray[j].m_cData &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">m_pNodeArray[j].m_bIsVisited = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">curVec.push_back(j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (curVec.size() == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">breadthFirstTraverseImpl(curVec);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="demo-cpp"><a href="#demo-cpp" class="headerlink" title="demo.cpp"></a>demo.cpp</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"CMap.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">A</span></span><br><span class="line"><span class="comment">  /   \</span></span><br><span class="line"><span class="comment"> B     D</span></span><br><span class="line"><span class="comment">/ \   / \</span></span><br><span class="line"><span class="comment">   C - F G - H</span></span><br><span class="line"><span class="comment">\ /</span></span><br><span class="line"><span class="comment"> E</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CMap *pMap = <span class="keyword">new</span> CMap(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">Node *pNodeA = <span class="keyword">new</span> Node(<span class="string">'A'</span>);</span><br><span class="line">Node *pNodeB = <span class="keyword">new</span> Node(<span class="string">'B'</span>);</span><br><span class="line">Node *pNodeC = <span class="keyword">new</span> Node(<span class="string">'C'</span>);</span><br><span class="line">Node *pNodeD = <span class="keyword">new</span> Node(<span class="string">'D'</span>);</span><br><span class="line">Node *pNodeE = <span class="keyword">new</span> Node(<span class="string">'E'</span>);</span><br><span class="line">Node *pNodeF = <span class="keyword">new</span> Node(<span class="string">'F'</span>);</span><br><span class="line">Node *pNodeG = <span class="keyword">new</span> Node(<span class="string">'G'</span>);</span><br><span class="line">Node *pNodeH = <span class="keyword">new</span> Node(<span class="string">'H'</span>);</span><br><span class="line"></span><br><span class="line">pMap-&gt;addNode(pNodeA);</span><br><span class="line">pMap-&gt;addNode(pNodeB);</span><br><span class="line">pMap-&gt;addNode(pNodeC);</span><br><span class="line">pMap-&gt;addNode(pNodeD);</span><br><span class="line">pMap-&gt;addNode(pNodeE);</span><br><span class="line">pMap-&gt;addNode(pNodeF);</span><br><span class="line">pMap-&gt;addNode(pNodeG);</span><br><span class="line">pMap-&gt;addNode(pNodeH);</span><br><span class="line"></span><br><span class="line">pMap-&gt;setValueToMatrixForUndirectedGraph(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">pMap-&gt;setValueToMatrixForUndirectedGraph(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">pMap-&gt;setValueToMatrixForUndirectedGraph(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">pMap-&gt;setValueToMatrixForUndirectedGraph(<span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line">pMap-&gt;setValueToMatrixForUndirectedGraph(<span class="number">3</span>, <span class="number">6</span>);</span><br><span class="line">pMap-&gt;setValueToMatrixForUndirectedGraph(<span class="number">3</span>, <span class="number">7</span>);</span><br><span class="line">pMap-&gt;setValueToMatrixForUndirectedGraph(<span class="number">6</span>, <span class="number">7</span>);</span><br><span class="line">pMap-&gt;setValueToMatrixForUndirectedGraph(<span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line">pMap-&gt;setValueToMatrixForUndirectedGraph(<span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">pMap-&gt;printMatrix();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">pMap-&gt;depthFirstTraverse(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">pMap-&gt;resetNode();</span><br><span class="line">pMap-&gt;breadthFirstTraverse(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">0 1 0 1 0 0 0 0</span><br><span class="line">1 0 1 0 0 1 0 0</span><br><span class="line">0 1 0 0 1 0 0 0</span><br><span class="line">1 0 0 0 0 0 1 1</span><br><span class="line">0 0 1 0 0 1 0 0</span><br><span class="line">0 1 0 0 1 0 0 0</span><br><span class="line">0 0 0 1 0 0 0 1</span><br><span class="line">0 0 0 1 0 0 1 0</span><br><span class="line"></span><br><span class="line">A B C E F D G H</span><br><span class="line">A B D C F G H E</span><br></pre></td></tr></table></figure></p><h1 id="最小生成树算法"><a href="#最小生成树算法" class="headerlink" title="最小生成树算法"></a>最小生成树算法</h1><h2 id="普利姆算法"><a href="#普利姆算法" class="headerlink" title="普利姆算法"></a>普利姆算法</h2><h3 id="Edge-h"><a href="#Edge-h" class="headerlink" title="Edge.h"></a>Edge.h</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> EDGE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EDGE_H</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Edge(<span class="keyword">int</span> nodeIndexA = <span class="number">0</span>, <span class="keyword">int</span> nodeIndexB = <span class="number">0</span>, <span class="keyword">int</span> weightValue = <span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> m_iNodeIndexA;</span><br><span class="line"><span class="keyword">int</span> m_iNodeIndexB;</span><br><span class="line"><span class="keyword">int</span> m_iWeightValue;</span><br><span class="line"><span class="keyword">bool</span> m_bSelected;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="Edge-cpp"><a href="#Edge-cpp" class="headerlink" title="Edge.cpp"></a>Edge.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Edge.h"</span></span></span><br><span class="line"></span><br><span class="line">Edge::Edge(<span class="keyword">int</span> nodeIndexA, <span class="keyword">int</span> nodeIndexB, <span class="keyword">int</span> weightValue)</span><br><span class="line">&#123;</span><br><span class="line">m_iNodeIndexA = nodeIndexA;</span><br><span class="line">m_iNodeIndexB = nodeIndexB;</span><br><span class="line">m_iWeightValue = weightValue;</span><br><span class="line">m_bSelected = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Node-h-1"><a href="#Node-h-1" class="headerlink" title="Node.h"></a>Node.h</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> NODE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NODE_H</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Node(<span class="keyword">char</span> data = <span class="number">0</span>);</span><br><span class="line"><span class="keyword">char</span> m_cData;</span><br><span class="line"><span class="keyword">bool</span> m_bIsVisited;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="Node-cpp-1"><a href="#Node-cpp-1" class="headerlink" title="Node.cpp"></a>Node.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Node.h"</span></span></span><br><span class="line"></span><br><span class="line">Node::Node(<span class="keyword">char</span> data)</span><br><span class="line">&#123;</span><br><span class="line">m_cData = data;</span><br><span class="line">m_bIsVisited = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CMap-h-1"><a href="#CMap-h-1" class="headerlink" title="CMap.h"></a>CMap.h</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"Node.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Edge.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CMap</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">CMap(<span class="keyword">int</span> capacity);</span><br><span class="line">~CMap();</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">addNode</span><span class="params">(Node *pNode)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resetNode</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">setValueToMatrixForDirectedGraph</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> col, <span class="keyword">int</span> val = <span class="number">1</span>)</span></span>;<span class="comment">//为有向图设置邻接矩阵</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">setValueToMatrixForUndirectedGraph</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> col, <span class="keyword">int</span> val = <span class="number">1</span>)</span></span>;<span class="comment">//为无向图设置邻接矩阵</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printMatrix</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">depthFirstTraverse</span><span class="params">(<span class="keyword">int</span> nodeIndex)</span></span>;<span class="comment">//深度优先遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">breadthFirstTraverse</span><span class="params">(<span class="keyword">int</span> nodeIndex)</span></span>;<span class="comment">//广义优先遍历</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">primTree</span><span class="params">(<span class="keyword">int</span> nodeIndex)</span></span>;<span class="comment">//普里姆生成树</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">getValueFromMatrix</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> col, <span class="keyword">int</span> &amp;val)</span></span>;<span class="comment">//从矩阵中获取权值</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">breadthFirstTraverseImpl</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; preVec)</span></span>;<span class="comment">//广度优先遍历实现函数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getMinEdge</span><span class="params">(<span class="built_in">vector</span>&lt;Edge&gt; edgeVec)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> m_iCapacity;<span class="comment">//最多可容纳的顶点数</span></span><br><span class="line"><span class="keyword">int</span> m_iNodeCount;<span class="comment">//已添加的顶点个数</span></span><br><span class="line">Node *m_pNodeArray;<span class="comment">//存放顶点数组</span></span><br><span class="line"><span class="keyword">int</span> *m_pMatrix;<span class="comment">//存放邻接矩阵</span></span><br><span class="line"></span><br><span class="line">Edge *m_pEdge;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="CMap-cpp-1"><a href="#CMap-cpp-1" class="headerlink" title="CMap.cpp"></a>CMap.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"CMap.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line">CMap::CMap(<span class="keyword">int</span> capacity)</span><br><span class="line">&#123;</span><br><span class="line">m_iCapacity = capacity;</span><br><span class="line">m_iNodeCount = <span class="number">0</span>;</span><br><span class="line">m_pNodeArray = <span class="keyword">new</span> Node[m_iCapacity];</span><br><span class="line">m_pMatrix = <span class="keyword">new</span> <span class="keyword">int</span>[m_iCapacity * m_iCapacity];</span><br><span class="line"><span class="built_in">memset</span>(m_pMatrix, <span class="number">0</span>, m_iCapacity*m_iCapacity * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"><span class="comment">// for (int i = 0; i &lt; m_iCapacity*m_iCapacity; ++i)</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">// m_pMatrix[i] = 0;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">m_pEdge = <span class="keyword">new</span> Edge[m_iCapacity - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CMap::~CMap()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span>[]m_pNodeArray;</span><br><span class="line"><span class="keyword">delete</span>[]m_pMatrix;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> CMap::addNode(Node *pNode)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (pNode == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">m_pNodeArray[m_iNodeCount].m_cData = pNode-&gt;m_cData;</span><br><span class="line">m_iNodeCount++;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CMap::resetNode()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m_iNodeCount; ++i)</span><br><span class="line">&#123;</span><br><span class="line">m_pNodeArray[i].m_bIsVisited = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> CMap::setValueToMatrixForDirectedGraph(<span class="keyword">int</span> row, <span class="keyword">int</span> col, <span class="keyword">int</span> val)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (row &lt; <span class="number">0</span> || row &gt;= m_iCapacity)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (col &lt; <span class="number">0</span> || col &gt;= m_iCapacity)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">m_pMatrix[row * m_iCapacity + col] = val;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> CMap::setValueToMatrixForUndirectedGraph(<span class="keyword">int</span> row, <span class="keyword">int</span> col, <span class="keyword">int</span> val)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (row &lt; <span class="number">0</span> || row &gt;= m_iCapacity)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (col &lt; <span class="number">0</span> || col &gt;= m_iCapacity)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">m_pMatrix[row * m_iCapacity + col] = val;</span><br><span class="line">m_pMatrix[col * m_iCapacity + row] = val;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CMap::printMatrix()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m_iCapacity; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m_iCapacity; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; m_pMatrix[i * m_iCapacity + j] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> CMap::getValueFromMatrix(<span class="keyword">int</span> row, <span class="keyword">int</span> col, <span class="keyword">int</span> &amp;val)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (row &lt; <span class="number">0</span> || row &gt;= m_iCapacity)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (col &lt; <span class="number">0</span> || col &gt;= m_iCapacity)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">val = m_pMatrix[row * m_iCapacity + col];</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CMap::depthFirstTraverse(<span class="keyword">int</span> nodeIndex)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> value = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; m_pNodeArray[nodeIndex].m_cData &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">m_pNodeArray[nodeIndex].m_bIsVisited = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过邻接矩阵判断是否与其他顶点相连</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m_iCapacity; ++i)</span><br><span class="line">&#123;</span><br><span class="line">getValueFromMatrix(nodeIndex, i, value);</span><br><span class="line"><span class="keyword">if</span> (value == <span class="number">1</span>)<span class="comment">//判断有弧连接其他顶点</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//再判断该点是否被访问过</span></span><br><span class="line"><span class="keyword">if</span> (m_pNodeArray[i].m_bIsVisited)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">depthFirstTraverse(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CMap::breadthFirstTraverse(<span class="keyword">int</span> nodeIndex)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; m_pNodeArray[nodeIndex].m_cData &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">m_pNodeArray[nodeIndex].m_bIsVisited = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; curVec;</span><br><span class="line">curVec.push_back(nodeIndex);</span><br><span class="line"></span><br><span class="line">breadthFirstTraverseImpl(curVec);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CMap::breadthFirstTraverseImpl(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; preVec)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> value = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; curVec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; (<span class="keyword">int</span>)i &lt; preVec.size(); ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m_iCapacity; ++j)</span><br><span class="line">&#123;</span><br><span class="line">getValueFromMatrix(preVec[i], j, value);</span><br><span class="line"><span class="keyword">if</span> (value != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (m_pNodeArray[j].m_bIsVisited)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; m_pNodeArray[j].m_cData &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">m_pNodeArray[j].m_bIsVisited = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">curVec.push_back(j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (curVec.size() == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">breadthFirstTraverseImpl(curVec);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CMap::primTree(<span class="keyword">int</span> nodeIndex)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> value = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> edgeCount = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nodeVec;</span><br><span class="line"><span class="built_in">vector</span>&lt;Edge&gt; edgeVec;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; m_pNodeArray[nodeIndex].m_cData &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">nodeVec.push_back(nodeIndex);</span><br><span class="line">m_pNodeArray[nodeIndex].m_bIsVisited = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (edgeCount &lt; m_iCapacity - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> temp = nodeVec.back();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m_iCapacity; ++i)</span><br><span class="line">&#123;</span><br><span class="line">getValueFromMatrix(temp, i, value);</span><br><span class="line"><span class="keyword">if</span> (value != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (m_pNodeArray[i].m_bIsVisited)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">Edge edge(temp, i, value);</span><br><span class="line">edgeVec.push_back(edge);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从可选边集合中找出最小的边</span></span><br><span class="line"><span class="keyword">int</span> edgeIndex = getMinEdge(edgeVec);</span><br><span class="line">edgeVec[edgeIndex].m_bSelected = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; edgeVec[edgeIndex].m_iNodeIndexA &lt;&lt; <span class="string">"---"</span> &lt;&lt; edgeVec[edgeIndex].m_iNodeIndexB &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; edgeVec[edgeIndex].m_iWeightValue &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">m_pEdge[edgeCount] = edgeVec[edgeIndex];</span><br><span class="line">edgeCount++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> nextNodeIndex = edgeVec[edgeIndex].m_iNodeIndexB;</span><br><span class="line"></span><br><span class="line">nodeVec.push_back(nextNodeIndex);</span><br><span class="line"></span><br><span class="line">m_pNodeArray[nextNodeIndex].m_bIsVisited = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; m_pNodeArray[nextNodeIndex].m_cData &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> CMap::getMinEdge(<span class="built_in">vector</span>&lt;Edge&gt; edgeVec)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> minWeight = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> edgeIndex = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (; i &lt; edgeVec.size(); ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!edgeVec[i].m_bSelected)</span><br><span class="line">&#123;</span><br><span class="line">minWeight = edgeVec[i].m_iWeightValue;</span><br><span class="line">edgeIndex = i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (minWeight == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (; i &lt; edgeVec.size(); ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (edgeVec[i].m_bSelected)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (minWeight &gt; edgeVec[i].m_iWeightValue)</span><br><span class="line">&#123;</span><br><span class="line">minWeight = edgeVec[i].m_iWeightValue;</span><br><span class="line">edgeIndex = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> edgeIndex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="demo-cpp-1"><a href="#demo-cpp-1" class="headerlink" title="demo.cpp"></a>demo.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"CMap.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">A</span></span><br><span class="line"><span class="comment">  /   \</span></span><br><span class="line"><span class="comment"> B     D</span></span><br><span class="line"><span class="comment">/ \   / \</span></span><br><span class="line"><span class="comment">   C - F G - H</span></span><br><span class="line"><span class="comment">\ /</span></span><br><span class="line"><span class="comment"> E</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*算法例子：</span></span><br><span class="line"><span class="comment">A</span></span><br><span class="line"><span class="comment">  / | \</span></span><br><span class="line"><span class="comment">B - F - E</span></span><br><span class="line"><span class="comment"> \ / \ /</span></span><br><span class="line"><span class="comment">  C - D</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  权值：</span></span><br><span class="line"><span class="comment">  A-B 6A-E 5 A-F 1</span></span><br><span class="line"><span class="comment">  B-C 3 B-F 2</span></span><br><span class="line"><span class="comment">  C-F 8 C-D 7</span></span><br><span class="line"><span class="comment">  D-F 4 D-E 2</span></span><br><span class="line"><span class="comment">  E-F 9</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CMap *pMap = <span class="keyword">new</span> CMap(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">Node *pNodeA = <span class="keyword">new</span> Node(<span class="string">'A'</span>);</span><br><span class="line">Node *pNodeB = <span class="keyword">new</span> Node(<span class="string">'B'</span>);</span><br><span class="line">Node *pNodeC = <span class="keyword">new</span> Node(<span class="string">'C'</span>);</span><br><span class="line">Node *pNodeD = <span class="keyword">new</span> Node(<span class="string">'D'</span>);</span><br><span class="line">Node *pNodeE = <span class="keyword">new</span> Node(<span class="string">'E'</span>);</span><br><span class="line">Node *pNodeF = <span class="keyword">new</span> Node(<span class="string">'F'</span>);</span><br><span class="line"></span><br><span class="line">pMap-&gt;addNode(pNodeA);</span><br><span class="line">pMap-&gt;addNode(pNodeB);</span><br><span class="line">pMap-&gt;addNode(pNodeC);</span><br><span class="line">pMap-&gt;addNode(pNodeD);</span><br><span class="line">pMap-&gt;addNode(pNodeE);</span><br><span class="line">pMap-&gt;addNode(pNodeF);</span><br><span class="line"></span><br><span class="line">pMap-&gt;setValueToMatrixForUndirectedGraph(<span class="number">0</span>, <span class="number">1</span>, <span class="number">6</span>);</span><br><span class="line">pMap-&gt;setValueToMatrixForUndirectedGraph(<span class="number">0</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">pMap-&gt;setValueToMatrixForUndirectedGraph(<span class="number">0</span>, <span class="number">5</span>, <span class="number">1</span>);</span><br><span class="line">pMap-&gt;setValueToMatrixForUndirectedGraph(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">pMap-&gt;setValueToMatrixForUndirectedGraph(<span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>);</span><br><span class="line">pMap-&gt;setValueToMatrixForUndirectedGraph(<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>);</span><br><span class="line">pMap-&gt;setValueToMatrixForUndirectedGraph(<span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>);</span><br><span class="line">pMap-&gt;setValueToMatrixForUndirectedGraph(<span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>);</span><br><span class="line">pMap-&gt;setValueToMatrixForUndirectedGraph(<span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>);</span><br><span class="line">pMap-&gt;setValueToMatrixForUndirectedGraph(<span class="number">4</span>, <span class="number">5</span>, <span class="number">9</span>);</span><br><span class="line"></span><br><span class="line">pMap-&gt;primTree(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">A</span><br><span class="line">0---5 1</span><br><span class="line">F</span><br><span class="line">5---1 2</span><br><span class="line">B</span><br><span class="line">1---2 3</span><br><span class="line">C</span><br><span class="line">5---3 4</span><br><span class="line">D</span><br><span class="line">3---4 2</span><br><span class="line">E</span><br></pre></td></tr></table></figure></p><h2 id="克鲁斯卡尔算法"><a href="#克鲁斯卡尔算法" class="headerlink" title="克鲁斯卡尔算法"></a>克鲁斯卡尔算法</h2><h3 id="Node-h-2"><a href="#Node-h-2" class="headerlink" title="Node.h"></a>Node.h</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> NODE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NODE_H</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Node(<span class="keyword">char</span> data = <span class="number">0</span>);</span><br><span class="line"><span class="keyword">char</span> m_cData;</span><br><span class="line"><span class="keyword">bool</span> m_bIsVisited;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="Node-cpp-2"><a href="#Node-cpp-2" class="headerlink" title="Node.cpp"></a>Node.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Node.h"</span></span></span><br><span class="line"></span><br><span class="line">Node::Node(<span class="keyword">char</span> data)</span><br><span class="line">&#123;</span><br><span class="line">m_cData = data;</span><br><span class="line">m_bIsVisited = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Edge-h-1"><a href="#Edge-h-1" class="headerlink" title="Edge.h"></a>Edge.h</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> EDGE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EDGE_H</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Edge(<span class="keyword">int</span> nodeIndexA = <span class="number">0</span>, <span class="keyword">int</span> nodeIndexB = <span class="number">0</span>, <span class="keyword">int</span> weightValue = <span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> m_iNodeIndexA;</span><br><span class="line"><span class="keyword">int</span> m_iNodeIndexB;</span><br><span class="line"><span class="keyword">int</span> m_iWeightValue;</span><br><span class="line"><span class="keyword">bool</span> m_bSelected;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="Edge-cpp-1"><a href="#Edge-cpp-1" class="headerlink" title="Edge.cpp"></a>Edge.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Edge.h"</span></span></span><br><span class="line"></span><br><span class="line">Edge::Edge(<span class="keyword">int</span> nodeIndexA, <span class="keyword">int</span> nodeIndexB, <span class="keyword">int</span> weightValue)</span><br><span class="line">&#123;</span><br><span class="line">m_iNodeIndexA = nodeIndexA;</span><br><span class="line">m_iNodeIndexB = nodeIndexB;</span><br><span class="line">m_iWeightValue = weightValue;</span><br><span class="line">m_bSelected = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CMap-h-2"><a href="#CMap-h-2" class="headerlink" title="CMap.h"></a>CMap.h</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"Node.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Edge.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CMap</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">CMap(<span class="keyword">int</span> capacity);</span><br><span class="line">~CMap();</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">addNode</span><span class="params">(Node *pNode)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resetNode</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">setValueToMatrixForDirectedGraph</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> col, <span class="keyword">int</span> val = <span class="number">1</span>)</span></span>;<span class="comment">//为有向图设置邻接矩阵</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">setValueToMatrixForUndirectedGraph</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> col, <span class="keyword">int</span> val = <span class="number">1</span>)</span></span>;<span class="comment">//为无向图设置邻接矩阵</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printMatrix</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">depthFirstTraverse</span><span class="params">(<span class="keyword">int</span> nodeIndex)</span></span>;<span class="comment">//深度优先遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">breadthFirstTraverse</span><span class="params">(<span class="keyword">int</span> nodeIndex)</span></span>;<span class="comment">//广义优先遍历</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">primTree</span><span class="params">(<span class="keyword">int</span> nodeIndex)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">kruskalTree</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">getValueFromMatrix</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> col, <span class="keyword">int</span> &amp;val)</span></span>;<span class="comment">//从矩阵中获取权值</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">breadthFirstTraverseImpl</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; preVec)</span></span>;<span class="comment">//广度优先遍历实现函数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getMinEdge</span><span class="params">(<span class="built_in">vector</span>&lt;Edge&gt; edgeVec)</span></span>;<span class="comment">//获取最小边</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isInSet</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nodeSet, <span class="keyword">int</span> target)</span></span>;<span class="comment">//判断顶点是否在点集合中</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergeNodeSet</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nodeSetA, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nodeSetB)</span></span>;<span class="comment">//合并两个顶点集合</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> m_iCapacity;<span class="comment">//最多可容纳的顶点数</span></span><br><span class="line"><span class="keyword">int</span> m_iNodeCount;<span class="comment">//已添加的顶点个数</span></span><br><span class="line">Node *m_pNodeArray;<span class="comment">//存放顶点数组</span></span><br><span class="line"><span class="keyword">int</span> *m_pMatrix;<span class="comment">//存放邻接矩阵</span></span><br><span class="line"></span><br><span class="line">Edge *m_pEdge;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="CMap-cpp-2"><a href="#CMap-cpp-2" class="headerlink" title="CMap.cpp"></a>CMap.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"CMap.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line">CMap::CMap(<span class="keyword">int</span> capacity)</span><br><span class="line">&#123;</span><br><span class="line">m_iCapacity = capacity;</span><br><span class="line">m_iNodeCount = <span class="number">0</span>;</span><br><span class="line">m_pNodeArray = <span class="keyword">new</span> Node[m_iCapacity];</span><br><span class="line">m_pMatrix = <span class="keyword">new</span> <span class="keyword">int</span>[m_iCapacity * m_iCapacity];</span><br><span class="line"><span class="built_in">memset</span>(m_pMatrix, <span class="number">0</span>, m_iCapacity*m_iCapacity * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"><span class="comment">// for (int i = 0; i &lt; m_iCapacity*m_iCapacity; ++i)</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">// m_pMatrix[i] = 0;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">m_pEdge = <span class="keyword">new</span> Edge[m_iCapacity - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CMap::~CMap()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span>[]m_pNodeArray;</span><br><span class="line"><span class="keyword">delete</span>[]m_pMatrix;</span><br><span class="line"><span class="keyword">delete</span>[]m_pEdge;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> CMap::addNode(Node *pNode)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (pNode == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">m_pNodeArray[m_iNodeCount].m_cData = pNode-&gt;m_cData;</span><br><span class="line">m_iNodeCount++;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CMap::resetNode()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m_iNodeCount; ++i)</span><br><span class="line">&#123;</span><br><span class="line">m_pNodeArray[i].m_bIsVisited = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> CMap::setValueToMatrixForDirectedGraph(<span class="keyword">int</span> row, <span class="keyword">int</span> col, <span class="keyword">int</span> val)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (row &lt; <span class="number">0</span> || row &gt;= m_iCapacity)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (col &lt; <span class="number">0</span> || col &gt;= m_iCapacity)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">m_pMatrix[row * m_iCapacity + col] = val;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> CMap::setValueToMatrixForUndirectedGraph(<span class="keyword">int</span> row, <span class="keyword">int</span> col, <span class="keyword">int</span> val)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (row &lt; <span class="number">0</span> || row &gt;= m_iCapacity)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (col &lt; <span class="number">0</span> || col &gt;= m_iCapacity)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">m_pMatrix[row * m_iCapacity + col] = val;</span><br><span class="line">m_pMatrix[col * m_iCapacity + row] = val;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CMap::printMatrix()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m_iCapacity; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m_iCapacity; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; m_pMatrix[i * m_iCapacity + j] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> CMap::getValueFromMatrix(<span class="keyword">int</span> row, <span class="keyword">int</span> col, <span class="keyword">int</span> &amp;val)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (row &lt; <span class="number">0</span> || row &gt;= m_iCapacity)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (col &lt; <span class="number">0</span> || col &gt;= m_iCapacity)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">val = m_pMatrix[row * m_iCapacity + col];</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CMap::depthFirstTraverse(<span class="keyword">int</span> nodeIndex)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> value = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; m_pNodeArray[nodeIndex].m_cData &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">m_pNodeArray[nodeIndex].m_bIsVisited = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过邻接矩阵判断是否与其他顶点相连</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m_iCapacity; ++i)</span><br><span class="line">&#123;</span><br><span class="line">getValueFromMatrix(nodeIndex, i, value);</span><br><span class="line"><span class="keyword">if</span> (value == <span class="number">1</span>)<span class="comment">//判断有弧连接其他顶点</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//再判断该点是否被访问过</span></span><br><span class="line"><span class="keyword">if</span> (m_pNodeArray[i].m_bIsVisited)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">depthFirstTraverse(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CMap::breadthFirstTraverse(<span class="keyword">int</span> nodeIndex)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; m_pNodeArray[nodeIndex].m_cData &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">m_pNodeArray[nodeIndex].m_bIsVisited = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; curVec;</span><br><span class="line">curVec.push_back(nodeIndex);</span><br><span class="line"></span><br><span class="line">breadthFirstTraverseImpl(curVec);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CMap::breadthFirstTraverseImpl(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; preVec)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> value = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; curVec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; (<span class="keyword">int</span>)i &lt; preVec.size(); ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m_iCapacity; ++j)</span><br><span class="line">&#123;</span><br><span class="line">getValueFromMatrix(preVec[i], j, value);</span><br><span class="line"><span class="keyword">if</span> (value != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (m_pNodeArray[j].m_bIsVisited)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; m_pNodeArray[j].m_cData &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">m_pNodeArray[j].m_bIsVisited = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">curVec.push_back(j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (curVec.size() == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">breadthFirstTraverseImpl(curVec);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CMap::primTree(<span class="keyword">int</span> nodeIndex)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> value = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> edgeCount = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nodeVec;</span><br><span class="line"><span class="built_in">vector</span>&lt;Edge&gt; edgeVec;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; m_pNodeArray[nodeIndex].m_cData &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">nodeVec.push_back(nodeIndex);</span><br><span class="line">m_pNodeArray[nodeIndex].m_bIsVisited = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (edgeCount &lt; m_iCapacity - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> temp = nodeVec.back();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m_iCapacity; ++i)</span><br><span class="line">&#123;</span><br><span class="line">getValueFromMatrix(temp, i, value);</span><br><span class="line"><span class="keyword">if</span> (value != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (m_pNodeArray[i].m_bIsVisited)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">Edge edge(temp, i, value);</span><br><span class="line">edgeVec.push_back(edge);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从可选边集合中找出最小的边</span></span><br><span class="line"><span class="keyword">int</span> edgeIndex = getMinEdge(edgeVec);</span><br><span class="line">edgeVec[edgeIndex].m_bSelected = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; edgeVec[edgeIndex].m_iNodeIndexA &lt;&lt; <span class="string">"---"</span> &lt;&lt; edgeVec[edgeIndex].m_iNodeIndexB &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; edgeVec[edgeIndex].m_iWeightValue &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">m_pEdge[edgeCount] = edgeVec[edgeIndex];</span><br><span class="line">edgeCount++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> nextNodeIndex = edgeVec[edgeIndex].m_iNodeIndexB;</span><br><span class="line"></span><br><span class="line">nodeVec.push_back(nextNodeIndex);</span><br><span class="line"></span><br><span class="line">m_pNodeArray[nextNodeIndex].m_bIsVisited = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; m_pNodeArray[nextNodeIndex].m_cData &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> CMap::getMinEdge(<span class="built_in">vector</span>&lt;Edge&gt; edgeVec)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> minWeight = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> edgeIndex = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (; i &lt; edgeVec.size(); ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!edgeVec[i].m_bSelected)</span><br><span class="line">&#123;</span><br><span class="line">minWeight = edgeVec[i].m_iWeightValue;</span><br><span class="line">edgeIndex = i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (minWeight == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (; i &lt; edgeVec.size(); ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (edgeVec[i].m_bSelected)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (minWeight &gt; edgeVec[i].m_iWeightValue)</span><br><span class="line">&#123;</span><br><span class="line">minWeight = edgeVec[i].m_iWeightValue;</span><br><span class="line">edgeIndex = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> edgeIndex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CMap::kruskalTree()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> value = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> edgeCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义存放结点集合的数组</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; nodeSets;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//第一步：取出所有边</span></span><br><span class="line"><span class="built_in">vector</span>&lt;Edge&gt; edgeVec;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m_iCapacity; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; m_iCapacity; ++j)</span><br><span class="line">&#123;</span><br><span class="line">getValueFromMatrix(i, j, value);</span><br><span class="line"><span class="keyword">if</span> (value != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">Edge <span class="title">edge</span><span class="params">(i, j, value)</span></span>;</span><br><span class="line">edgeVec.push_back(edge);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1.找到算法结束条件</span></span><br><span class="line"><span class="keyword">while</span> (edgeCount &lt; m_iCapacity - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//2.从边集合中找到最小边</span></span><br><span class="line"><span class="keyword">int</span> minEdgeIndex = getMinEdge(edgeVec);</span><br><span class="line">edgeVec[minEdgeIndex].m_bSelected = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">//3.找出最小边连接的点</span></span><br><span class="line"><span class="keyword">int</span> nodeAIndex = edgeVec[minEdgeIndex].m_iNodeIndexA;</span><br><span class="line"><span class="keyword">int</span> nodeBIndex = edgeVec[minEdgeIndex].m_iNodeIndexB;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> nodeAIsInSet = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">bool</span> nodeBIsInSet = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> nodeAInSetLabel = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> nodeBInSetLabel = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.找出点所在的点集合</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nodeSets.size(); ++i)</span><br><span class="line">&#123;</span><br><span class="line">nodeAIsInSet = isInSet(nodeSets[i], nodeAIndex);</span><br><span class="line"><span class="keyword">if</span> (nodeAIsInSet)</span><br><span class="line">&#123;</span><br><span class="line">nodeAIsInSet = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nodeSets.size(); ++i)</span><br><span class="line">&#123;</span><br><span class="line">nodeBIsInSet = isInSet(nodeSets[i], nodeBIndex);</span><br><span class="line"><span class="keyword">if</span> (nodeBIsInSet)</span><br><span class="line">&#123;</span><br><span class="line">nodeBIsInSet = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//5.根据点所在集合的不同做出不同处理</span></span><br><span class="line"><span class="keyword">if</span> (nodeAInSetLabel == <span class="number">-1</span> &amp;&amp; nodeBInSetLabel == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line">vec.push_back(nodeAIndex);</span><br><span class="line">vec.push_back(nodeBIndex);</span><br><span class="line">nodeSets.push_back(vec);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (nodeAInSetLabel == <span class="number">-1</span> &amp;&amp; nodeBInSetLabel != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">nodeSets[nodeBInSetLabel].push_back(nodeAIndex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (nodeAInSetLabel != <span class="number">-1</span> &amp;&amp; nodeBInSetLabel == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">nodeSets[nodeBInSetLabel].push_back(nodeBIndex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (nodeAInSetLabel != <span class="number">-1</span> &amp;&amp; nodeBInSetLabel != <span class="number">-1</span> &amp;&amp; nodeAInSetLabel != nodeBInSetLabel)</span><br><span class="line">&#123;</span><br><span class="line">mergeNodeSet(nodeSets[nodeAInSetLabel], nodeSets[nodeBInSetLabel]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="keyword">int</span>)nodeSets.size() - <span class="number">1</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">nodeSets[i] = nodeSets[i + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (nodeAInSetLabel != <span class="number">-1</span> &amp;&amp; nodeBInSetLabel != <span class="number">-1</span> &amp;&amp; nodeAInSetLabel == nodeBInSetLabel)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">m_pEdge[edgeCount] = edgeVec[minEdgeIndex];</span><br><span class="line">edgeCount++;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; edgeVec[minEdgeIndex].m_iNodeIndexA &lt;&lt; <span class="string">"---"</span> &lt;&lt; edgeVec[minEdgeIndex].m_iNodeIndexB &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; edgeVec[minEdgeIndex].m_iWeightValue &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> CMap::isInSet(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nodeSet, <span class="keyword">int</span> target)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nodeSet.size(); ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (nodeSet[i] == target)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CMap::mergeNodeSet(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nodeSetA, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nodeSetB)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nodeSetB.size(); ++i)</span><br><span class="line">&#123;</span><br><span class="line">nodeSetA.push_back(nodeSetB[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="demo-cpp-2"><a href="#demo-cpp-2" class="headerlink" title="demo.cpp"></a>demo.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"CMap.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">A</span></span><br><span class="line"><span class="comment">  /   \</span></span><br><span class="line"><span class="comment"> B     D</span></span><br><span class="line"><span class="comment">/ \   / \</span></span><br><span class="line"><span class="comment">   C - F G - H</span></span><br><span class="line"><span class="comment">\ /</span></span><br><span class="line"><span class="comment"> E</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*算法例子：</span></span><br><span class="line"><span class="comment">A</span></span><br><span class="line"><span class="comment">  / | \</span></span><br><span class="line"><span class="comment">B - F - E</span></span><br><span class="line"><span class="comment"> \ / \ /</span></span><br><span class="line"><span class="comment">  C - D</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  权值：</span></span><br><span class="line"><span class="comment">  A-B 6A-E 5 A-F 1</span></span><br><span class="line"><span class="comment">  B-C 3 B-F 2</span></span><br><span class="line"><span class="comment">  C-F 8 C-D 7</span></span><br><span class="line"><span class="comment">  D-F 4 D-E 2</span></span><br><span class="line"><span class="comment">  E-F 9</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CMap *pMap = <span class="keyword">new</span> CMap(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">Node *pNodeA = <span class="keyword">new</span> Node(<span class="string">'A'</span>);</span><br><span class="line">Node *pNodeB = <span class="keyword">new</span> Node(<span class="string">'B'</span>);</span><br><span class="line">Node *pNodeC = <span class="keyword">new</span> Node(<span class="string">'C'</span>);</span><br><span class="line">Node *pNodeD = <span class="keyword">new</span> Node(<span class="string">'D'</span>);</span><br><span class="line">Node *pNodeE = <span class="keyword">new</span> Node(<span class="string">'E'</span>);</span><br><span class="line">Node *pNodeF = <span class="keyword">new</span> Node(<span class="string">'F'</span>);</span><br><span class="line"></span><br><span class="line">pMap-&gt;addNode(pNodeA);</span><br><span class="line">pMap-&gt;addNode(pNodeB);</span><br><span class="line">pMap-&gt;addNode(pNodeC);</span><br><span class="line">pMap-&gt;addNode(pNodeD);</span><br><span class="line">pMap-&gt;addNode(pNodeE);</span><br><span class="line">pMap-&gt;addNode(pNodeF);</span><br><span class="line"></span><br><span class="line">pMap-&gt;setValueToMatrixForUndirectedGraph(<span class="number">0</span>, <span class="number">1</span>, <span class="number">6</span>);</span><br><span class="line">pMap-&gt;setValueToMatrixForUndirectedGraph(<span class="number">0</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">pMap-&gt;setValueToMatrixForUndirectedGraph(<span class="number">0</span>, <span class="number">5</span>, <span class="number">1</span>);</span><br><span class="line">pMap-&gt;setValueToMatrixForUndirectedGraph(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">pMap-&gt;setValueToMatrixForUndirectedGraph(<span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>);</span><br><span class="line">pMap-&gt;setValueToMatrixForUndirectedGraph(<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>);</span><br><span class="line">pMap-&gt;setValueToMatrixForUndirectedGraph(<span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>);</span><br><span class="line">pMap-&gt;setValueToMatrixForUndirectedGraph(<span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>);</span><br><span class="line">pMap-&gt;setValueToMatrixForUndirectedGraph(<span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>);</span><br><span class="line">pMap-&gt;setValueToMatrixForUndirectedGraph(<span class="number">4</span>, <span class="number">5</span>, <span class="number">9</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// pMap-&gt;primTree(0);</span></span><br><span class="line">pMap-&gt;kruskalTree();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0---5 1</span><br><span class="line">1---5 2</span><br><span class="line">3---4 2</span><br><span class="line">1---2 3</span><br><span class="line">3---5 4</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;left&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1550075379443&amp;di=51f53328008b4821ce8f839ac9186c0c&amp;imgtype=0&amp;src=http%3A%2F%2Fhiphotos.baidu.com%2Fdoc%2Fpic%2Fitem%2Fb17eca8065380cd7e40f7c6ba844ad3459828127.jpg&quot; width=&quot;300&quot; height=&quot;180&quot; style=&quot;float:right;&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;　　&lt;strong&gt;图、 prim 和 kruskal&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt; &lt;/div&gt;
    
    </summary>
    
      <category term="编程语言" scheme="https://hubojing.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="CPP" scheme="https://hubojing.github.io/tags/CPP/"/>
    
      <category term="数据结构" scheme="https://hubojing.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>线性表</title>
    <link href="https://hubojing.github.io/2019/06/12/%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    <id>https://hubojing.github.io/2019/06/12/线性表/</id>
    <published>2019-06-12T04:17:40.000Z</published>
    <updated>2019-06-19T09:20:59.000Z</updated>
    
    <content type="html"><![CDATA[<div align="left"><br><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1550075379443&di=51f53328008b4821ce8f839ac9186c0c&imgtype=0&src=http%3A%2F%2Fhiphotos.baidu.com%2Fdoc%2Fpic%2Fitem%2Fb17eca8065380cd7e40f7c6ba844ad3459828127.jpg" width="300" height="180" style="float:right;"><br><br><br>　　<strong>线性表（顺序表和链式表）。</strong><br>　　<strong>补之前的系列</strong><br><br><br> </div><a id="more"></a><h1 id="数据结构系列"><a href="#数据结构系列" class="headerlink" title="数据结构系列"></a>数据结构系列</h1><p>栈 <a href="https://hubojing.github.io/2017/11/14/%E6%A0%88/">https://hubojing.github.io/2017/11/14/%E6%A0%88/</a><br>队列 <a href="https://hubojing.github.io/2017/11/12/%E9%98%9F%E5%88%97/">https://hubojing.github.io/2017/11/12/%E9%98%9F%E5%88%97/</a><br>树 <a href="https://hubojing.github.io/2017/07/23/%E6%A0%91/">https://hubojing.github.io/2017/07/23/%E6%A0%91/</a></p><h1 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h1><h2 id="List-h"><a href="#List-h" class="headerlink" title="List.h"></a>List.h</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> LIST_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LIST_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Coordinate.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">List</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">List(<span class="keyword">int</span> size);</span><br><span class="line">~List();</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ClearList</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListEmpty</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ListLength</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">GetElem</span><span class="params">(<span class="keyword">int</span> i, Coordinate *e)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LocateElem</span><span class="params">(Coordinate *e)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">PriorElem</span><span class="params">(Coordinate *currentElem, Coordinate *preElem)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">NextElem</span><span class="params">(Coordinate *currentElem, Coordinate *nextElem)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListTraverse</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListInsert</span><span class="params">(<span class="keyword">int</span> i, Coordinate *e)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListDelete</span><span class="params">(<span class="keyword">int</span> i, Coordinate *e)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Coordinate *m_pList;</span><br><span class="line"><span class="keyword">int</span> m_iSize;</span><br><span class="line"><span class="keyword">int</span> m_iLength;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="List-cpp"><a href="#List-cpp" class="headerlink" title="List.cpp"></a>List.cpp</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//线性表--顺序表</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"List.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line">List::List(<span class="keyword">int</span> size)</span><br><span class="line">&#123;</span><br><span class="line">m_iSize = size;</span><br><span class="line">m_pList = <span class="keyword">new</span> Coordinate[m_iSize];</span><br><span class="line">m_iLength = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">List::~List()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span>[]m_pList;</span><br><span class="line">m_pList = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> List::ClearList()</span><br><span class="line">&#123;</span><br><span class="line">m_iLength = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> List::ListEmpty()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (m_iLength == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> List::ListLength()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> m_iLength;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> List::GetElem(<span class="keyword">int</span> i, Coordinate *e)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= m_iSize)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">*e = m_pList[i];</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> List::LocateElem(Coordinate *e)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m_iLength; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (m_pList[i] == *e)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> List::PriorElem(Coordinate *currentElem, Coordinate *preElem)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> temp = LocateElem(currentElem);</span><br><span class="line"><span class="keyword">if</span> (temp == <span class="number">-1</span> || temp == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">*preElem = m_pList[temp - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> List::NextElem(Coordinate *currentElem, Coordinate *nextElem)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> temp = LocateElem(currentElem);</span><br><span class="line"><span class="keyword">if</span> (temp == <span class="number">-1</span> || temp == m_iLength - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">*nextElem = m_pList[temp + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> List::ListTraverse()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m_iLength; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; m_pList[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">// m_pList[i].printCoordinate();</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> List::ListInsert(<span class="keyword">int</span> i, Coordinate *e)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i&lt;<span class="number">0</span> || i&gt;m_iLength)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = m_iLength - <span class="number">1</span>; k &gt;= i; --k)</span><br><span class="line">&#123;</span><br><span class="line">m_pList[k + <span class="number">1</span>] = m_pList[k];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">m_pList[i] = *e;</span><br><span class="line"></span><br><span class="line">m_iLength++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> List::ListDelete(<span class="keyword">int</span> i, Coordinate *e)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= m_iLength)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">*e = m_pList[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = i + <span class="number">1</span>; k &lt; m_iLength; ++k)</span><br><span class="line">&#123;</span><br><span class="line">m_pList[k - <span class="number">1</span>] = m_pList[k];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">m_iLength--;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Coordinate-h"><a href="#Coordinate-h" class="headerlink" title="Coordinate.h"></a>Coordinate.h</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> COORDINATE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> COORDINATE_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Coordinate</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">friend</span> ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;out, Coordinate &amp;coor);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Coordinate(<span class="keyword">int</span> x = <span class="number">0</span>, <span class="keyword">int</span> y = <span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printCoordinate</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>==(Coordinate &amp;coor);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> m_iX;</span><br><span class="line"><span class="keyword">int</span> m_iY;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="Coordinate-cpp"><a href="#Coordinate-cpp" class="headerlink" title="Coordinate.cpp"></a>Coordinate.cpp</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Coordinate.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line">Coordinate::Coordinate(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span><br><span class="line">&#123;</span><br><span class="line">m_iX = x;</span><br><span class="line">m_iY = y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Coordinate::printCoordinate()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"("</span> &lt;&lt; m_iX &lt;&lt; <span class="string">","</span> &lt;&lt; m_iY &lt;&lt; <span class="string">")"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;out, Coordinate &amp;coor)</span><br><span class="line">&#123;</span><br><span class="line">out &lt;&lt; <span class="string">"("</span> &lt;&lt; coor.m_iX &lt;&lt; <span class="string">","</span> &lt;&lt; coor.m_iY &lt;&lt; <span class="string">")"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> Coordinate::<span class="keyword">operator</span>==(Coordinate &amp;coor)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_iX == coor.m_iX &amp;&amp; <span class="keyword">this</span>-&gt;m_iY == coor.m_iY)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="demo-cpp"><a href="#demo-cpp" class="headerlink" title="demo.cpp"></a>demo.cpp</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"List.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Coordinate <span class="title">e1</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line"><span class="function">Coordinate <span class="title">e2</span><span class="params">(<span class="number">3</span>, <span class="number">4</span>)</span></span>;</span><br><span class="line"><span class="function">Coordinate <span class="title">e3</span><span class="params">(<span class="number">5</span>, <span class="number">6</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">List *<span class="built_in">list</span> = <span class="keyword">new</span> List(<span class="number">10</span>);</span><br><span class="line"><span class="built_in">list</span>-&gt;ListInsert(<span class="number">0</span>, &amp;e1);</span><br><span class="line"><span class="built_in">list</span>-&gt;ListInsert(<span class="number">1</span>, &amp;e2);</span><br><span class="line"><span class="built_in">list</span>-&gt;ListInsert(<span class="number">2</span>, &amp;e3);</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>-&gt;ListTraverse();</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"长度：%d\n"</span>, <span class="built_in">list</span>-&gt;ListLength());</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(1,2)</span><br><span class="line"></span><br><span class="line">(3,4)</span><br><span class="line"></span><br><span class="line">(5,6)</span><br><span class="line"></span><br><span class="line">长度：3</span><br></pre></td></tr></table></figure></p><h1 id="链式表"><a href="#链式表" class="headerlink" title="链式表"></a>链式表</h1><h2 id="Node-h"><a href="#Node-h" class="headerlink" title="Node.h"></a>Node.h</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> NODE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NODE_H</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> data;</span><br><span class="line">Node *next;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printNode</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="Node-cpp"><a href="#Node-cpp" class="headerlink" title="Node.cpp"></a>Node.cpp</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Node.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Node::printNode()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; data &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="List-h-1"><a href="#List-h-1" class="headerlink" title="List.h"></a>List.h</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> LIST_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LIST_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"Node.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">List</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">List();</span><br><span class="line">~List();</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ClearList</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListEmpty</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ListLength</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">GetElem</span><span class="params">(<span class="keyword">int</span> i, Node *pNode)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LocateElem</span><span class="params">(Node *pNode)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">PriorElem</span><span class="params">(Node *pCurrentNode, Node *pPreNode)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">NextElem</span><span class="params">(Node *pCurrentNode, Node *pNextNode)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListTraverse</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListInsert</span><span class="params">(<span class="keyword">int</span> i, Node *pNode)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListDelete</span><span class="params">(<span class="keyword">int</span> i, Node *pNode)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListInsertHead</span><span class="params">(Node *pNode)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListInsertTail</span><span class="params">(Node *pNode)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Node *m_pList;</span><br><span class="line"><span class="keyword">int</span> m_iLength;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="List-cpp-1"><a href="#List-cpp-1" class="headerlink" title="List.cpp"></a>List.cpp</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//线性表--顺序表</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"List.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line">List::List()</span><br><span class="line">&#123;</span><br><span class="line">m_pList = <span class="keyword">new</span> Node;</span><br><span class="line">m_pList-&gt;data = <span class="number">0</span>;</span><br><span class="line">m_pList-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">m_iLength = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">List::~List()</span><br><span class="line">&#123;</span><br><span class="line">ClearList();</span><br><span class="line"><span class="keyword">delete</span> m_pList;</span><br><span class="line">m_pList = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> List::ListInsertHead(Node *pNode)</span><br><span class="line">&#123;</span><br><span class="line">Node *newNode = <span class="keyword">new</span> Node;</span><br><span class="line"><span class="keyword">if</span> (newNode == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">newNode-&gt;data = pNode-&gt;data;</span><br><span class="line">newNode-&gt;next = m_pList-&gt;next;</span><br><span class="line">m_pList-&gt;next = newNode;</span><br><span class="line">m_iLength++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> List::ListInsertTail(Node *pNode)</span><br><span class="line">&#123;</span><br><span class="line">Node *currentNode = m_pList;</span><br><span class="line"><span class="keyword">while</span> (currentNode-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">currentNode = currentNode-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">Node *newNode = <span class="keyword">new</span> Node;</span><br><span class="line"><span class="keyword">if</span> (newNode == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">newNode-&gt;data = pNode-&gt;data;</span><br><span class="line">newNode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">currentNode-&gt;next = newNode;</span><br><span class="line">m_iLength++;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> List::ListInsert(<span class="keyword">int</span> i, Node* pNode)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i&lt;<span class="number">0</span> || i&gt;m_iLength)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">Node *currentNode = m_pList;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; i; ++k)</span><br><span class="line">&#123;</span><br><span class="line">currentNode = currentNode-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">Node *newNode = <span class="keyword">new</span> Node;</span><br><span class="line"><span class="keyword">if</span> (newNode == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">newNode-&gt;data = pNode-&gt;data;</span><br><span class="line">newNode-&gt;next = currentNode-&gt;next;</span><br><span class="line">currentNode-&gt;next = newNode;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> List::ListDelete(<span class="keyword">int</span> i, Node *pNode)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= m_iLength)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">Node *currentNode = m_pList;</span><br><span class="line">Node *currentNodeBefore = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= i; ++k)</span><br><span class="line">&#123;</span><br><span class="line">currentNodeBefore = currentNode;</span><br><span class="line">currentNode = currentNode-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">currentNodeBefore-&gt;next = currentNode-&gt;next;</span><br><span class="line">pNode-&gt;data = currentNode-&gt;data;</span><br><span class="line"><span class="keyword">delete</span> currentNode;</span><br><span class="line">currentNode = <span class="literal">NULL</span>;</span><br><span class="line">m_iLength--;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> List::ClearList()</span><br><span class="line">&#123;</span><br><span class="line">Node *currentNode = m_pList-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (currentNode != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">Node *temp = currentNode-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> currentNode;</span><br><span class="line">currentNode = temp;</span><br><span class="line">&#125;</span><br><span class="line">m_pList-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">m_iLength = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> List::ListEmpty()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (m_iLength == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> List::ListLength()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> m_iLength;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> List::GetElem(<span class="keyword">int</span> i, Node *pNode)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= m_iLength)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">Node *currentNode = m_pList;</span><br><span class="line">Node *currentNodeBefore = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= i; ++k)</span><br><span class="line">&#123;</span><br><span class="line">currentNodeBefore = currentNode;</span><br><span class="line">currentNode = currentNode-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pNode-&gt;data = currentNode-&gt;data;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> List::LocateElem(Node *pNode)</span><br><span class="line">&#123;</span><br><span class="line">Node *currentNode = m_pList;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (currentNode-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">currentNode = currentNode-&gt;next;</span><br><span class="line"><span class="keyword">if</span> (currentNode-&gt;data == pNode-&gt;data)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> List::PriorElem(Node *pCurrentNode, Node *pPreNode)</span><br><span class="line">&#123;</span><br><span class="line">Node *currentNode = m_pList;</span><br><span class="line">Node *tempNode = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">while</span> (currentNode-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">tempNode = currentNode;</span><br><span class="line">currentNode = currentNode-&gt;next;</span><br><span class="line"><span class="keyword">if</span> (currentNode-&gt;data == pCurrentNode-&gt;data)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (tempNode == m_pList)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">pPreNode-&gt;data = tempNode-&gt;data;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> List::NextElem(Node *pCurrentNode, Node *pNextNode)</span><br><span class="line">&#123;</span><br><span class="line">Node *currentNode = m_pList;</span><br><span class="line"><span class="keyword">while</span> (currentNode-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">currentNode = currentNode-&gt;next;</span><br><span class="line"><span class="keyword">if</span> (currentNode-&gt;data == pCurrentNode-&gt;data)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (currentNode-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pNextNode-&gt;data = currentNode-&gt;next-&gt;data;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> List::ListTraverse()</span><br><span class="line">&#123;</span><br><span class="line">Node *currentNode = m_pList;</span><br><span class="line"><span class="keyword">while</span> (currentNode-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">currentNode = currentNode-&gt;next;</span><br><span class="line">currentNode-&gt;printNode();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="demo-cpp-1"><a href="#demo-cpp-1" class="headerlink" title="demo.cpp"></a>demo.cpp</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"List.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">List *pList = <span class="keyword">new</span> List();</span><br><span class="line">Node node1;</span><br><span class="line">node1.data = <span class="number">1</span>;</span><br><span class="line">Node node2;</span><br><span class="line">node2.data = <span class="number">2</span>;</span><br><span class="line">Node node3;</span><br><span class="line">node3.data = <span class="number">3</span>;</span><br><span class="line">Node node4;</span><br><span class="line">node4.data = <span class="number">4</span>;</span><br><span class="line">Node node5;</span><br><span class="line">node5.data = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// pList-&gt;ListInsertHead(&amp;node1);</span></span><br><span class="line"><span class="comment">// pList-&gt;ListInsertHead(&amp;node2);</span></span><br><span class="line"><span class="comment">// pList-&gt;ListInsertHead(&amp;node3);</span></span><br><span class="line"><span class="comment">// pList-&gt;ListInsertHead(&amp;node4);</span></span><br><span class="line"></span><br><span class="line">pList-&gt;ListInsertTail(&amp;node1);</span><br><span class="line">pList-&gt;ListInsertTail(&amp;node2);</span><br><span class="line">pList-&gt;ListInsertTail(&amp;node3);</span><br><span class="line">pList-&gt;ListInsertTail(&amp;node4);</span><br><span class="line"></span><br><span class="line">pList-&gt;ListInsert(<span class="number">1</span>, &amp;node5);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Node temp;</span></span><br><span class="line"><span class="comment">// pList-&gt;ListDelete(1, &amp;temp);</span></span><br><span class="line"><span class="comment">// cout &lt;&lt; "temp = " &lt;&lt; temp.data &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line">pList-&gt;ListTraverse();</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> pList;</span><br><span class="line">pList = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="链表应用之通讯录"><a href="#链表应用之通讯录" class="headerlink" title="链表应用之通讯录"></a>链表应用之通讯录</h1><h2 id="Person-h"><a href="#Person-h" class="headerlink" title="Person.h"></a>Person.h</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> PERSON_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PERSON_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">friend</span> ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;out, Person &amp;person);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="built_in">string</span> phone;</span><br><span class="line">Person &amp;<span class="keyword">operator</span>=(Person &amp;person);</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>==(Person &amp;person);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="Person-cpp"><a href="#Person-cpp" class="headerlink" title="Person.cpp"></a>Person.cpp</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Person.h"</span></span></span><br><span class="line"></span><br><span class="line">ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;out, Person &amp;person)</span><br><span class="line">&#123;</span><br><span class="line">out &lt;&lt; person.name &lt;&lt; <span class="string">"----"</span> &lt;&lt; person.phone &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person &amp;Person::<span class="keyword">operator</span>=(Person &amp;person)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;name = person.name;</span><br><span class="line"><span class="keyword">this</span>-&gt;phone = person.phone;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> Person::<span class="keyword">operator</span>==(Person &amp;person)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;name == person.name &amp;&amp; <span class="keyword">this</span>-&gt;phone==person.phone)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Node-h-1"><a href="#Node-h-1" class="headerlink" title="Node.h"></a>Node.h</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> NODE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NODE_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Person.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person data;</span><br><span class="line">Node *next;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printNode</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="Node-cpp-1"><a href="#Node-cpp-1" class="headerlink" title="Node.cpp"></a>Node.cpp</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Node.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Node::printNode()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; data &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="List-h-2"><a href="#List-h-2" class="headerlink" title="List.h"></a>List.h</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> LIST_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LIST_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"Node.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">List</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">List();</span><br><span class="line">~List();</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ClearList</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListEmpty</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ListLength</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">GetElem</span><span class="params">(<span class="keyword">int</span> i, Node *pNode)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LocateElem</span><span class="params">(Node *pNode)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">PriorElem</span><span class="params">(Node *pCurrentNode, Node *pPreNode)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">NextElem</span><span class="params">(Node *pCurrentNode, Node *pNextNode)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListTraverse</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListInsert</span><span class="params">(<span class="keyword">int</span> i, Node *pNode)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListDelete</span><span class="params">(<span class="keyword">int</span> i, Node *pNode)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListInsertHead</span><span class="params">(Node *pNode)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListInsertTail</span><span class="params">(Node *pNode)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Node *m_pList;</span><br><span class="line"><span class="keyword">int</span> m_iLength;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="List-cpp-2"><a href="#List-cpp-2" class="headerlink" title="List.cpp"></a>List.cpp</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//线性表--顺序表</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"List.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line">List::List()</span><br><span class="line">&#123;</span><br><span class="line">m_pList = <span class="keyword">new</span> Node;</span><br><span class="line"><span class="comment">// m_pList-&gt;data = 0;</span></span><br><span class="line">m_pList-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">m_iLength = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">List::~List()</span><br><span class="line">&#123;</span><br><span class="line">ClearList();</span><br><span class="line"><span class="keyword">delete</span> m_pList;</span><br><span class="line">m_pList = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> List::ListInsertHead(Node *pNode)</span><br><span class="line">&#123;</span><br><span class="line">Node *newNode = <span class="keyword">new</span> Node;</span><br><span class="line"><span class="keyword">if</span> (newNode == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">newNode-&gt;data = pNode-&gt;data;</span><br><span class="line">newNode-&gt;next = m_pList-&gt;next;</span><br><span class="line">m_pList-&gt;next = newNode;</span><br><span class="line">m_iLength++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> List::ListInsertTail(Node *pNode)</span><br><span class="line">&#123;</span><br><span class="line">Node *currentNode = m_pList;</span><br><span class="line"><span class="keyword">while</span> (currentNode-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">currentNode = currentNode-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">Node *newNode = <span class="keyword">new</span> Node;</span><br><span class="line"><span class="keyword">if</span> (newNode == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">newNode-&gt;data = pNode-&gt;data;</span><br><span class="line">newNode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">currentNode-&gt;next = newNode;</span><br><span class="line">m_iLength++;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> List::ListInsert(<span class="keyword">int</span> i, Node* pNode)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i&lt;<span class="number">0</span> || i&gt;m_iLength)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">Node *currentNode = m_pList;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; i; ++k)</span><br><span class="line">&#123;</span><br><span class="line">currentNode = currentNode-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">Node *newNode = <span class="keyword">new</span> Node;</span><br><span class="line"><span class="keyword">if</span> (newNode == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">newNode-&gt;data = pNode-&gt;data;</span><br><span class="line">newNode-&gt;next = currentNode-&gt;next;</span><br><span class="line">currentNode-&gt;next = newNode;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> List::ListDelete(<span class="keyword">int</span> i, Node *pNode)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= m_iLength)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">Node *currentNode = m_pList;</span><br><span class="line">Node *currentNodeBefore = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= i; ++k)</span><br><span class="line">&#123;</span><br><span class="line">currentNodeBefore = currentNode;</span><br><span class="line">currentNode = currentNode-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">currentNodeBefore-&gt;next = currentNode-&gt;next;</span><br><span class="line">pNode-&gt;data = currentNode-&gt;data;</span><br><span class="line"><span class="keyword">delete</span> currentNode;</span><br><span class="line">currentNode = <span class="literal">NULL</span>;</span><br><span class="line">m_iLength--;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> List::ClearList()</span><br><span class="line">&#123;</span><br><span class="line">Node *currentNode = m_pList-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (currentNode != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">Node *temp = currentNode-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> currentNode;</span><br><span class="line">currentNode = temp;</span><br><span class="line">&#125;</span><br><span class="line">m_pList-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">m_iLength = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> List::ListEmpty()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (m_iLength == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> List::ListLength()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> m_iLength;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> List::GetElem(<span class="keyword">int</span> i, Node *pNode)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= m_iLength)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">Node *currentNode = m_pList;</span><br><span class="line">Node *currentNodeBefore = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= i; ++k)</span><br><span class="line">&#123;</span><br><span class="line">currentNodeBefore = currentNode;</span><br><span class="line">currentNode = currentNode-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pNode-&gt;data = currentNode-&gt;data;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> List::LocateElem(Node *pNode)</span><br><span class="line">&#123;</span><br><span class="line">Node *currentNode = m_pList;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (currentNode-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">currentNode = currentNode-&gt;next;</span><br><span class="line"><span class="keyword">if</span> (currentNode-&gt;data == pNode-&gt;data)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> List::PriorElem(Node *pCurrentNode, Node *pPreNode)</span><br><span class="line">&#123;</span><br><span class="line">Node *currentNode = m_pList;</span><br><span class="line">Node *tempNode = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">while</span> (currentNode-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">tempNode = currentNode;</span><br><span class="line">currentNode = currentNode-&gt;next;</span><br><span class="line"><span class="keyword">if</span> (currentNode-&gt;data == pCurrentNode-&gt;data)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (tempNode == m_pList)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">pPreNode-&gt;data = tempNode-&gt;data;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> List::NextElem(Node *pCurrentNode, Node *pNextNode)</span><br><span class="line">&#123;</span><br><span class="line">Node *currentNode = m_pList;</span><br><span class="line"><span class="keyword">while</span> (currentNode-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">currentNode = currentNode-&gt;next;</span><br><span class="line"><span class="keyword">if</span> (currentNode-&gt;data == pCurrentNode-&gt;data)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (currentNode-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pNextNode-&gt;data = currentNode-&gt;next-&gt;data;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> List::ListTraverse()</span><br><span class="line">&#123;</span><br><span class="line">Node *currentNode = m_pList;</span><br><span class="line"><span class="keyword">while</span> (currentNode-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">currentNode = currentNode-&gt;next;</span><br><span class="line">currentNode-&gt;printNode();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="demo-cpp-2"><a href="#demo-cpp-2" class="headerlink" title="demo.cpp"></a>demo.cpp</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"List.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">menu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"功能菜单"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"1.新建联系人"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"2.删除联系人"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"3.浏览通讯录"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"4.退出通讯录"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> order = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; order;</span><br><span class="line"><span class="keyword">return</span> order;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createPerson</span><span class="params">(List *pList)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Node node;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入姓名："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; node.data.name;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入电话："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; node.data.phone;</span><br><span class="line">pList-&gt;ListInsertTail(&amp;node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deletePerson</span><span class="params">(List *pList)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Node node;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入姓名："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; node.data.name;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入电话："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; node.data.phone;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">num = pList-&gt;LocateElem(&amp;node);</span><br><span class="line">pList-&gt;ListDelete(num, &amp;node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">List *pList = <span class="keyword">new</span> List();</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> userOrder = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (userOrder != <span class="number">4</span>)</span><br><span class="line">&#123;</span><br><span class="line">userOrder = menu();</span><br><span class="line"><span class="keyword">switch</span> (userOrder)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"用户指令---&gt;新建联系人："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">createPerson(pList);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"用户指令---&gt;删除联系人："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入被删除者姓名："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">deletePerson(pList);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"用户指令---&gt;浏览通讯录："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">pList-&gt;ListTraverse();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"用户指令---&gt;退出通讯录："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span> pList;</span><br><span class="line">pList = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;left&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1550075379443&amp;di=51f53328008b4821ce8f839ac9186c0c&amp;imgtype=0&amp;src=http%3A%2F%2Fhiphotos.baidu.com%2Fdoc%2Fpic%2Fitem%2Fb17eca8065380cd7e40f7c6ba844ad3459828127.jpg&quot; width=&quot;300&quot; height=&quot;180&quot; style=&quot;float:right;&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;　　&lt;strong&gt;线性表（顺序表和链式表）。&lt;/strong&gt;&lt;br&gt;　　&lt;strong&gt;补之前的系列&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt; &lt;/div&gt;
    
    </summary>
    
      <category term="互联网" scheme="https://hubojing.github.io/categories/%E4%BA%92%E8%81%94%E7%BD%91/"/>
    
    
      <category term="CPP" scheme="https://hubojing.github.io/tags/CPP/"/>
    
      <category term="数据结构" scheme="https://hubojing.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>浅谈面向接口编程</title>
    <link href="https://hubojing.github.io/2019/06/11/%E6%B5%85%E8%B0%88%E9%9D%A2%E5%90%91%E6%8E%A5%E5%8F%A3%E7%BC%96%E7%A8%8B/"/>
    <id>https://hubojing.github.io/2019/06/11/浅谈面向接口编程/</id>
    <published>2019-06-11T08:52:13.000Z</published>
    <updated>2019-06-11T14:10:34.000Z</updated>
    
    <content type="html"><![CDATA[<div align="left"><br><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1560271954691&di=bc0217f3ed0bb15433fc257bc850e091&imgtype=0&src=http%3A%2F%2Fpic.baike.soso.com%2Fugc%2Fbaikepic2%2F20126%2F20170917153020-370301936_png_864_479_719568.jpg%2F0" width="300" height="180" style="float:right;"><br><br><br>　　<strong>聊一聊面向接口编程。</strong><br><br><br> </div><a id="more"></a><p>　　最近看Go语言的资料，看到interface类型，突然想起来以前面试的时候面试官问过我是否了解C++接口编程。当时对于这个问题，我脑袋里只有类？抽象类？这样模糊的答案。Bug产出者的我好像经常把接口当类和函数在写。现在再看这个问题，包括对面向对象，似乎明白了些。</p><h1 id="从王者荣耀说开去"><a href="#从王者荣耀说开去" class="headerlink" title="从王者荣耀说开去"></a>从王者荣耀说开去</h1><p>　　比如玩王者荣耀，里面有各种英雄。比如智商250的鲁班七号，他会跑，攻击。<br>　　<code>面向过程</code>的思维就是先定义一个结构体，里面有英雄的静态信息，比如名字、性别等等。“跑”、“攻击”这些动作让它发生，很简单啊，写一个run()和attack()的函数就好了。这时优秀的思维活跃的大佬们想，这个动作是鲁班本身就能发出的啊，不是我外界赋予的，这不够科学。<br>　　于是<code>面向对象</code>诞生了。<br>　　干脆写一个名为“LubanSeven”的类，把run()和attack()放入类里。<br>　　此时对面迎来的敌人是扁鹊。<br>　　他也会跑，攻击。于是还有一个名为“BianQue”的类，同样地，有run()和attack()两个方法。</p><p>　　但是，这似乎很浪费代码。除了名字不同，他们的方法一样啊。<br>　　优秀的思维活跃的大佬们说，要改。这样吧，鲁班七号是英雄，扁鹊也是英雄。干脆写个英雄的基类吧。鲁班七号类和扁鹊类继承它不就好了嘛!<br>　　于是有了英雄类，类里有两个方法run()和attack()。</p><p>　　英雄总归是要推塔的。于是还有一个防御塔类，防御塔也不是省油的灯，你靠近它它也会攻击的。所以里面也有个attack()方法。</p><p>　　同是攻击，但英雄不会承认自己的攻击和防御塔的攻击是一回事。<br>　　可是无聊的看客说，管它是什么，反正就是攻击就完事了，对方会掉血。<br>　　那……这个攻击能不能放一块说？英雄表示拒绝（我又不是个塔），防御塔也闪光表示不服（<del>我…又不是个人？</del>）。<br>　　这时优秀的思维活跃的大佬们又说话了。<br>　　得了得了，我给你们写个接口吧。这个接口就叫做攻击，你们都可以用。<br>　　甚至，水晶都可以用。</p><p>　　这样一来，好像是更抽象了有没有？<br>　　把不同类别的事物的相同特性摘出来，就是<code>接口</code>。使用者可以忽略细节。就像人会吃，猪也会吃。干脆接口就叫吃，下次有个猫来了，也可以调用。</p><p>　　例子讲完。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>　　C++貌似是没有接口这个狭义的语法概念的，但是我们依然可以写出类似于java里的interface这样的设计概念（使用纯虚函数）。</p><p>　　<code>面向过程编程(Procedure Oriented Programming, POP)</code>对应的是<code>面向对象编程(Object Oriented Programming, OOP)</code>，<code>面向接口编程(Interface Oriented Programming, IOP)</code>对应的是<code>面向实现编程(Realize Oriented Programming, ROP)</code>。<br>　　<code>面向过程编程</code>把世界分为数据结构和函数，追求过程一步步实现，<code>面向对象编程</code>把世界分为对象和方法。<br>　　<code>面向实现编程</code>和<code>面向接口编程</code>都是基于面向对象编程来谈的。<br>　　<code>面向实现编程</code>就是在自身类中实例化该类，直接调用相应方法。耦合度高。<br>　　<code>面向接口编程</code>主要是为了将定义和实现分开，提高了代码的解耦度，复用性强，便于扩展，能够更好的维护。<br>　　所有的思想本质都是模拟现实。</p><p>　　之前分不清<code>抽象类</code>和<code>接口</code>的区别，但现在觉得抽象类是广义的用法，而其中针对某些特定功能实现的抽象类就可以称之为接口，或者说接口更侧重于定义规则。比如高考学生类、考研学生类它们的抽象类是学生类，而其中一个接口是“考试”。</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://www.cnblogs.com/moveofgod/archive/2013/05/08/3066325.html" target="_blank" rel="noopener">https://www.cnblogs.com/moveofgod/archive/2013/05/08/3066325.html</a><br><a href="https://blog.csdn.net/u013400743/article/details/51252003" target="_blank" rel="noopener">https://blog.csdn.net/u013400743/article/details/51252003</a><br><a href="https://blog.csdn.net/qq_35923749/article/details/78422977" target="_blank" rel="noopener">https://blog.csdn.net/qq_35923749/article/details/78422977</a></p>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;left&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1560271954691&amp;di=bc0217f3ed0bb15433fc257bc850e091&amp;imgtype=0&amp;src=http%3A%2F%2Fpic.baike.soso.com%2Fugc%2Fbaikepic2%2F20126%2F20170917153020-370301936_png_864_479_719568.jpg%2F0&quot; width=&quot;300&quot; height=&quot;180&quot; style=&quot;float:right;&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;　　&lt;strong&gt;聊一聊面向接口编程。&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt; &lt;/div&gt;
    
    </summary>
    
      <category term="互联网" scheme="https://hubojing.github.io/categories/%E4%BA%92%E8%81%94%E7%BD%91/"/>
    
    
      <category term="Java" scheme="https://hubojing.github.io/tags/Java/"/>
    
      <category term="CPP" scheme="https://hubojing.github.io/tags/CPP/"/>
    
  </entry>
  
  <entry>
    <title>计算机图形学实验</title>
    <link href="https://hubojing.github.io/2019/05/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%AE%9E%E9%AA%8C/"/>
    <id>https://hubojing.github.io/2019/05/12/计算机图形学实验/</id>
    <published>2019-05-12T09:25:58.000Z</published>
    <updated>2019-05-16T09:33:36.000Z</updated>
    
    <content type="html"><![CDATA[<div align="left"><br><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1557677072935&di=16e57f4481b390fc87b48f03d54f1fdf&imgtype=0&src=http%3A%2F%2Fs1.51cto.com%2Fimages%2F201612%2F1359d3a151a8f27b15a727f0ecfc4482141874.png" width="300" height="180" style="float:right;"><br><br><br>　　<strong>计算机图形学实验笔记</strong><br>　　<strong>计算机视觉学累了就看看计算机图形学…反向消化…</strong><br>　　<strong>理论看累了就敲敲代码</strong><br>　　<strong>说不弃坑，就不弃坑|( ´・∧・｀)</strong><br><br> </div><a id="more"></a><h1 id="实验：搭建OpenGL环境"><a href="#实验：搭建OpenGL环境" class="headerlink" title="实验：搭建OpenGL环境"></a>实验：搭建OpenGL环境</h1><p>　　OpenGL版本：3.3</p><h2 id="GLFW"><a href="#GLFW" class="headerlink" title="GLFW"></a>GLFW</h2><p>　　GLFW是一个OpenGL的C语言库，是对之前固定管线常用的GLUT的一种改进。<br>　　<a href="https://www.glfw.org/download.html" target="_blank" rel="noopener">官网</a>下载源代码包（推荐），或者下载32位的预编译的二进制版本。</p><h3 id="编译glfw3-lib"><a href="#编译glfw3-lib" class="headerlink" title="编译glfw3.lib"></a>编译glfw3.lib</h3><p>　　我下载的最新3.3版，下载后解压。并新建一个build文件夹。<br>　　下载<a href="https://cmake.org/download/" target="_blank" rel="noopener">CMake</a>，安装Win32版本。</p><p>　　找到bin文件夹下cmake-gui.exe，<br>　　填入源代码路径和build文件夹路径：<br>　　Where is the source code: E:/glfw-3.3<br>　　Where to build the binaries: E:/glfw-3.3/build</p><p>　　点击Configure按钮，选择合适的生成器（我选择的是VS2015)。点Finish。<br>　　再次点击Configure按钮保存设置。<br>　　点击Generate按钮，生成工程文件。</p><p>　　在build文件夹打开GLFW.sln文件，并且生成解决方案。<br>　　在E:\glfw-3.3\build\src\Debug中所需要的glfw3.lib就有了。</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>　　方便起见，我专门建立了一个文件夹OpenGLFiles用来存放相关的头文件和库文件。<br>　　在文件夹下新建include文件夹和lib文件夹。</p><p>　　将glfw-3.3\include下的文件复制到新建的include文件夹中，将glfw3.lib复制到新建的lib文件夹中。</p><p>　　新建项目所需工程文件，创建空项目。<br>　　打开工程属性页，选择VC++目录-包含目录中加上：<br>　　E:\OpenGLFiles\include<br>　　库目录加上：<br>　　E:\OpenGLFiles\lib</p><p>　　链接器-输入，附加依赖项加上：<br>　　glfw3.lib</p><h2 id="GLAD"><a href="#GLAD" class="headerlink" title="GLAD"></a>GLAD</h2><p>　　开发者需要在OpenGL运行时获取函数地址并保存在一个函数指针中，取地址方法因平台而异，而GLAD库能简化该过程。</p><p>　　通过<a href="https://glad.dav1d.de/" target="_blank" rel="noopener">GLAD在线服务</a>，language选择C/C++,gl选择3.3，Profile选择Core，Options选中Generate a loader。<br>　　点击Generate，下载压缩包。解压后，将include文件夹下的文件复制到我新建的include文件夹里，并且将src下的glad.c添加到工程中。</p><p>　　环境搭好了！</p><hr><h1 id="实验：绘制一个窗口"><a href="#实验：绘制一个窗口" class="headerlink" title="实验：绘制一个窗口"></a>实验：绘制一个窗口</h1><h2 id="包含头文件"><a href="#包含头文件" class="headerlink" title="包含头文件"></a>包含头文件</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;glad/glad.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;GLFW/glfw3.h&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="初始化GLFW"><a href="#初始化GLFW" class="headerlink" title="初始化GLFW"></a>初始化GLFW</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">glfwInit();                                                     <span class="comment">// 初始化GLFW</span></span><br><span class="line">glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, <span class="number">3</span>);                  <span class="comment">// OpenGL版本为3.3，主次版本号均设为3</span></span><br><span class="line">glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, <span class="number">3</span>);</span><br><span class="line">glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);  <span class="comment">// 使用核心模式(无需向后兼容性)</span></span><br><span class="line">glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);            <span class="comment">// 如果使用的是Mac OS X系统，需加上这行</span></span><br><span class="line">glfwWindowHint(GLFW_RESIZABLE, <span class="literal">false</span>);    <span class="comment">// 不可改变窗口大小</span></span><br></pre></td></tr></table></figure><h2 id="查看GLFW版本"><a href="#查看GLFW版本" class="headerlink" title="查看GLFW版本"></a>查看GLFW版本</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> Major, Minor, Rev;</span><br><span class="line">glfwGetVersion(&amp;Major, &amp;Minor, &amp;Rev);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"GLFW %d.%d.%d initialized\n"</span>, Major, Minor, Rev);</span><br></pre></td></tr></table></figure><h2 id="创建窗口"><a href="#创建窗口" class="headerlink" title="创建窗口"></a>创建窗口</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GLFWwindow* window = glfwCreateWindow(screen_width, screen_height, <span class="string">"HelloWorld"</span>, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>);</span><br><span class="line">   <span class="keyword">if</span> (window == <span class="literal">nullptr</span>) </span><br><span class="line">&#123;<span class="comment">// 如果窗口创建失败</span></span><br><span class="line">       <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Failed to Create OpenGL Context"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">       glfwTerminate();</span><br><span class="line">       <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   glfwMakeContextCurrent(window); <span class="comment">// 将窗口的上下文设置为当前线程的主上下文</span></span><br></pre></td></tr></table></figure><h2 id="初始化GLAD"><a href="#初始化GLAD" class="headerlink" title="初始化GLAD"></a>初始化GLAD</h2><p>加载OpenGL函数指针地址的函数<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Failed to initialize GLAD"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="指定视口"><a href="#指定视口" class="headerlink" title="指定视口"></a>指定视口</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">glViewport(<span class="number">0</span>, <span class="number">0</span>, screen_width, screen_height);</span><br></pre></td></tr></table></figure><p>glViewport函数前两个参数控制窗口左下角的位置，第三、第四个参数<br>控制渲染窗口的宽度和高度（像素）。<br>实际上也可以将视口的维度设置为比GLFW的维度小，这样所<br>有的OpenGL渲染将会在一个更小的窗口中显示，这样我们可以将一<br>些其它元素显示在OpenGL视口之外。 </p><h2 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (!glfwWindowShouldClose(window)) </span><br><span class="line">&#123;</span><br><span class="line">    glfwSwapBuffers(window);<span class="comment">// 交换缓冲</span></span><br><span class="line">    glfwPollEvents();<span class="comment">//检查是否有触发事件(比如键盘输入、鼠标移动等）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>双缓冲：<br>单缓冲使图像闪烁（图像是从左到右，从上到下逐像素绘制），不够真实。使用双缓冲规避该问题，前缓冲保存着最终输出的图像，显示在屏幕上。所有渲染指令在后缓冲上绘制，指令执行完毕后交换(swap)前缓冲和后缓冲，图像会立即呈现。</p><p>渲染结束，释放资源：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">glfwTerminate();</span><br></pre></td></tr></table></figure></p><p>运行，此时会看到一个黑色的窗口。</p><h2 id="修改窗口颜色"><a href="#修改窗口颜色" class="headerlink" title="修改窗口颜色"></a>修改窗口颜色</h2><p>在渲染循环中加入：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">glClearColor(<span class="number">0.0f</span>, <span class="number">0.34f</span>, <span class="number">0.57f</span>, <span class="number">1.0f</span>);</span><br><span class="line">glClear(GL_COLOR_BUFFER_BIT);</span><br></pre></td></tr></table></figure></p><p>当调用 glClear函数，清除颜色缓冲之后，整个颜色缓冲都会被填充为<br>glClearColor里所设置的颜色。</p><h2 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GLFW 3.3.0 initialized</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/计算机图形学实验——绘制窗口.png?raw=true" alt="绘制窗口" title="">                </div>                <div class="image-caption">绘制窗口</div>            </figure><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><p><a href="https://github.com/hubojing/ComputerGraphics/blob/master/CreateWindow.cpp" target="_blank" rel="noopener">https://github.com/hubojing/ComputerGraphics/blob/master/CreateWindow.cpp</a></p><p>总结：</p><ul><li>初始化：GLFW窗口，GLAD。</li><li>渲染：清空缓冲，交换缓冲区检查触发事件后释放资源。</li></ul><hr><h1 id="实验：绘制三角形"><a href="#实验：绘制三角形" class="headerlink" title="实验：绘制三角形"></a>实验：绘制三角形</h1><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化GLFW</span></span><br><span class="line">glfwInit();</span><br><span class="line">glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, <span class="number">3</span>);</span><br><span class="line">glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, <span class="number">3</span>);</span><br><span class="line">glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);</span><br><span class="line">glfwWindowHint(GLFW_RESIZABLE, FALSE);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建窗口</span></span><br><span class="line"><span class="keyword">auto</span> window = glfwCreateWindow(screen_width, screen_height, <span class="string">"Triangle"</span>,</span><br><span class="line"><span class="literal">nullptr</span>, <span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">if</span> (window == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Failed to Create OpenGL Context"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">glfwTerminate();</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">glfwMakeContextCurrent(window);</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化GLAD</span></span><br><span class="line"><span class="keyword">if</span> (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Failed to initialize GLAD"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//指定当前视口尺寸 </span></span><br><span class="line">glViewport(<span class="number">0</span>, <span class="number">0</span>, screen_width, screen_height);</span><br></pre></td></tr></table></figure><h2 id="顶点输入"><a href="#顶点输入" class="headerlink" title="顶点输入"></a>顶点输入</h2><p>　　三角形顶点数据是标准化的设备坐标，即x,y,z轴坐标映射到[-1,1]之间。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">float</span> triangle[]=</span><br><span class="line">&#123;</span><br><span class="line"><span class="number">-0.5f</span>,<span class="number">-0.5f</span>,<span class="number">0.0f</span>;<span class="comment">//左下</span></span><br><span class="line"><span class="number">0.5f</span>, <span class="number">-0.5f</span>, <span class="number">0.0f</span>;<span class="comment">//右下</span></span><br><span class="line"><span class="number">0.0f</span>, <span class="number">0.5f</span>, <span class="number">0.0f</span>;<span class="comment">//正上</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h2><h3 id="VBO"><a href="#VBO" class="headerlink" title="VBO"></a>VBO</h3><p>　　将顶点数据发送到GPU处理。生成一个顶点缓冲对象VBO，将其绑定到顶点缓冲对象上。<br>　　作用：不用将顶点数据逐个发送至显卡，可借助VBO一次性发送过去。<br>　　再使用glBufferData将顶点数据绑定到当前默认的缓冲上。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//生成并绑定VBO</span></span><br><span class="line">GLuint vertex_buffer_object;</span><br><span class="line">glGenBuffers(<span class="number">1</span>, &amp;vertex_buffer_object);</span><br><span class="line">glBindBuffer(GL_ARRAY_BUFFER, vertex_buffer_object);</span><br><span class="line"><span class="comment">//将顶点数据绑定到当前默认的缓冲中</span></span><br><span class="line">glBufferData(GL_ARRAY_BUFFER, <span class="keyword">sizeof</span>(triangle), triangle, GL_STATIC_DRAW);</span><br></pre></td></tr></table></figure></p><h3 id="VAO"><a href="#VAO" class="headerlink" title="VAO"></a>VAO</h3><p>　　作用：核心模式需要使用VAO，渲染时只需调用一次VAO即可，之前的数据对应存储在VAO中，不用再调用VBO。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GLuint vertex_array_object;</span><br><span class="line">glGenVertexArrays(<span class="number">1</span>, &amp;vertex_array_object);</span><br><span class="line">glBindVertexArray(vertex_array_object);</span><br></pre></td></tr></table></figure></p><h3 id="顶点属性"><a href="#顶点属性" class="headerlink" title="顶点属性"></a>顶点属性</h3><p>　　告诉OpenGL如何解释顶点数据。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置顶点属性指针</span></span><br><span class="line">glVertexAttribPointer(<span class="number">0</span>, <span class="number">3</span>, GL_FLOAT, GL_FALSE, <span class="number">3</span> * <span class="keyword">sizeof</span>(<span class="keyword">float</span>), (<span class="keyword">void</span>*)<span class="number">0</span>);</span><br><span class="line">glEnableVertexAttribArray(<span class="number">0</span>);</span><br></pre></td></tr></table></figure></p><p>　　glVertexAttribPointer函数参数含义：<br>　　1-顶点着色器位置值<br>　　2-顶点属性是一个三分量的向量<br>　　3-顶点类型<br>　　4-数据是否被标准化（映射到0-1之间）<br>　　5-步长（这里表示下组数据在3个float之后）<br>　　6-数据偏移量（此处位置属性在数组开头，因此为0）</p><p>　　glEnableVertexAttribArray表示开启0这个通道，默认状态是关闭的。</p><p>　　此时需要解绑VAO和VBO。<br>　　原因：<br>　　1. 防止继续绑定VAO时影响当前VAO。<br>　　2. 使代码更具灵活性，在渲染需要时会再次绑定VAO。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">glBindVertexArray(<span class="number">0</span>);</span><br><span class="line">glBindBuffer(GL_ARRAY_BUFFER, <span class="number">0</span>);</span><br></pre></td></tr></table></figure></p><h2 id="顶点着色器和片段着色器"><a href="#顶点着色器和片段着色器" class="headerlink" title="顶点着色器和片段着色器"></a>顶点着色器和片段着色器</h2><h3 id="顶点着色器"><a href="#顶点着色器" class="headerlink" title="顶点着色器"></a>顶点着色器</h3><p>　　GLSL语言，类似C语言。<br>　　源码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *vertex_shader_source =</span><br><span class="line"><span class="string">"#version 330 core\n"</span></span><br><span class="line"><span class="string">"layout (location = 0) in vec3 aPos;\n"</span></span><br><span class="line"><span class="string">"void main()\n"</span></span><br><span class="line"><span class="string">"&#123;\n"</span></span><br><span class="line"><span class="string">"gl_Position = vec4(aPos, 1.0);\n"</span></span><br><span class="line"><span class="string">"&#125;\n\0"</span>;</span><br></pre></td></tr></table></figure></p><p>　　第一行：使用OpenGL3.3核心模式<br>　　第二行：上面提到的位置值 in表示输入变量<br>　　main函数中将顶点数据直接输出到GLSL定义好的内建变量gl_Position中，这是顶点着色器的输出。<br>　　（即在顶点着色器这儿上面都没做，只是将顶点位置作为顶点着色器的输出。）</p><h3 id="片段着色器"><a href="#片段着色器" class="headerlink" title="片段着色器"></a>片段着色器</h3><p>　　源码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *fragment_shader_source =</span><br><span class="line"><span class="string">"#version 330 core\n"</span></span><br><span class="line"><span class="string">"out vec4 FragColor;\n"</span></span><br><span class="line"><span class="string">"void main()\n"</span></span><br><span class="line"><span class="string">"&#123;\n"</span></span><br><span class="line"><span class="string">"FragColor = vec4(1.0f, 0.5f, 0.2f, 1.0f);\n"</span></span><br><span class="line"><span class="string">"&#125;\n\0"</span>;</span><br></pre></td></tr></table></figure></p><p>　　前两行类似上面，out表示输出变量。四分量是RGBA。</p><h3 id="生成和编译"><a href="#生成和编译" class="headerlink" title="生成和编译"></a>生成和编译</h3><p>　　目的是为了得到着色器程序，所以首先生成和编译着色器，再链接到着色器程序中。<br>　　生成并编译顶点着色器<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> vertex_shader = glCreateShader(GL_VERTEX_SHADER);</span><br><span class="line">glShaderSource(vertex_shader, <span class="number">1</span>, &amp;vertex_shader_source, <span class="literal">NULL</span>);</span><br><span class="line">glCompileShader(vertex_shader);</span><br><span class="line"><span class="keyword">int</span> success;</span><br><span class="line"><span class="keyword">char</span> info_log[<span class="number">512</span>];</span><br><span class="line"><span class="comment">//是否成功编译</span></span><br><span class="line">glGetShaderiv(vertex_shader, GL_COMPILE_STATUS, &amp;success);</span><br><span class="line"><span class="keyword">if</span> (!success)</span><br><span class="line">&#123;</span><br><span class="line">glGetShaderInfoLog(vertex_shader, <span class="number">512</span>, <span class="literal">NULL</span>, info_log);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"ERROR::SHADER::VERTEX::COMPILATION_FAILED\n"</span> &lt;&lt; info_log &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>　　生成并编译片段着色器<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> fragment_shader = glCreateShader(GL_FRAGMENT_SHADER);</span><br><span class="line">glShaderSource(fragment_shader, <span class="number">1</span>, &amp;fragment_shader_source, <span class="literal">NULL</span>);</span><br><span class="line">glCompileShader(fragment_shader);</span><br><span class="line"><span class="comment">//是否成功编译</span></span><br><span class="line">glGetShaderiv(fragment_shader, GL_COMPILE_STATUS, &amp;success);</span><br><span class="line"><span class="keyword">if</span> (!success)</span><br><span class="line">&#123;</span><br><span class="line">glGetShaderInfoLog(fragment_shader, <span class="number">512</span>, <span class="literal">NULL</span>, info_log);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"ERROR::SHADER::FRAGMENT::COMPILATION_FAILED\n"</span> &lt;&lt; info_log &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>　　链接顶点和片段着色器至一个着色器程序，并删除着色器<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> shader_program = glCreateProgram();</span><br><span class="line">glAttachShader(shader_program, vertex_shader);</span><br><span class="line">glAttachShader(shader_program, fragment_shader);</span><br><span class="line">glLinkProgram(shader_program);</span><br><span class="line"><span class="comment">//是否成功链接</span></span><br><span class="line">glGetProgramiv(shader_program, GL_LINK_STATUS, &amp;success);</span><br><span class="line"><span class="keyword">if</span> (!success)</span><br><span class="line">&#123;</span><br><span class="line">glGetProgramInfoLog(shader_program, <span class="number">512</span>, <span class="literal">NULL</span>, info_log);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"ERROR::SHADER::PROGRAM::LINKING_FAILED\n"</span> &lt;&lt; info_log &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除着色器</span></span><br><span class="line">glDeleteShader(vertex_shader);</span><br><span class="line">glDeleteShader(fragment_shader);</span><br></pre></td></tr></table></figure></p><h2 id="渲染-1"><a href="#渲染-1" class="headerlink" title="渲染"></a>渲染</h2><p>　　渲染时只需使用链接好的着色器程序就行，不再需要使用顶点和片段着色器。<br>　　窗口未关闭就一直进行渲染。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (!glfwWindowShouldClose(window))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//渲染操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>　　这里使用蓝色背景色清空屏幕颜色缓冲。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">glClearColor(<span class="number">0.0f</span>, <span class="number">0.34f</span>, <span class="number">0.57f</span>, <span class="number">1.0f</span>);</span><br><span class="line">glClear(GL_COLOR_BUFFER_BIT);</span><br></pre></td></tr></table></figure></p><p>　　接下来使用链接好的着色器和VAO来绘制三角形。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用着色器程序</span></span><br><span class="line">glUseProgram(shader_program);</span><br><span class="line"><span class="comment">//绘制三角形</span></span><br><span class="line">glBindVertexArray(vertex_array_object);</span><br><span class="line">glDrawArrays(GL_TRIANGLES, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">glBindVertexArray(<span class="number">0</span>);</span><br></pre></td></tr></table></figure></p><p>　　其实绘制本身只是一个glDrawArrays函数，参数1表示三角形，参数2表示顶点数组起始索引值，参数3表示要绘制的顶点数量。　　绘制结束后解除绑定。<br>　　双缓冲技术：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//交换缓冲</span></span><br><span class="line">glfwSwapBuffers(window);</span><br><span class="line"><span class="comment">//检查是否有触发事件（键盘输入、鼠标移动等）</span></span><br><span class="line">glfwPollEvents();</span><br></pre></td></tr></table></figure></p><h2 id="善后工作"><a href="#善后工作" class="headerlink" title="善后工作"></a>善后工作</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除VAO和VBO</span></span><br><span class="line">glDeleteVertexArrays(<span class="number">1</span>, &amp;vertex_array_object);</span><br><span class="line">glDeleteBuffers(<span class="number">1</span>, &amp;vertex_buffer_object);</span><br><span class="line"></span><br><span class="line"><span class="comment">//退出</span></span><br><span class="line">glfwTerminate();</span><br></pre></td></tr></table></figure><h2 id="实验效果"><a href="#实验效果" class="headerlink" title="实验效果"></a>实验效果</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%AE%9E%E9%AA%8C%E2%80%94%E2%80%94%E7%BB%98%E5%88%B6%E4%B8%89%E8%A7%92%E5%BD%A2.png?raw=true" alt="三角形" title="">                </div>                <div class="image-caption">三角形</div>            </figure><h2 id="完整代码-1"><a href="#完整代码-1" class="headerlink" title="完整代码"></a>完整代码</h2><p><a href="https://github.com/hubojing/ComputerGraphics/blob/master/Triangle" target="_blank" rel="noopener">https://github.com/hubojing/ComputerGraphics/blob/master/Triangle</a></p><p>总结：</p><ul><li>初始化。</li><li>数据处理：给定顶点数据，生成并绑定VAO和VBO，准备在GPU处理，设置顶点属性指针（告诉OpenGL怎么处理数据）。</li><li>着色器：生成并编译顶点和片段着色器，链接为着色器程序。</li><li>渲染绘制三角形。</li></ul><hr><p><strong>下一个实验准备中…</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;left&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1557677072935&amp;di=16e57f4481b390fc87b48f03d54f1fdf&amp;imgtype=0&amp;src=http%3A%2F%2Fs1.51cto.com%2Fimages%2F201612%2F1359d3a151a8f27b15a727f0ecfc4482141874.png&quot; width=&quot;300&quot; height=&quot;180&quot; style=&quot;float:right;&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;　　&lt;strong&gt;计算机图形学实验笔记&lt;/strong&gt;&lt;br&gt;　　&lt;strong&gt;计算机视觉学累了就看看计算机图形学…反向消化…&lt;/strong&gt;&lt;br&gt;　　&lt;strong&gt;理论看累了就敲敲代码&lt;/strong&gt;&lt;br&gt;　　&lt;strong&gt;说不弃坑，就不弃坑|( ´・∧・｀)&lt;/strong&gt;&lt;br&gt;&lt;br&gt; &lt;/div&gt;
    
    </summary>
    
      <category term="互联网" scheme="https://hubojing.github.io/categories/%E4%BA%92%E8%81%94%E7%BD%91/"/>
    
    
      <category term="计算机图形学" scheme="https://hubojing.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>记一回失败的渲染操作</title>
    <link href="https://hubojing.github.io/2019/04/20/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B1%E8%B4%A5%E7%9A%84%E6%B8%B2%E6%9F%93%E6%93%8D%E4%BD%9C/"/>
    <id>https://hubojing.github.io/2019/04/20/记一次失败的渲染操作/</id>
    <published>2019-04-20T14:43:56.000Z</published>
    <updated>2019-04-20T14:43:56.000Z</updated>
    
    <content type="html"><![CDATA[<div align="left"><br><img src="https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=3165543944,3291609435&fm=26&gp=0.jpg" width="300" height="180" style="float:right;"><br><br><br>　　<strong>离烧CPU就差这一篇文章</strong><br><br><br> </div><a id="more"></a><p>　　时间：今晚<br>　　地点：诡异的电脑<br>　　起因：剪辑视频<br>　　结果：写这篇文章</p><p>　　T_T</p><p>　　配置：CPU 锐龙5 1600X</p><p>　　作为一枚初级音视频剪辑玩家，音频处理得多，而上次认真剪视频是一两年前（或者三年？时间过得有点快啊……）的事情了吧…….我几乎忘记了渲染操作，把渲染想得和导出一样简单ε=(´ο｀*)))唉</p><p>　　视频时长只有1分钟！为了严谨行文，我又打开了Vegas确认一下（是00:01:06)。</p><p>　　第一次渲染操作：输出格式：Internet HD 1080P,渲染到一半，电脑关机了？？？<br>　　我的内心：<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/记一回失败的渲染操作——问号表情包.jpg?raw=true" alt="???" title="">                </div>                <div class="image-caption">???</div>            </figure><br>　　目光下移，我腿踢机箱了？</p><p>　　开机，再整一次。又黑了。<br>　　我：？？？？？？锐龙1600x怎么这么经不起折腾，之前用y400（i5 3230M）渲染十分钟的视频都毫无问题呢~</p><p>　　再开机。看一眼CPU温度，55°。隐隐感觉热啊…</p><p>　　再来一次，这次降低要求，720P，720P也可以。把温度监控就放在一边，然后就静静地看着温度往上爬……</p><p>　　后来换输出格式又测试了几次，几乎都是八十多度，最高直逼90度。那还是关机吧，烧了我的CPU我心疼。就算CPU没烧，烧了主板我也心疼。</p><p>　　看着我只有一分钟的视频，我默默关掉了Vegas，转身打开了年迈的笔记本。</p><p>　　P.S. Vegas12用GPU加速感觉效果..没有效果（不过只尝试了一次）</p><p>　　虽说渲染是会升温吧，可是CPU占有率只有37%，这显然已经没有很好地发挥CPU性能了，温度还如此高，散热出了问题吧。</p><p>　　但我已经不记得装的什么散热器了。只有打开京东查记录—&gt;</p><p>　　安钛克(Antec)战虎A40战斗版 CPU散热器 送导热硅脂硅胶(纯铜4热管/9cm风扇/LED蓝光风扇/电脑主机箱显卡风冷<br>　　<a href="https://item.jd.com/695774.html" target="_blank" rel="noopener">https://item.jd.com/695774.html</a></p><p>　　当时看来是没单独买散热器，直接用的买CPU送的散热器，作为一名初级装机玩家留下了悔不当初的眼泪。</p><p>　　<del>这么凉爽的天气</del>还算不够热的天气，我才发现什么都不干的情况下CPU就有47°，早知道就不卸载鲁大师了。</p><p>　　一个一分钟的视频让我又要开箱了……</p><p>　　还水了一篇文章。</p><p>　　那..看官推荐一个渲染时CPU不会超过80°（70°以下就更好了）的散热器？另外CPU占比提不起来要改善啊…</p>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;left&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=3165543944,3291609435&amp;fm=26&amp;gp=0.jpg&quot; width=&quot;300&quot; height=&quot;180&quot; style=&quot;float:right;&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;　　&lt;strong&gt;离烧CPU就差这一篇文章&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt; &lt;/div&gt;
    
    </summary>
    
      <category term="通信工程" scheme="https://hubojing.github.io/categories/%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/"/>
    
    
      <category term="硬件" scheme="https://hubojing.github.io/tags/%E7%A1%AC%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>小概念杂记</title>
    <link href="https://hubojing.github.io/2019/02/25/%E8%AE%BA%E6%96%87%E6%9D%82%E8%AE%B0/"/>
    <id>https://hubojing.github.io/2019/02/25/论文杂记/</id>
    <published>2019-02-25T12:42:15.000Z</published>
    <updated>2019-02-25T12:42:15.000Z</updated>
    
    <content type="html"><![CDATA[<div align="left"><br><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1555785194162&di=9fcd936a6e390cb5feb68dfc5b657441&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201705%2F07%2F20170507211114_Txv4P.jpeg" width="300" height="180" style="float:right;"><br><br><br>　　<strong>零碎记录（自用）。</strong><br><br><br> </div><a id="more"></a><p>分集增益（Diversity Gain）：分集技术是研究如何充分利用传输中的多径信号能量，以改善传输的可靠性，它也是一项研究利用信号的基本参量在时域、频域与空域中，如何分散开又如何收集起来的技术。</p><p>Zipf定律：Zipf定律可以表述为在自然语言的语料库里，一个单词出现的次数与它在频率表里的排名成反比。Zipf定律是美国学者G.K.齐普夫1935年提出的。</p><p>Zipf分布：用X~Zipf(alpha,n)表示随机变量X具有带参数alpha和n的Zipf分布。带有参数alpha和n的Zipf随机变量X是有概率质量函数在里面。</p><p>概率质量函数：<br>在概率论中，概率质量函数 (Probability Mass Function，PMF)是离散随机变量在各特定取值上的概率。概率质量函数和概率密度函数不同之处在于：概率密度函数是对连续随机变量定义的，本身不是概率，只有对连续随机变量的取值进行积分后才是概率。</p><p>上面公式的含义为在随机变量X的映射函数下，所有样本空间中的结果在此映射下输出结果为x的概率。</p><p>讲人话：<br>所谓的二八原则（20%的用户，会占有80%的访问量）即是Zipf应用。<br>比如，按照单词在语料库中出现的次数排序，该单词的排序数与其在语料库中出现频数成反比，或者说，二者乘积为一个常数。</p><p>其公式为：P(r) = C / r^α</p><p>这里 r 表示一个单词的出现频率的排名，P(r)表示排名为r的单词的出现频率。单词频率分布中 C约等于0.1, α约等于1。<br>这说明在英语单词中，只有极少部分的词被经常使用，而绝大部分词很少被使用。</p><p>SNR （信噪比SIGNAL-NOISE RATIO）</p><p>通信中断概率（Outage Probability）</p>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;left&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1555785194162&amp;di=9fcd936a6e390cb5feb68dfc5b657441&amp;imgtype=0&amp;src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201705%2F07%2F20170507211114_Txv4P.jpeg&quot; width=&quot;300&quot; height=&quot;180&quot; style=&quot;float:right;&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;　　&lt;strong&gt;零碎记录（自用）。&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt; &lt;/div&gt;
    
    </summary>
    
      <category term="通信工程" scheme="https://hubojing.github.io/categories/%E9%80%9A%E4%BF%A1%E5%B7%A5%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>JingPic——github图床外链小工具</title>
    <link href="https://hubojing.github.io/2019/01/27/JingPic%E2%80%94%E2%80%94github%E5%9B%BE%E5%BA%8A%E5%BF%AB%E9%80%9F%E5%A4%8D%E5%88%B6%E5%A4%96%E9%93%BE%E5%B7%A5%E5%85%B7/"/>
    <id>https://hubojing.github.io/2019/01/27/JingPic——github图床快速复制外链工具/</id>
    <published>2019-01-27T11:28:55.000Z</published>
    <updated>2019-01-27T13:50:16.000Z</updated>
    
    <content type="html"><![CDATA[<div align="left"><br><img src="https://github.com/hubojing/BlogImages/blob/master/JingPic%E2%80%94%E2%80%94github%E5%9B%BE%E5%BA%8A%E5%A4%96%E9%93%BE%E5%B0%8F%E5%B7%A5%E5%85%B7%E2%80%94%E2%80%94%E6%95%B4%E4%BD%93%E7%95%8C%E9%9D%A2.png?raw=true" width="300" height="180" style="float:right;"><br><br><br>　　<strong>针对写markdown文章贴图过程繁琐的问题，写了一个小工具自用。（C++版）</strong><br><br><br> </div><a id="more"></a><h1 id="源起"><a href="#源起" class="headerlink" title="源起"></a>源起</h1><p>Markdown写作者都会对贴图的问题进行一番探索。好在现在有很多优秀的图床上传工具（比如PicGo）。<br>那为什么还会自己写一个工具呢？<br>主要是目前的工具不能完全满足我的需求，比如图片上传后，备注需注明是哪篇文章，方便整理。</p><p>这个工具是这两天利用闲散时间做成的，未来还会根据自我需要进行更新完善。</p><p><del>一开始是打算用python写的</del></p><h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>平台：VS2015<br>图床：github<br>开发前理清思路，罗列出需求是必要的。<br>于是我大概列了几点：</p><ol><li>有UI界面，不要在控制台操作</li><li>采用直接拖入图片到窗口的形式，不要采用选择文件的形式（<del>懒</del>）</li><li>自动推送到github对应项目，形成外链</li><li>拖入图片时要求输入文章标题即符合备注格式</li><li>该文章标题以备注形式出现在github对应项</li><li>url链接地址可以一键复制</li><li>给小工具起一个名字</li></ol><p>原有上传图片的备注格式<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/JingPic%E2%80%94%E2%80%94github%E5%9B%BE%E5%BA%8A%E5%A4%96%E9%93%BE%E5%B0%8F%E5%B7%A5%E5%85%B7%E2%80%94%E2%80%94%E5%A4%87%E6%B3%A8%E6%A0%BC%E5%BC%8F.png?raw=true" alt="备注格式" title="">                </div>                <div class="image-caption">备注格式</div>            </figure></p><p>事实证明最后一条最难</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>把github图床项目下载到本地。</p><h1 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h1><p>最开始设计的是网页。后来考虑是网页的话，就要考虑用户独立性，比如设置账户登录，或者能证明是我本人的id什么的。（<del>麻烦，不够快准狠</del>）</p><p>整个问题大致分为三个。</p><ol><li>拖动<br>图片拖动到窗口，并复制到本地图床文件夹。</li><li>git推送<br>一开始打算直接调cmd完成，后来用bat脚本文件包装看起来清爽一点。</li><li>如何获取外链<br>最初是准备解析网页的。后来发现url有规律可循：<br>如 <a href="https://github.com/hubojing/test/blob/master/%E6%93%8D%E4%BD%9C%E7%AC%A6%E9%87%8D%E8%BD%BD%E4%B9%8B%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0.png?raw=true" target="_blank" rel="noopener">https://github.com/hubojing/test/blob/master/%E6%93%8D%E4%BD%9C%E7%AC%A6%E9%87%8D%E8%BD%BD%E4%B9%8B%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0.png?raw=true</a><br>每一张图都是<a href="https://github.com/hubojing/项目名/blob/master/" target="_blank" rel="noopener">https://github.com/hubojing/项目名/blob/master/</a> 开头 ?raw=true结尾。<br>这就省了解析网页这一步，直接拼url就好了。</li></ol><h1 id="界面"><a href="#界面" class="headerlink" title="界面"></a>界面</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/JingPic%E2%80%94%E2%80%94github%E5%9B%BE%E5%BA%8A%E5%A4%96%E9%93%BE%E5%B0%8F%E5%B7%A5%E5%85%B7%E2%80%94%E2%80%94%E6%95%B4%E4%BD%93%E7%95%8C%E9%9D%A2.png?raw=true" alt="整体界面" title="">                </div>                <div class="image-caption">整体界面</div>            </figure><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="拖动"><a href="#拖动" class="headerlink" title="拖动"></a>拖动</h2><p>JingPicDlg.h加上<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">afx_msg <span class="keyword">void</span> <span class="title">OnDropFiles</span><span class="params">(HDROP hDropInfo)</span></span>;</span><br></pre></td></tr></table></figure></p><p>JingPicDlg.cpp  <code>BEGIN_MESSAGE_MAP</code>加上<code>ON_WM_DROPFILES()</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> CJingPicDlg::OnDropFiles(HDROP hDropInfo)</span><br><span class="line">&#123;</span><br><span class="line">UINT Num;</span><br><span class="line">TCHAR filePath[MAX_PATH];</span><br><span class="line">Num = DragQueryFile(hDropInfo, <span class="number">0xFFFFFFFF</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (Num &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (UINT i = <span class="number">0</span>; i &lt; Num; i++)</span><br><span class="line">&#123;</span><br><span class="line">DragQueryFile(hDropInfo, i, filePath, <span class="keyword">sizeof</span>(filePath));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">DragFinish(hDropInfo);</span><br><span class="line">    CDialog::OnDropFiles(hDropInfo);</span><br></pre></td></tr></table></figure><h2 id="复制到剪贴板"><a href="#复制到剪贴板" class="headerlink" title="复制到剪贴板"></a>复制到剪贴板</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">BOOL CJingPicDlg::CopyToClipboard(<span class="keyword">const</span> <span class="keyword">char</span>* pszData, <span class="keyword">const</span> <span class="keyword">int</span> nDataLen)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (::OpenClipboard(<span class="literal">NULL</span>))</span><br><span class="line">&#123;</span><br><span class="line">::EmptyClipboard();</span><br><span class="line">HGLOBAL clipbuffer;</span><br><span class="line"><span class="keyword">char</span> *buffer;</span><br><span class="line">clipbuffer = ::GlobalAlloc(GMEM_DDESHARE, nDataLen + <span class="number">1</span>);</span><br><span class="line">buffer = (<span class="keyword">char</span> *)::GlobalLock(clipbuffer);</span><br><span class="line"><span class="built_in">strcpy</span>(buffer, pszData);</span><br><span class="line">::GlobalUnlock(clipbuffer);</span><br><span class="line">::SetClipboardData(CF_TEXT, clipbuffer);</span><br><span class="line">::CloseClipboard();</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="调用脚本"><a href="#调用脚本" class="headerlink" title="调用脚本"></a>调用脚本</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> s[MAX_PATH];</span><br><span class="line">sprintf_s(s, <span class="string">"%s %s"</span>, <span class="string">"E:\\AutoUpload.bat"</span>, strNotes);</span><br><span class="line">system(s);</span><br></pre></td></tr></table></figure><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">E:</span><br><span class="line"><span class="built_in">cd</span> E:\<span class="built_in">test</span> @rem 此处是本地图床地址</span><br><span class="line">git add .</span><br><span class="line">git commit -m %1%</span><br><span class="line">git push</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><h2 id="url拼接"><a href="#url拼接" class="headerlink" title="url拼接"></a>url拼接</h2><p>本来这里应该有UrlEncode一步的，毕竟我所得到的url里有中文字，需要编码后才是真正所需的url。<br>比如我们现在拼接的地址是：<a href="https://github.com/hubojing/test/blob/master/动态分配所得的array.png?raw=true" target="_blank" rel="noopener">https://github.com/hubojing/test/blob/master/动态分配所得的array.png?raw=true</a><br>应得到：<a href="https://github.com/hubojing/test/blob/master/%E5%8A%A8%E6%80%81%E5%88%86%E9%85%8D%E6%89%80%E5%BE%97%E7%9A%84array.png?raw=true" target="_blank" rel="noopener">https://github.com/hubojing/test/blob/master/%E5%8A%A8%E6%80%81%E5%88%86%E9%85%8D%E6%89%80%E5%BE%97%E7%9A%84array.png?raw=true</a></p><p>然而我发现在浏览器里输入上面的网址，也能得到正确的图片，大概是github已经处理了该问题。<del>所以我就偷懒了</del></p><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ul><li>克隆项目到本地最好选择ssh方式下载，可以避免输入用户名密码。<br>第一次推送要用<code>git push -u origin master</code>，加了参数-u后，下次即可直接用<code>git push</code>代替<code>git push origin master</code>。</li></ul><h1 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h1><p><a href="https://github.com/hubojing/JingPic" target="_blank" rel="noopener">JingPic——github图床外链小工具</a></p><hr><p>再没有理由写文章不带图了o(一︿一+)o</p>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;left&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://github.com/hubojing/BlogImages/blob/master/JingPic%E2%80%94%E2%80%94github%E5%9B%BE%E5%BA%8A%E5%A4%96%E9%93%BE%E5%B0%8F%E5%B7%A5%E5%85%B7%E2%80%94%E2%80%94%E6%95%B4%E4%BD%93%E7%95%8C%E9%9D%A2.png?raw=true&quot; width=&quot;300&quot; height=&quot;180&quot; style=&quot;float:right;&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;　　&lt;strong&gt;针对写markdown文章贴图过程繁琐的问题，写了一个小工具自用。（C++版）&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt; &lt;/div&gt;
    
    </summary>
    
      <category term="互联网" scheme="https://hubojing.github.io/categories/%E4%BA%92%E8%81%94%E7%BD%91/"/>
    
    
      <category term="C++" scheme="https://hubojing.github.io/tags/C/"/>
    
      <category term="MFC" scheme="https://hubojing.github.io/tags/MFC/"/>
    
  </entry>
  
  <entry>
    <title>C++程序设计之兼谈对象模型</title>
    <link href="https://hubojing.github.io/2019/01/22/C-%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E4%B9%8B%E5%85%BC%E8%B0%88%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/"/>
    <id>https://hubojing.github.io/2019/01/22/C-程序设计之兼谈对象模型/</id>
    <published>2019-01-22T03:51:11.000Z</published>
    <updated>2019-02-23T13:35:04.000Z</updated>
    
    <content type="html"><![CDATA[<div align="left"><br><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1550344961406&di=3458256e6924d9242a5313858733a0ec&imgtype=0&src=http%3A%2F%2Fimage.bubuko.com%2Finfo%2F201808%2F20180822232018940216.png" width="300" height="180" style="float:right;"><br><br><br>　　<strong>C++ Programming(part II), and Object Model.</strong><br>　　<strong>侯捷</strong><br>　　<strong>笔记</strong><br><br><br> </div><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="应具备的基础"><a href="#应具备的基础" class="headerlink" title="应具备的基础"></a>应具备的基础</h2><ul><li>是上一篇博文“面向对象程序设计”的续集</li><li>本文将探讨上文未讨论的主题</li></ul><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>在先前培养正规、大器的编程素养上，继续探讨更多技术。</li><li>泛型编程(Generic Programming)和面向对象编程(Object-Oriented Programming)虽然分属不同思维，但它们正是C++的技术主线。本文也讨论template(模板)。</li><li>深入探索面向对象之继承关系(inheritance)所形成的对象模型(Object Model)，包括隐藏于底层的this指针，vptr指针（虚指针），vtbl(虚表)，virtual mechanism（虚机制），以及虚函数(virtual functions)造成的polymorphism（多态）效果。</li></ul><h2 id="将获得的代码"><a href="#将获得的代码" class="headerlink" title="将获得的代码"></a>将获得的代码</h2><p>Test-Cpp.cpp</p><h2 id="C-编译器"><a href="#C-编译器" class="headerlink" title="C++编译器"></a>C++编译器</h2><ul><li>编译(compile)</li><li>连接(link)</li></ul><h1 id="conversion-function-转换函数"><a href="#conversion-function-转换函数" class="headerlink" title="conversion function, 转换函数"></a>conversion function, 转换函数</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fraction</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Fraction(<span class="keyword">int</span> num, <span class="keyword">int</span> den=<span class="number">1</span>):m_numerator(num), m_denominator(den) &#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">operator</span> <span class="title">double</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">double</span>)(m_numerator / m_denominator)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_numerator;<span class="comment">//分子</span></span><br><span class="line">    <span class="keyword">int</span> m_denominator;<span class="comment">//分母</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>使用：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Fraction <span class="title">f</span><span class="params">(<span class="number">3</span>, <span class="number">5</span>)</span></span>;</span><br><span class="line"><span class="keyword">double</span> d = <span class="number">4</span> + f;<span class="comment">//调用operator double()将f转为0.6</span></span><br></pre></td></tr></table></figure></p><h1 id="non-explicit-one-argument-ctor"><a href="#non-explicit-one-argument-ctor" class="headerlink" title="non-explicit-one-argument ctor"></a>non-explicit-one-argument ctor</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fraction</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Fraction(<span class="keyword">int</span> num, <span class="keyword">int</span> den=<span class="number">1</span>):m_numerator(num), m_denominator(den) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    Fraction <span class="keyword">operator</span>+(<span class="keyword">const</span> Fraction&amp; f)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> Fraction(......);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_numerator;</span><br><span class="line">    <span class="keyword">int</span> m_denominator;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>使用：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Fraction <span class="title">f</span><span class="params">(<span class="number">3</span>, <span class="number">5</span>)</span></span>;</span><br><span class="line">Fraction d2 = f + <span class="number">4</span>;<span class="comment">//调用non-explicit ctor将4转为Fraction(4, 1)，然后调用operator+</span></span><br></pre></td></tr></table></figure></p><h2 id="conversion-function-vs-non-explicit-one-argument-ctor"><a href="#conversion-function-vs-non-explicit-one-argument-ctor" class="headerlink" title="conversion function vs. non-explicit-one-argument ctor"></a>conversion function vs. non-explicit-one-argument ctor</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fraction</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Fraction(<span class="keyword">int</span> num, <span class="keyword">int</span> den=<span class="number">1</span>):m_numerator(num), m_denominator(den) &#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">operator</span> <span class="title">double</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">double</span>) (m_numerator / m_denominator);</span><br><span class="line">    &#125;</span><br><span class="line">    Fraction <span class="keyword">operator</span>+(<span class="keyword">const</span> Fraction&amp; f)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> Fraction(......);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_numerator;</span><br><span class="line">    <span class="keyword">int</span> m_denominator;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>使用：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Fraction <span class="title">f</span><span class="params">(<span class="number">3</span>, <span class="number">5</span>)</span></span>;</span><br><span class="line">Fraction d2 = f + <span class="number">4</span>;<span class="comment">//[ERROR]ambiguous 二义</span></span><br></pre></td></tr></table></figure></p><h1 id="explicit-one-argument-ctor"><a href="#explicit-one-argument-ctor" class="headerlink" title="explicit-one-argument ctor"></a>explicit-one-argument ctor</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fraction</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    explicit Fraction(int num, int den=1):m_numerator(num), m_denominator(den) &#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">operator</span> <span class="title">double</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">double</span>) (m_numerator / m_denominator);</span><br><span class="line">    &#125;</span><br><span class="line">    Fraction <span class="keyword">operator</span>+(<span class="keyword">const</span> Fraction&amp; f)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> Fraction(......);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_numerator;</span><br><span class="line">    <span class="keyword">int</span> m_denominator;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>使用：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Fraction <span class="title">f</span><span class="params">(<span class="number">3</span>, <span class="number">5</span>)</span></span>;</span><br><span class="line">Fraction d2 = f + <span class="number">4</span>;<span class="comment">//[ERROR]conersion from 'double' to 'Fraction' requested</span></span><br></pre></td></tr></table></figure></p><p>conversion function, 转换函数<br><strong>proxy</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">vector</span>&lt;bool, Alloc&gt;</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">typedef</span> __bit_reference reference;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    reference <span class="keyword">operator</span>[] (size_type n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> *(begin() + difference_type(n));</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">bit_reference</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span>* p;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> mask;</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">operator</span> <span class="title">bool</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> !(!(*p &amp; mask)); &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h1 id="pointer-like-classes-关于智能指针"><a href="#pointer-like-classes-关于智能指针" class="headerlink" title="pointer-like classes, 关于智能指针"></a>pointer-like classes, 关于智能指针</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">shared_ptr</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    T&amp; <span class="keyword">operator</span>*() <span class="keyword">const</span></span><br><span class="line">    &#123;<span class="keyword">return</span> *px;&#125;</span><br><span class="line"></span><br><span class="line">    T* <span class="keyword">operator</span>-&gt;() <span class="keyword">const</span></span><br><span class="line">    &#123;<span class="keyword">return</span> px;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">shared_ptr</span>(T* p):px(p) &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T* px;</span><br><span class="line">    <span class="keyword">long</span>* pn;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>使用：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Foo</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;......&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">shared_ptr</span>&lt;Foo&gt; sp(<span class="keyword">new</span> Foo);</span><br><span class="line"></span><br><span class="line"><span class="function">Foo <span class="title">f</span><span class="params">(*sp)</span></span>;</span><br><span class="line"></span><br><span class="line">sp-&gt;method();</span><br></pre></td></tr></table></figure><p>相当于<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">px-&gt;method();</span><br></pre></td></tr></table></figure></p><h2 id="pointer-like-classes-关于迭代器"><a href="#pointer-like-classes-关于迭代器" class="headerlink" title="pointer-like classes, 关于迭代器"></a>pointer-like classes, 关于迭代器</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span> <span class="title">Ref</span>, <span class="title">class</span> <span class="title">Ptr</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> __<span class="title">list_iterator</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> __list_iterator&lt;T, Ref, Ptr&gt; self;</span><br><span class="line">    <span class="keyword">typedef</span> Ptr pointer;</span><br><span class="line">    <span class="keyword">typedef</span> Ref reference;</span><br><span class="line">    <span class="keyword">typedef</span> __list_node&lt;T&gt;* link_type;</span><br><span class="line">    link_type node;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> self&amp; x) <span class="keyword">const</span> &#123;<span class="keyword">return</span> node == x.node; &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> self&amp; x) <span class="keyword">const</span> &#123; <span class="keyword">return</span> node != x.node; &#125;</span><br><span class="line">    reference <span class="keyword">operator</span>*() <span class="keyword">const</span> &#123; <span class="keyword">return</span> &#123;*node&#125;.data; &#125;</span><br><span class="line">    pointer <span class="keyword">operator</span>-&gt;() <span class="keyword">const</span> &#123; <span class="keyword">return</span> &amp;(<span class="keyword">operator</span>*());&#125;</span><br><span class="line">    self&amp; <span class="keyword">operator</span>++() &#123; node = (link_type)((*node).next); <span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">    self <span class="keyword">operator</span>++(<span class="keyword">int</span>) &#123; self tmp = *<span class="keyword">this</span>; ++*<span class="keyword">this</span>; <span class="keyword">return</span> tmp;&#125;</span><br><span class="line">    self&amp; <span class="keyword">operator</span>--() &#123; node = (link_type)((*node).prev); <span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">    self <span class="keyword">operator</span>--(<span class="keyword">int</span>) &#123; self tmp = *<span class="keyword">this</span>; --*<span class="keyword">this</span>; <span class="keyword">return</span> tmp; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>使用：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>&lt;Foo&gt;::iterator ite;</span><br><span class="line">...</span><br><span class="line">*ite;<span class="comment">//获得一个Foo object</span></span><br><span class="line">ite-&gt;method();</span><br><span class="line"><span class="comment">//意思是调用Foo::method()</span></span><br><span class="line"><span class="comment">//相当于(*ite).method();</span></span><br><span class="line"><span class="comment">//相当于(&amp;(*ite))-&gt;method();</span></span><br></pre></td></tr></table></figure></p><h1 id="funciton-like-classes-所谓仿函数"><a href="#funciton-like-classes-所谓仿函数" class="headerlink" title="funciton-like classes, 所谓仿函数"></a>funciton-like classes, 所谓仿函数</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">identity</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">const</span> T&amp;</span><br><span class="line">    <span class="keyword">operator</span>() (<span class="keyword">const</span> T&amp; x) <span class="keyword">const</span> &#123; <span class="keyword">return</span> x; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Pair</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">select1st</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">typename</span> Pair::first_type&amp;</span><br><span class="line">    <span class="keyword">operator</span>() (<span class="keyword">const</span> Pair&amp; x) <span class="keyword">const</span></span><br><span class="line">    &#123; <span class="keyword">return</span> x.first; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Pair</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">select2nd</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">typename</span> Pair::second_type&amp;</span><br><span class="line">    <span class="keyword">operator</span>() (<span class="keyword">const</span> Pair&amp; x) <span class="keyword">const</span></span><br><span class="line">    &#123; <span class="keyword">return</span> x.second; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>, <span class="title">class</span> <span class="title">T2</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">pair</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    T1 first;</span><br><span class="line">    T2 second;</span><br><span class="line">    pair() : first(T1()), second(T2()) &#123;&#125;</span><br><span class="line">    pair(<span class="keyword">const</span> T1&amp; a, <span class="keyword">const</span> T2&amp; b): first(a), second(b) &#123;&#125;</span><br><span class="line">......</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="标准库中仿仿函数的奇特模样"><a href="#标准库中仿仿函数的奇特模样" class="headerlink" title="标准库中仿仿函数的奇特模样"></a>标准库中仿仿函数的奇特模样</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">identity</span> :</span> <span class="keyword">public</span> unary_function&lt;T, T&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">const</span> T&amp;</span><br><span class="line">    <span class="keyword">operator</span>() (<span class="keyword">const</span> T&amp; x) <span class="keyword">const</span> &#123; <span class="keyword">return</span> x; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Pair</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">select1st</span> :</span> <span class="keyword">public</span> unary_function&lt;Pair, <span class="keyword">typename</span> Pair::first_type&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">typename</span> Pair::first_type&amp;</span><br><span class="line">    <span class="keyword">operator</span>() (<span class="keyword">const</span> Pair&amp; x) <span class="keyword">const</span></span><br><span class="line">    &#123; <span class="keyword">return</span> x.first; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Pair</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">select2nd</span> :</span> <span class="keyword">public</span> unary_function&lt;Pair, <span class="keyword">typename</span> Pair::second_type&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">typename</span> Pair::second_type&amp;</span><br><span class="line">    <span class="keyword">operator</span>() (<span class="keyword">const</span> Pair&amp; x) <span class="keyword">const</span></span><br><span class="line">    &#123; <span class="keyword">return</span> x.second; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">plus</span> :</span> <span class="keyword">public</span> binary_function&lt;T, T, T&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">T <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> T&amp; x, <span class="keyword">const</span> T&amp; y)</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> x + y; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">minus</span> :</span> <span class="keyword">public</span> binary_function&lt;T, T, T&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">T <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> T&amp; x, <span class="keyword">const</span> T&amp; y)</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> x - y; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">equal_to</span> :</span> <span class="keyword">public</span> binary_function&lt;T, T, <span class="keyword">bool</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">T <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> T&amp; x, <span class="keyword">const</span> T&amp; y)</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> x == y; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">plus</span> :</span> <span class="keyword">public</span> binary_function&lt;T, T, <span class="keyword">bool</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">T <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> T&amp; x, <span class="keyword">const</span> T&amp; y)</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> x &lt; y; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="标准库中，仿函数所使用的奇特的base-classes"><a href="#标准库中，仿函数所使用的奇特的base-classes" class="headerlink" title="标准库中，仿函数所使用的奇特的base classes"></a>标准库中，仿函数所使用的奇特的base classes</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Arg</span>, <span class="title">class</span> <span class="title">Result</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">unary_function</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> Arg argument_type;</span><br><span class="line">    <span class="keyword">typedef</span> Result result_type;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Arg1</span>, <span class="title">class</span> <span class="title">Arg2</span>, <span class="title">class</span> <span class="title">Result</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">binary_function</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> Arg1 first_argument_type;</span><br><span class="line">    <span class="keyword">typedef</span> Arg2 second_argument_type;</span><br><span class="line">    <span class="keyword">typedef</span> Result result_type;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>less<int>::result_type-&gt;bool</int></p><h1 id="namespace经验谈"><a href="#namespace经验谈" class="headerlink" title="namespace经验谈"></a>namespace经验谈</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//-----------------------------------</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;memory&gt;//share_ptr</span></span></span><br><span class="line"><span class="keyword">namespace</span> jj01</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_member_template</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; ...... &#125;</span><br><span class="line">&#125;<span class="comment">//namespace</span></span><br><span class="line"><span class="comment">//-----------------------------------</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="keyword">namespace</span> jj02</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">using</span> Lst = <span class="built_in">list</span>&lt;T, allocator&lt;T&gt;&gt;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_template_template_param</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; ...... &#125;</span><br><span class="line">&#125;<span class="comment">//namespace</span></span><br><span class="line"><span class="comment">//-----------------------------------</span></span><br></pre></td></tr></table></figure><p>使用：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span></span><br><span class="line">jj01::test_member_template();</span><br><span class="line">jj02::test_template_template();</span><br></pre></td></tr></table></figure></p><h1 id="class-template-类模板"><a href="#class-template-类模板" class="headerlink" title="class template, 类模板"></a>class template, 类模板</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">complex</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">complex</span>(T r = <span class="number">0</span>, T i = <span class="number">0</span>)</span><br><span class="line">    : re(r), im(i)</span><br><span class="line">    &#123;&#125;</span><br><span class="line">    <span class="keyword">complex</span>&amp; <span class="keyword">operator</span> += (<span class="keyword">const</span> <span class="keyword">complex</span>&amp;);</span><br><span class="line">    <span class="function">T <span class="title">real</span> <span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> re; &#125;</span><br><span class="line">    <span class="function">T <span class="title">imag</span> <span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> im; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T re, im;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">complex</span>&amp; __doapl (<span class="keyword">complex</span>*, <span class="keyword">const</span> <span class="keyword">complex</span>&amp;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>使用：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">complex</span>&lt;<span class="keyword">double</span>&gt; c1(<span class="number">2.5</span>, <span class="number">1.5</span>);</span><br><span class="line">    <span class="keyword">complex</span>&lt;<span class="keyword">int</span>&gt; c2(<span class="number">2</span>, <span class="number">6</span>);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="function-template-函数模板"><a href="#function-template-函数模板" class="headerlink" title="function template, 函数模板"></a>function template, 函数模板</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stone r1(2, 3), r2(3, 3), r3;</span><br><span class="line">r3 = min(r1, r2);</span><br></pre></td></tr></table></figure><p>编译器会对function template进行实参推导(argument deduction)<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">const</span> <span class="title">T</span>&amp; <span class="title">min</span>(<span class="title">const</span> <span class="title">T</span>&amp; <span class="title">a</span>, <span class="title">const</span> <span class="title">T</span>&amp; <span class="title">b</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">return</span> b &lt; a ? b : a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>实参推导的结果，T为stone，于是调用stone::operator&lt;<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">stone</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    stone(<span class="keyword">int</span> w, <span class="keyword">int</span> h, <span class="keyword">int</span> we) </span><br><span class="line">    : _w(w), _h(h), _weight(we)</span><br><span class="line">    &#123; &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt; (<span class="keyword">const</span> stone&amp; rhs) <span class="keyword">const</span></span><br><span class="line">    &#123; <span class="keyword">return</span> _weight &lt; rhs._weight; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> _w, _h, _weight;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="member-template-成员函数"><a href="#member-template-成员函数" class="headerlink" title="member template, 成员函数"></a>member template, 成员函数</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>, <span class="title">class</span> <span class="title">T2</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">pair</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> T1 first_type;</span><br><span class="line">    <span class="keyword">typedef</span> T2 second_type;</span><br><span class="line"></span><br><span class="line">    T1 first;</span><br><span class="line">    T2 second;</span><br><span class="line"></span><br><span class="line">    pair()</span><br><span class="line">        : first(T1()), second(T2()) &#123;&#125;</span><br><span class="line">    pair(<span class="keyword">const</span> T1&amp; a, <span class="keyword">const</span> T2&amp; b)</span><br><span class="line">        : first(a), second(b) &#123;&#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">U1</span>, <span class="title">class</span> <span class="title">U2</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="title">pair</span>(<span class="title">const</span> <span class="title">pair</span>&lt;U1, U2&gt;&amp; <span class="title">p</span>)</span></span><br><span class="line"><span class="class">        :</span> first(p.first), second(p.second) &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base1</span>&#123;</span>&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived1</span>:</span><span class="keyword">public</span> Base1&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base2</span>&#123;</span>&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived2</span>:</span><span class="keyword">public</span> Base2&#123;&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pair&lt;Derived1, Derived2&gt;p;</span><br><span class="line">pair&lt;Base1, Base2&gt;p2(p);</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pair&lt;Base1, Base2&gt;p2(pair&lt;Derived1, Derived2&gt;());</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Tp&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">shared_ptr</span>:</span><span class="keyword">public</span> __shared_ptr&lt;_Tp&gt;</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Tp1&gt;</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">shared_ptr</span><span class="params">(_Tpl* __p)</span></span></span><br><span class="line">    :__shared_ptr&lt;_Tp&gt;(__p)&#123;&#125;</span><br><span class="line">...    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Base1* ptr = <span class="keyword">new</span> Derived1;<span class="comment">//up-cast</span></span><br><span class="line"><span class="built_in">shared_ptr</span>&lt;Base1&gt;sptr(<span class="keyword">new</span> Derived1);<span class="comment">//模拟up-cast</span></span><br></pre></td></tr></table></figure><h1 id="specialization-模板特化"><a href="#specialization-模板特化" class="headerlink" title="specialization, 模板特化"></a>specialization, 模板特化</h1><p>【注】特化反义词：泛化</p><p>泛化<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Key</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">hash</span>&#123;</span> &#125;;</span><br></pre></td></tr></table></figure></p><p>特化<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hash</span>&lt;char&gt;</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">size_t</span> <span class="keyword">operator</span>() (<span class="keyword">char</span> x) <span class="keyword">const</span> &#123; <span class="keyword">return</span> x; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hash</span>&lt;int&gt;</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">size_t</span> <span class="keyword">operator</span>() (<span class="keyword">int</span> x) <span class="keyword">const</span> &#123; <span class="keyword">return</span> x; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hash</span>&lt;long&gt;</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">size_t</span> <span class="keyword">operator</span>() (<span class="keyword">long</span> x) <span class="keyword">const</span> &#123; <span class="keyword">return</span> x; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>使用：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cout</span> &lt;&lt; hash&lt;<span class="keyword">long</span>&gt;() (<span class="number">1000</span>);</span><br></pre></td></tr></table></figure></p><p>泛化又叫full specialization，全泛化，对应偏特化。</p><h2 id="patial-specialization-模板偏特化——个数的偏"><a href="#patial-specialization-模板偏特化——个数的偏" class="headerlink" title="patial specialization, 模板偏特化——个数的偏"></a>patial specialization, 模板偏特化——个数的偏</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> Alloc=...&gt;</span><br><span class="line">class <span class="built_in">vector</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>绑定<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Alloc=...&gt;</span><br><span class="line">class <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>, Alloc&gt;</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure></p><h2 id="patial-specialization-模板偏特化——范围的偏"><a href="#patial-specialization-模板偏特化——范围的偏" class="headerlink" title="patial specialization, 模板偏特化——范围的偏"></a>patial specialization, 模板偏特化——范围的偏</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>【注】上下的T不是一个T<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>&lt;T*&gt;</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>这样写也可以<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> U&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>&lt;U*&gt;</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>使用：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C&lt;<span class="built_in">string</span>&gt; obj1;</span><br><span class="line">C&lt;<span class="built_in">string</span>*&gt; obj2;</span><br></pre></td></tr></table></figure></p><h1 id="template-template-parameter-模板模板参数"><a href="#template-template-parameter-模板模板参数" class="headerlink" title="template template parameter, 模板模板参数"></a>template template parameter, 模板模板参数</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, </span><br><span class="line">        <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">            <span class="class"><span class="keyword">class</span> <span class="title">Container</span></span></span><br><span class="line"><span class="class">        &gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">XCls</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Container&lt;T&gt; c;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ......</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">using</span> Lst = <span class="built_in">list</span>&lt;T, allocator&lt;T&gt;&gt;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">XCls&lt;<span class="built_in">string</span>, <span class="built_in">list</span>&gt; mylst1;<span class="comment">//错误</span></span><br><span class="line">XCls&lt;<span class="built_in">string</span>, Lst&gt; mylst2;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,</span><br><span class="line">            <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">                <span class="class"><span class="keyword">class</span> <span class="title">SmartPtr</span></span></span><br><span class="line"><span class="class">        &gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">XCls</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    SmartPtr&lt;T&gt; sp;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    XCls():sp(<span class="keyword">new</span> T) &#123; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">XCls&lt;<span class="built_in">string</span>, <span class="built_in">shared_ptr</span>&gt; p1;</span><br><span class="line">XCls&lt;<span class="built_in">string</span>, <span class="built_in">unique_ptr</span>&gt; p2;<span class="comment">//错误</span></span><br><span class="line">XCls&lt;<span class="keyword">int</span>, weak_ptr&gt; p3;<span class="comment">//错误</span></span><br><span class="line">XCls&lt;<span class="keyword">long</span>, <span class="built_in">auto_ptr</span>&gt; p4;</span><br></pre></td></tr></table></figure><h2 id="这不是template-template-parameter"><a href="#这不是template-template-parameter" class="headerlink" title="这不是template template parameter"></a>这不是template template parameter</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span> <span class="title">Sequence</span> = <span class="title">deque</span>&lt;T&gt;&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">stack</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>== &lt;&gt; (<span class="keyword">const</span> <span class="built_in">stack</span>&amp;, <span class="keyword">const</span> <span class="built_in">stack</span>&amp;);</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt; &lt;&gt; (<span class="keyword">const</span> <span class="built_in">stack</span>&amp;, <span class="keyword">const</span> <span class="built_in">stack</span>&amp;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    Sequence c;<span class="comment">//底层容器</span></span><br><span class="line">......</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>使用<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s1;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>, <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;&gt; s2;</span><br></pre></td></tr></table></figure></p><h1 id="关于C-标准库"><a href="#关于C-标准库" class="headerlink" title="关于C++标准库"></a>关于C++标准库</h1><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><h3 id="Sequence-containers"><a href="#Sequence-containers" class="headerlink" title="Sequence containers"></a>Sequence containers</h3><p>array<br>vector<br>deque<br>forward_list<br>list</p><h3 id="Container-adaptors"><a href="#Container-adaptors" class="headerlink" title="Container adaptors"></a>Container adaptors</h3><p>stack<br>queue<br>priority_queue</p><h3 id="Associative-containers"><a href="#Associative-containers" class="headerlink" title="Associative containers"></a>Associative containers</h3><p>set<br>multiset<br>map<br>multimap</p><h3 id="Unordered-associative-con"><a href="#Unordered-associative-con" class="headerlink" title="Unordered associative con"></a>Unordered associative con</h3><p>unordered_set<br>unordered_multiset<br>unordered_map<br>unordered_multimap</p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>…</p><h3 id="Sorting"><a href="#Sorting" class="headerlink" title="Sorting"></a>Sorting</h3><p>sort<br>stable_sort<br>partial_sort<br>partial_sort_copy<br>is_sorted<br>is_sorted_until<br>nth_element</p><h3 id="Binary-search"><a href="#Binary-search" class="headerlink" title="Binary search"></a>Binary search</h3><p>lower_bound<br>upper_bound<br>equal_range<br>binary_search</p><h3 id="Merge"><a href="#Merge" class="headerlink" title="Merge"></a>Merge</h3><p>merge<br>inplace_merge<br>includes<br>set_union<br>set_intersection<br>set_difference<br>set_symmetric_difference</p><p>…</p><p>推书：Algorithms + Data Structures = Programs(Niklaus Wirth)</p><p>确认支持C++11： macro __cplusplus<br>测试：<br>VS2012<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"stdafx.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;__cplusplus&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Dev-C++ 5<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;__cplusplus;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果是199711，则不支持C++11，需修改编译器<br>如果是201103，则支持C++11</p><h1 id="variadic-templates-since-C-11-数量不定的模板参数"><a href="#variadic-templates-since-C-11-数量不定的模板参数" class="headerlink" title="variadic templates(since C++11) 数量不定的模板参数"></a>variadic templates(since C++11) 数量不定的模板参数</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Types&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">const</span> T&amp; firstArg, <span class="keyword">const</span> Type&amp;... args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;firstArg&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    print(args...);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Inside variadic templates, sizeof…(arg) yields the number of arguments</p><p>…就是一个所谓的pack(包)<br>用于template parameters, 就是template parameters pack(模板参数包)<br>用于function parameter types, 就是function parameter types pack(函数参数类型包)<br>用于function parameters, 就是function parameters pack(函数参数包)</p><p>使用：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="number">7.5</span>, <span class="string">"hello"</span>, <span class="built_in">bitset</span>&lt;<span class="number">16</span>&gt;(<span class="number">377</span>), <span class="number">42</span>);</span><br></pre></td></tr></table></figure></p><p>结果：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7.5</span></span><br><span class="line">hello</span><br><span class="line"><span class="number">0000000101111001</span></span><br><span class="line"><span class="number">42</span></span><br></pre></td></tr></table></figure></p><h1 id="auto-since-C-11"><a href="#auto-since-C-11" class="headerlink" title="auto(since C++11)"></a>auto(since C++11)</h1><p>过去：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>&lt;<span class="built_in">string</span>&gt; c;</span><br><span class="line">...</span><br><span class="line"><span class="built_in">list</span>&lt;<span class="built_in">string</span>&gt;::iterator ite;</span><br><span class="line">ite = find(c.begin(), c.end(), target);</span><br></pre></td></tr></table></figure></p><p>现在：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>&lt;<span class="built_in">string</span>&gt; c;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">auto</span> ite = find(c.begin(), c.end(), target);</span><br></pre></td></tr></table></figure></p><p>错误：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>&lt;<span class="built_in">string</span>&gt; c;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">auto</span> ite;<span class="comment">//错误</span></span><br><span class="line">ite = find(c.begin(), c.end(), target);</span><br></pre></td></tr></table></figure></p><h1 id="ranged-base-for-since-C-11"><a href="#ranged-base-for-since-C-11" class="headerlink" title="ranged-base for(since C++11)"></a>ranged-base for(since C++11)</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(decl : coll)</span><br><span class="line">&#123;</span><br><span class="line">    statement</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i : &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>&#125;)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; vec;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> elem : vec)<span class="comment">//pass by value</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; elem &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span>&amp; elem : vec)<span class="comment">// pass by reference</span></span><br><span class="line">&#123;</span><br><span class="line">    elem *= <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span>* p = &amp;x;</span><br><span class="line"><span class="keyword">int</span>&amp; r = x;<span class="comment">//r代表x。现在r,x都是0</span></span><br><span class="line"><span class="keyword">int</span> x2 = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">r = x2;<span class="comment">//r不能重新代表其他物体。现在r,x都是5</span></span><br><span class="line"><span class="keyword">int</span>&amp; r2 = r;<span class="comment">//现在r2是5(r2代表r:亦相当于代表x)</span></span><br></pre></td></tr></table></figure><p>从内存上看，<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/C++程序设计之兼谈对象模型——reference.png?raw=true" alt="从内存上看" title="">                </div>                <div class="image-caption">从内存上看</div>            </figure></p><p>注意：</p><ol><li>sizeof(r) == sizeof(x)</li><li>&amp;x = &r;</li></ol><p>object和其reference的大小相同，地址也相同（全都是假象）<br>Java里头所有变量都是reference</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Stag</span>&#123;</span><span class="keyword">int</span> a, b, c, d;&#125; S;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">double</span>* p = &amp;x;<span class="comment">//p指向x，p的值是x的地址</span></span><br><span class="line">    <span class="keyword">double</span>&amp; r = x;<span class="comment">//r代表x,现在r,x都是0</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(x) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//8</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(p) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//4</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(r) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//8</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; p &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//0065FDFC</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//0</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//0</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; r &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//0</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; &amp;x &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//0065FDFC</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; &amp;r &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//0065FDFC</span></span><br><span class="line"></span><br><span class="line">    S s;</span><br><span class="line">    S&amp; rs = s;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(s) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//16</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(rs) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//16</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; &amp;s &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//0065FDE8</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; &amp;rs &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//0065FDE8</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>object和其reference的大小相同，地址也相同（全都是假象）</p><h2 id="reference的常见用途"><a href="#reference的常见用途" class="headerlink" title="reference的常见用途"></a>reference的常见用途</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func1</span><span class="params">(Cls* pobj)</span> </span>&#123;pobj-&gt;xxx();&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func2</span><span class="params">(Cls obj)</span> </span>&#123;obj.xxx();&#125;<span class="comment">////被调用端 写法相同，很好</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func3</span><span class="params">(Cls&amp; obj)</span> </span>&#123;obj.xxx();&#125;<span class="comment">//被调用端 写法相同，很好</span></span><br><span class="line">......</span><br><span class="line">Cls obj;</span><br><span class="line">func1(&amp;obj);<span class="comment">//接口不同，困扰</span></span><br><span class="line">fun2(obj);<span class="comment">//调用端接口相同，很好</span></span><br><span class="line">func3(obj);<span class="comment">//调用端接口相同，很好</span></span><br></pre></td></tr></table></figure><p>reference通常不用于声明变量，而用于参数类型(parameters type)和返回类型(return type)的描述。</p><p>以下被视为”same signature”(所以二者不能同时存在)：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">imag</span><span class="params">(<span class="keyword">const</span> <span class="keyword">double</span>&amp; im)</span> </span>&#123;...&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">imag</span><span class="params">(<span class="keyword">const</span> <span class="keyword">double</span> im)</span> </span>&#123;...&#125;  <span class="comment">//Ambiguity</span></span><br></pre></td></tr></table></figure></p><p>【注】imag(const double&amp; im)为signature, 不含return type.<br>imag(const double&amp; im)后面可以加const, const是函数签名的一部分。<br>所以imag(const double&amp; im)和imag(const double&amp; im) const两个函数可以并存。</p><h1 id="对象模型-Object-Model-关于vptr-和-vtbl"><a href="#对象模型-Object-Model-关于vptr-和-vtbl" class="headerlink" title="对象模型(Object Model):关于vptr 和 vtbl"></a>对象模型(Object Model):关于vptr 和 vtbl</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">vfunc1</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">vfunc2</span><span class="params">()</span></span>;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span></span>;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">func2</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_data1, m_data2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span><span class="keyword">public</span> A</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">vfunc1</span><span class="params">()</span></span>;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">func2</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_data3;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span><span class="keyword">public</span> B</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">vfunc1</span><span class="params">()</span></span>;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">func2</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_data1 m_data4;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/C++程序设计之兼谈对象模型——关于vptr和vtbl.png?raw=true" alt="从内存上看" title="">                </div>                <div class="image-caption">从内存上看</div>            </figure><h1 id="对象模型-Object-Model-关于this"><a href="#对象模型-Object-Model-关于this" class="headerlink" title="对象模型(Object Model):关于this"></a>对象模型(Object Model):关于this</h1><p><strong>Template Method</strong><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/C++程序设计之兼谈对象模型——关于this.png?raw=true" alt="关于this" title="">                </div>                <div class="image-caption">关于this</div>            </figure></p><h1 id="再谈const"><a href="#再谈const" class="headerlink" title="再谈const"></a>再谈const</h1><p>　　　　　　　　const object(data members不得变动)　　non-const object(data members可变动)<br>const member functions<br>(保证不更改data members)　　　　　　　　　　　√　　　　　　　　　　　　　　　　√<br>non-const member functions<br>(不保证data members不变)　　　　　　　　　　　×　　　　　　　　　　　　　　　　√</p><p>当成员函数的const和non-const版本同时存在，const object只会（只能）调用const版本，non-const object只会（只能）调用non-const版本。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">const</span> String <span class="title">str</span><span class="params">(<span class="string">"hello world"</span>)</span></span>;</span><br><span class="line">str.print();</span><br></pre></td></tr></table></figure><p>如果当初设计string::print()时未指明const，那么上行便是经由const object调用non-const member function，会出错。此非所愿。</p><p>non-const member functions可调用const member functions，反之则不行，会引发：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(VC)error C2662:cannot convert 'this' pointer from 'const class X' to 'class X &amp;'.Conversion loses qualifiers</span><br></pre></td></tr></table></figure></p><p>class template std::basic_string&lt;…&gt;有如下两个member functions:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">charT</span><br><span class="line"><span class="keyword">operator</span>[](size_type pos) <span class="keyword">const</span></span><br><span class="line">&#123;......<span class="comment">/*不必考虑COW*/</span>&#125;</span><br><span class="line"></span><br><span class="line">reference</span><br><span class="line"><span class="keyword">operator</span>[](size_type pos)</span><br><span class="line">&#123;......<span class="comment">/*必须考虑COW*/</span>&#125;</span><br></pre></td></tr></table></figure></p><p>COW:Copy On Write</p><h1 id="对象模型-Object-Model-关于Dynamic-Binding"><a href="#对象模型-Object-Model-关于Dynamic-Binding" class="headerlink" title="对象模型(Object Model):关于Dynamic Binding"></a>对象模型(Object Model):关于Dynamic Binding</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/C++程序设计之兼谈对象模型——静态绑定.png?raw=true" alt="静态绑定" title="">                </div>                <div class="image-caption">静态绑定</div>            </figure><p>动态绑定三个条件：</p><ol><li>通过指针</li><li>虚函数</li><li>向上转型</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/C++程序设计之兼谈对象模型——动态绑定.png?raw=true" alt="动态绑定" title="">                </div>                <div class="image-caption">动态绑定</div>            </figure><h1 id="再谈new和delete"><a href="#再谈new和delete" class="headerlink" title="再谈new和delete"></a>再谈new和delete</h1><h2 id="operator-new-operator-delete-operator-new-operator-delete"><a href="#operator-new-operator-delete-operator-new-operator-delete" class="headerlink" title="::operator new, ::operator delete, ::operator new[], ::operator delete[]"></a>::operator new, ::operator delete, ::operator new[], ::operator delete[]</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/C++程序设计之兼谈对象模型——new&delete.png?raw=true" alt="new&delete" title="">                </div>                <div class="image-caption">new&delete</div>            </figure><h2 id="重载member-operator-new-delete"><a href="#重载member-operator-new-delete" class="headerlink" title="重载member operator new/delete"></a>重载member operator new/delete</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/C++程序设计之兼谈对象模型——重载.png?raw=true" alt="重载member operator new/delete" title="">                </div>                <div class="image-caption">重载member operator new/delete</div>            </figure><h2 id="重载member-operator-new-delete-1"><a href="#重载member-operator-new-delete-1" class="headerlink" title="重载member operator new[]/delete[]"></a>重载member operator new[]/delete[]</h2><p>和上图的区别在于多了一个[]<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">void</span>* <span class="keyword">operator</span> <span class="keyword">new</span>[](<span class="keyword">size_t</span>);</span><br><span class="line">    <span class="keyword">void</span> <span class="keyword">operator</span> <span class="keyword">delete</span>[](<span class="keyword">void</span>*, <span class="keyword">size_t</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="示例，-接口"><a href="#示例，-接口" class="headerlink" title="示例， 接口"></a>示例， 接口</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/C++程序设计之兼谈对象模型——示例.png?raw=true" alt="示例" title="">                </div>                <div class="image-caption">示例</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/C++程序设计之兼谈对象模型——示例2.png?raw=true" alt="示例2" title="">                </div>                <div class="image-caption">示例2</div>            </figure><p>int 4字节，long 4字节，string（里面是个指针）4字节<br>有虚函数就多一个指针（12+4=16）</p><p>Foo[5] 数组，有5个，12*5=60，第一个记录有5个元素，这个记录的size为4，60+4=64<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/C++程序设计之兼谈对象模型——示例3.png?raw=true" alt="示例3" title="">                </div>                <div class="image-caption">示例3</div>            </figure></p><h2 id="重载new-delete"><a href="#重载new-delete" class="headerlink" title="重载new(), delete()"></a>重载new(), delete()</h2><p>我们可以重载class member operator new(),写出多个版本，前提是每一个版本的声明都必须有独特的参数列，其中第一参数必须是size_t，其余参数以new所指定的placement arguments为初值。出现于new(……)小括号内的便是所谓placement arguments。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Foo* pf = <span class="keyword">new</span>(<span class="number">300</span>, <span class="string">'c'</span>) Foo;</span><br></pre></td></tr></table></figure><p>我们也可以重载class member operator delete()（或称此为placement operator delete），写出多个版本，但它们绝不会被delete调用。只有当new所调用的ctor抛出exception，才会调用这些重载版的operator delete()。它只可能这样被调用，主要用来归还未能完全创建成功的object所占用的memory。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Foo()&#123;<span class="built_in">cout</span>&lt;&lt;<span class="string">"Foo::Foo()"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">    Foo(<span class="keyword">int</span>)&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">"Foo::Foo(int)"</span> &lt;&lt; <span class="built_in">endl</span>; <span class="keyword">throw</span> Bad();&#125;<span class="comment">//class Bad&#123;&#125;;</span></span><br><span class="line">    <span class="comment">//故意在这儿抛出exception，测试placement operator delete.s</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//(1)这里就是一般的operator new()的重载</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="keyword">size_t</span> size)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">malloc</span>(size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//(2)这个就是标准库已提供的placement new()的重载（的形式），（所以此处也模拟standard placement new,就只是传回pointer）</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="keyword">size_t</span> size, <span class="keyword">void</span>* start)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> start;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//(3)这个才是崭新的palcement new</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="keyword">size_t</span> size, <span class="keyword">long</span> extra)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">malloc</span>(size+extra);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//(4)这又是一个placement new</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="keyword">size_t</span> size, <span class="keyword">long</span> extra, <span class="keyword">char</span> init)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">malloc</span>(size+extra);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//(5)这又是一个placement new, 但故意写错第一参数的type（那必须是size_t以符合正常的operator new）</span></span><br><span class="line">    <span class="comment">//void* operator new(long extra, char init)</span></span><br><span class="line">    <span class="comment">//&#123;</span></span><br><span class="line">    <span class="comment">//    [Error]'Operator new' takes type 'size_t'('unsigned int') as first parameter[-fpermissive]</span></span><br><span class="line">    <span class="comment">//    return malloc(extra);</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//以下是搭配上述placement new的各个所谓placement delete.</span></span><br><span class="line">    <span class="comment">//当ctor发出异常，这儿对应的operator(placement) delete就会被调用.</span></span><br><span class="line">    <span class="comment">//其用于是释放对应之placement new分配所得的memory.</span></span><br><span class="line">    <span class="comment">//(1)这儿就是一般的operator delete()的重载</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="keyword">void</span>*,<span class="keyword">size_t</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">"operator delete(void*, size_t)"</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//(2)这是对应的(2)</span></span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="keyword">void</span>*,<span class="keyword">void</span>*)</span></span></span><br><span class="line"><span class="function">    </span>&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">"operator delete(void*, void*)"</span> &lt;&lt; <span class="built_in">endl</span>;&#125;  </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//(3)这是对应的(3)</span></span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="keyword">void</span>*, <span class="keyword">long</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">"operator delete(void*, long)"</span> &lt;&lt; <span class="built_in">endl</span>;&#125;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">//(4)这是对应的(4)</span></span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="keyword">void</span>*, <span class="keyword">long</span>, <span class="keyword">char</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">"operator delete(void*, long, char)"</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_i;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>测试代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Foo start;</span><br><span class="line">Foo* p1 = <span class="keyword">new</span> Foo;</span><br><span class="line">Foo* p2 = <span class="keyword">new</span>(&amp;start) Foo;</span><br><span class="line">Foo* p3 = <span class="keyword">new</span>(<span class="number">100</span>) Foo;</span><br><span class="line">Foo* p4 = <span class="keyword">new</span>(<span class="number">100</span>,<span class="string">'a'</span>) Foo;</span><br><span class="line">Foo* p5 = <span class="keyword">new</span>(<span class="number">100</span>) Foo(<span class="number">1</span>);<span class="comment">//ctor抛出异常</span></span><br><span class="line">Foo* p6 = <span class="keyword">new</span>(<span class="number">100</span>,<span class="string">'a'</span>) Foo(<span class="number">1</span>);</span><br><span class="line">Foo* p7 = <span class="keyword">new</span>(&amp;start) Foo(<span class="number">1</span>);</span><br><span class="line">Foo* p8 = <span class="keyword">new</span> Foo(<span class="number">1</span>);</span><br></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/C++程序设计之兼谈对象模型——test.png?raw=true" alt="test" title="">                </div>                <div class="image-caption">test</div>            </figure><p>ctor抛出异常，但G4.9没调用operator delete(void*, long),但G2.9确实调用了。</p><p>即使operator delete(…)未能一一对应于operator new(…)，也不会出现任何报错。意思是：放弃处理ctor发出的异常。</p><h2 id="basic-string使用new-extra-扩充申请量"><a href="#basic-string使用new-extra-扩充申请量" class="headerlink" title="basic_string使用new(extra)扩充申请量"></a>basic_string使用new(extra)扩充申请量</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/C++程序设计之兼谈对象模型——basic_string.png?raw=true" alt="basic_string使用new(extra)扩充申请量" title="">                </div>                <div class="image-caption">basic_string使用new(extra)扩充申请量</div>            </figure>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;left&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1550344961406&amp;di=3458256e6924d9242a5313858733a0ec&amp;imgtype=0&amp;src=http%3A%2F%2Fimage.bubuko.com%2Finfo%2F201808%2F20180822232018940216.png&quot; width=&quot;300&quot; height=&quot;180&quot; style=&quot;float:right;&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;　　&lt;strong&gt;C++ Programming(part II), and Object Model.&lt;/strong&gt;&lt;br&gt;　　&lt;strong&gt;侯捷&lt;/strong&gt;&lt;br&gt;　　&lt;strong&gt;笔记&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt; &lt;/div&gt;
    
    </summary>
    
      <category term="互联网" scheme="https://hubojing.github.io/categories/%E4%BA%92%E8%81%94%E7%BD%91/"/>
    
    
      <category term="CPP" scheme="https://hubojing.github.io/tags/CPP/"/>
    
  </entry>
  
  <entry>
    <title>Django博客demo</title>
    <link href="https://hubojing.github.io/2019/01/11/django%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://hubojing.github.io/2019/01/11/django搭建博客/</id>
    <published>2019-01-11T10:19:51.000Z</published>
    <updated>2019-01-13T13:49:37.000Z</updated>
    
    <content type="html"><![CDATA[<div align="left"><br><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1547395242880&di=51c657b409cc95bb168dde1d33880538&imgtype=0&src=http%3A%2F%2F5b0988e595225.cdn.sohucs.com%2Fimages%2F20171129%2F35c49523c50843f3ba22b8bc246c5d42.jpeg" width="300" height="180" style="float:right;"><br><br><br>　　<strong>Django-blog-demo笔记。</strong><br><br><br> </div><a id="more"></a><h1 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h1><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>　　python 3.7<br>　　Django 2.1.5<br>　　pycharm</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>　　cmd里敲：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install Django==2.1.5</span><br></pre></td></tr></table></figure></p><h1 id="创建项目和应用"><a href="#创建项目和应用" class="headerlink" title="创建项目和应用"></a>创建项目和应用</h1><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>　　在预想安装博客目录下计入cmd，敲：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">django-admin startproject myblog</span><br></pre></td></tr></table></figure></p><p>　　对应目录下生成一个myblog文件夹。</p><p>　　manage.py:与项目进行交互的命令行工具集的入口<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py</span><br></pre></td></tr></table></figure></p><p>　　查看所有命令。</p><p>　　启动命令：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver</span><br></pre></td></tr></table></figure></p><p>　　浏览器127.0.0.1:8000查看效果。</p><p>　　改端口号：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver <span class="number">8888</span></span><br></pre></td></tr></table></figure></p><h2 id="myblog目录"><a href="#myblog目录" class="headerlink" title="myblog目录"></a>myblog目录</h2><p>　　myblog<br>　　|–__init__.py<br>　　|–settings.py<br>　　|–urls.py<br>　　|–wsgi.py<br>　　manage.py</p><p>　　wsgi.py<br>　　WSGI(Python Web Server Gateway Interface)   Python服务器网关接口<br>　　Python应用与Web服务器之间的接口</p><p>　　urls.py<br>　　URL配置文件</p><p>　　settings.py<br>　　项目总配置文件，包含数据库、Web应用、时间等各种配置</p><p>　　__init__.py<br>　　内容默认为空</p><h2 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h2><p>　　打开命令行，进入manage.py同级目录<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py startapp blog</span><br></pre></td></tr></table></figure></p><p>　　会多一个blog文件夹。<br>　　添加应用名到settings.py中的INSTALLED_APPS里<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">    <span class="string">'blog'</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h2 id="blog目录"><a href="#blog目录" class="headerlink" title="blog目录"></a>blog目录</h2><p>　　blog<br>　　|–migrations<br>　　|—-__init__.py<br>　　|–__init__.py<br>　　|–admin.py<br>　　|–apps.py<br>　　|–models.py<br>　　|–tests.py<br>　　|–views.py</p><p>　　migrations 数据移植（迁移）模块，内容自动生成</p><p>　　admin.py    该应用的后台管理系统配置<br>　　apps.py 应用配置（Django-1.9以后自动生成）<br>　　models.py   数据模块，使用ORM框架，类似于MVC结构中的Models(模型)<br>　　test.py 自动化测试模块，在此编写测试脚本（语句）<br>　　views.py    执行响应的代码所在模块，代码逻辑处理地（项目大部分代码在此）</p><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>　　打开view.py，输入<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'Hello World!'</span>)</span><br></pre></td></tr></table></figure></p><p>　　即编辑blog.views<br>　　每个相应对应一个函数，函数必须返回一个响应<br>　　函数必须存在一个参数，一般约定为request<br>　　每个相应（函数）对应一个URL</p><p>在urls.py中，输入<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> blog.views <span class="keyword">as</span> bv</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">'index/'</span>, bv.index),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>　　即编辑urls.py<br>　　url函数放在urlpatterns列表中<br>　　url函数三个参数：URL(正则)，对应方法，名称</p><p>　　运行，输入地址<a href="http://localhost:8000/index/" target="_blank" rel="noopener">http://localhost:8000/index/</a> 即可。</p><h2 id="第二种URL配置"><a href="#第二种URL配置" class="headerlink" title="第二种URL配置"></a>第二种URL配置</h2><p>　　如果页面很多，都写在根urls.py中就很乱。于是，在根urls.py中引入include，在APP目录下创建urls.py文件，格式与根urls.py相同。</p><p>　　更改后：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path,include</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> blog.views <span class="keyword">as</span> bv</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">'index/'</span>, include(<span class="string">'blog.urls'</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>　　新blog.urls.py<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">''</span>, views.index),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h1 id="Templates"><a href="#Templates" class="headerlink" title="Templates"></a>Templates</h1><p>　　HTML文件使用了Django模板语言（Django Template Language, DTL）</p><h2 id="开发第一个Template"><a href="#开发第一个Template" class="headerlink" title="开发第一个Template"></a>开发第一个Template</h2><ul><li>在APP的<strong>根目录</strong>下创建名叫Templates的目录</li><li>在该目录下创建HTML文件</li><li>在views.py中返回<code>render()</code></li></ul><p>　　html中敲入：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello blog!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>　　修改views.py为：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'index.html'</span>)</span><br></pre></td></tr></table></figure></p><p>　　运行查看效果。</p><h2 id="DTL初步使用"><a href="#DTL初步使用" class="headerlink" title="DTL初步使用"></a>DTL初步使用</h2><p>　　<code>render()</code>函数中支持一个dict类型参数<br>　　该字典是后台传递到模板的参数，键为参数名<br>　　在模板中使用<code></code>来直接使用</p><p>　　修改views.py<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">return</span> render(request,<span class="string">'index.html'</span>,&#123;<span class="string">'hello'</span>:<span class="string">'Hello blog!'</span>&#125;)</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>　　修改html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;hello&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>　　运行查看效果。</p><h1 id="Models"><a href="#Models" class="headerlink" title="Models"></a>Models</h1><p>　　通常，一个Model对应数据库的一张数据表<br>　　Django中Models以类的形式表现<br>　　它包含了一些基本字段以及数据的一些行为</p><h2 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h2><p>　　对象关系映射（Object Relation Mapping）<br>　　实现了对象和数据库之间的映射<br>　　隐藏了数据访问的细节，不需要编写SQL语句</p><h2 id="编写Models"><a href="#编写Models" class="headerlink" title="编写Models"></a>编写Models</h2><ul><li>在应用根目录下创建models.py，并引入models模块</li><li>创建类，继承models.Model，该类即是一张数据表</li><li>在类中创建字段</li></ul><h3 id="字段创建"><a href="#字段创建" class="headerlink" title="字段创建"></a>字段创建</h3><p>　　字段即类里面的属性（变量）<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">attr = models.CharField(max_length = <span class="number">64</span>)</span><br></pre></td></tr></table></figure></p><h3 id="生成数据表"><a href="#生成数据表" class="headerlink" title="生成数据表"></a>生成数据表</h3><p>　　命令行中进入manage.py同级目录<br>　　执行命令<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations app名（可选）</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure></p><p>　　不加app名默认给所有app进行数据迁移。</p><p>　　cmd将显示：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">E:\PythonCode\myblog&gt;python manage.py makemigrations</span><br><span class="line">Migrations <span class="keyword">for</span> <span class="string">'blog'</span>:</span><br><span class="line">  blog\migrations\0001_initial.py</span><br><span class="line">    - Create model Article</span><br><span class="line"></span><br><span class="line">E:\PythonCode\myblog&gt;python manage.py migrate</span><br><span class="line">Operations to perform:</span><br><span class="line">  Apply all migrations: admin, auth, blog, contenttypes, sessions</span><br><span class="line">Running migrations:</span><br><span class="line">  Applying contenttypes.0001_initial... OK</span><br><span class="line">  Applying auth.0001_initial... OK</span><br><span class="line">  Applying admin.0001_initial... OK</span><br><span class="line">  Applying admin.0002_logentry_remove_auto_add... OK</span><br><span class="line">  Applying admin.0003_logentry_add_action_flag_choices... OK</span><br><span class="line">  Applying contenttypes.0002_remove_content_type_name... OK</span><br><span class="line">  Applying auth.0002_alter_permission_name_max_length... OK</span><br><span class="line">  Applying auth.0003_alter_user_email_max_length... OK</span><br><span class="line">  Applying auth.0004_alter_user_username_opts... OK</span><br><span class="line">  Applying auth.0005_alter_user_last_login_null... OK</span><br><span class="line">  Applying auth.0006_require_contenttypes_0002... OK</span><br><span class="line">  Applying auth.0007_alter_validators_add_error_messages... OK</span><br><span class="line">  Applying auth.0008_alter_user_username_max_length... OK</span><br><span class="line">  Applying auth.0009_alter_user_last_name_max_length... OK</span><br><span class="line">  Applying blog.0001_initial... OK</span><br><span class="line">  Applying sessions.0001_initial... OK</span><br></pre></td></tr></table></figure></p><h3 id="生成数据表-1"><a href="#生成数据表-1" class="headerlink" title="生成数据表"></a>生成数据表</h3><p>　　查看<br>　　Django会自动在app/migrations/目录下生成移植文件<br>　　执行命令查看SQL语句<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py sqlmigrate 应用名 文件id</span><br></pre></td></tr></table></figure></p><p>　　cmd将显示：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">E:\PythonCode\myblog&gt;python manage.py sqlmigrate blog 0001</span><br><span class="line">BEGIN;</span><br><span class="line">--</span><br><span class="line">-- Create model Article</span><br><span class="line">--</span><br><span class="line">CREATE TABLE <span class="string">"blog_article"</span> (<span class="string">"id"</span> <span class="built_in">integer</span> NOT NULL PRIMARY KEY AUTOINCREMENT, <span class="string">"title"</span> varchar(32) NOT NULL, <span class="string">"content"</span> text NULL);</span><br><span class="line">COMMIT;</span><br></pre></td></tr></table></figure></p><p>　　默认sqlite3的数据库在项目根目录下db.sqlite3<br>　　查看并编辑db.sqlite3，使用第三方软件，如SQLite Expert Personal</p><h3 id="页面呈现数据"><a href="#页面呈现数据" class="headerlink" title="页面呈现数据"></a>页面呈现数据</h3><h4 id="后台步骤"><a href="#后台步骤" class="headerlink" title="后台步骤"></a>后台步骤</h4><p>　　views.py中import models<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">article = models.Article.objects.get(pk = <span class="number">1</span>)</span><br><span class="line">render(request, page, &#123;<span class="string">'article'</span>:article&#125;)</span><br></pre></td></tr></table></figure></p><h4 id="后端步骤"><a href="#后端步骤" class="headerlink" title="后端步骤"></a>后端步骤</h4><p>　　模板可直接使用对象以及对象的“.”操作<br><code></code></p><p>　　修改html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;article.title&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;article.content&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>　　运行，查看<a href="http://localhost:8000/index/" target="_blank" rel="noopener">http://localhost:8000/index/</a></p><h1 id="Admin"><a href="#Admin" class="headerlink" title="Admin"></a>Admin</h1><p>Django自带的一个功能强大的自动化数据管理界面<br>被授权的用户可直接在Admin中管理数据库<br>Django提供了许多针对Admin的定制功能</p><h2 id="配置Admin"><a href="#配置Admin" class="headerlink" title="配置Admin"></a>配置Admin</h2><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><p>创建超级用户<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py createsuperuser</span><br></pre></td></tr></table></figure></p><p>之后要求输入用户名<br>邮箱<br>密码</p><p>Admin入口访问地址：localhost:8000/admin/</p><p>如需修改成中文版，修改settings.py中LANGUAGE_CODE = ‘zh_Hans’<br>（英文：LANGUAGE_CODE = ‘en-us’）</p><h3 id="配置应用"><a href="#配置应用" class="headerlink" title="配置应用"></a>配置应用</h3><p>在应用下admin.py中引入自身的models模块（或里面的模型类）<br>编辑admin.py<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Article</span><br><span class="line">admin.site.register(models.Article)</span><br></pre></td></tr></table></figure></p><h3 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h3><p>点击Article超链接进入Article列表页面，按页面指示修改。</p><h4 id="修改数据默认显示名称"><a href="#修改数据默认显示名称" class="headerlink" title="修改数据默认显示名称"></a>修改数据默认显示名称</h4><p>每条都显示的Article object，很不方便，显示文章标题比较好。</p><ul><li>在Article类下添加一个方法</li><li>根据Python版本选择<strong>str</strong>(self) (python3以上)或<strong>unicode</strong>(self) （python2.7）</li><li>return self.title</li></ul><h1 id="博客开发"><a href="#博客开发" class="headerlink" title="博客开发"></a>博客开发</h1><h2 id="页面设计"><a href="#页面设计" class="headerlink" title="页面设计"></a>页面设计</h2><p>　　博客主页面<br>　　博客文章内容页面<br>　　博客撰写页面</p><h3 id="主页面内容"><a href="#主页面内容" class="headerlink" title="主页面内容"></a>主页面内容</h3><p>　　文章标题列表，超链接<br>　　发表博客按钮（超链接）</p><h4 id="列表编写思路"><a href="#列表编写思路" class="headerlink" title="列表编写思路"></a>列表编写思路</h4><ul><li>取出数据库中所有文章对象</li><li>将文章对象们打包成列表，传递到前端</li><li>前端页面把文章以标题超链接的形式逐个列出</li></ul><p>　　模板For循环<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;%<span class="keyword">for</span> xx <span class="keyword">in</span> xxs%&#125;</span><br><span class="line"><span class="comment"># HTML语句</span></span><br><span class="line">&#123;%endfor%&#125;</span><br></pre></td></tr></table></figure></p><p>　　修改views.py<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> models</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    articles = models.Article.objects.all()</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'index.html'</span>,&#123;<span class="string">'articles'</span>: articles&#125;)</span><br></pre></td></tr></table></figure></p><p>　　修改html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>新文章<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;% for article in articles %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>&#123;&#123;article.title&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="页面内容"><a href="#页面内容" class="headerlink" title="页面内容"></a>页面内容</h2><p>　　标题<br>　　文章内容<br>　　修改文章按钮（超链接）</p><p>　　在templates中新增article_page.html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Article Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;article.title&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;article.content&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>修改文章<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>　　修改views.py<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> models</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    articles = models.Article.objects.all()</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'index.html'</span>,&#123;<span class="string">'articles'</span>: articles&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">article_page</span><span class="params">(request, article_id)</span>:</span></span><br><span class="line">    article=models.Article.objects.get(pk = article_id)</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'article_page.html'</span>,&#123;<span class="string">'article'</span>:article&#125;)</span><br><span class="line">``</span><br><span class="line"><span class="comment">### URL传递参数</span></span><br><span class="line">　　参数写在相应函数中request后，可以有默认值</span><br><span class="line"></span><br><span class="line">　　修改blog下的urls.py</span><br><span class="line">```py</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">''</span>, views.index),</span><br><span class="line">    path(<span class="string">'article/&lt;article_id&gt;'</span>, views.article_page),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>　　顺便把myblog\urls.py里的index改成blog（非必要，只是更符合博客url）<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path,include</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> blog.views <span class="keyword">as</span> bv</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">'blog/'</span>, include(<span class="string">'blog.urls'</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>　　运行，输入<a href="http://localhost:8000/blog/article/1" target="_blank" rel="noopener">http://localhost:8000/blog/article/1</a> 查看。</p><h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><p>　　href后是目标地址，template中可用<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;%url <span class="string">'app_name:url_name'</span> param%&#125;</span><br></pre></td></tr></table></figure></p><p>　　其中app_name和url_name都在url中配置</p><h4 id="再配URL"><a href="#再配URL" class="headerlink" title="再配URL"></a>再配URL</h4><h5 id="uel函数的名称参数"><a href="#uel函数的名称参数" class="headerlink" title="uel函数的名称参数"></a>uel函数的名称参数</h5><p>　　法一：根urls，写在<code>include()</code>的第二个参数位置，<code>namespace=&#39;blog&#39;</code><br>　　法二：应用下则写在<code>url()</code>的第三个参数位置，<code>name=&#39;article&#39;</code><br>　　主要取决于是否使用<code>include</code>引用了另一个url配置文件</p><h2 id="撰写页面"><a href="#撰写页面" class="headerlink" title="撰写页面"></a>撰写页面</h2><p>　　标题编辑栏<br>　　文章内容编辑区域<br>　　提交按钮</p><p>　　新建edit_page.html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Edit Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>文章标题</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"title"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span>&gt;</span>文章内容</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"content"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>　　views.py新增<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit_page</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'edit_page.html'</span>)</span><br></pre></td></tr></table></figure></p><p>　　blog\urls.py新增<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">'edit'</span>, views.edit_page),</span><br></pre></td></tr></table></figure></p><p>　　运行，输入<a href="http://localhost:8000/blog/edit" target="_blank" rel="noopener">http://localhost:8000/blog/edit</a> 查看。</p><h3 id="编辑相应函数"><a href="#编辑相应函数" class="headerlink" title="编辑相应函数"></a>编辑相应函数</h3><p>　　使用<code>request.POST[&#39;参数名&#39;]</code>获取表单数据<br>　　models.Article.objects.create(title, content)创建对象</p><h2 id="两个编辑页面"><a href="#两个编辑页面" class="headerlink" title="两个编辑页面"></a>两个编辑页面</h2><p>　　思路：新文章为空，修改文章有内容<br>　　修改文章页面有文章对象<br>　　文章的ID</p><p>　　修改数据<br>　　article.title = title<br>　　article.save()</p><p>　　修改views.py<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit_page</span><span class="params">(request, article_id)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> str(article_id) == <span class="string">'0'</span>:</span><br><span class="line">        <span class="keyword">return</span> render(request,<span class="string">'edit_page.html'</span>)</span><br><span class="line">    article = models.Article.objects.get(pk=article_id)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'edit_page.html'</span>, &#123;<span class="string">'article'</span>: article&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit_action</span><span class="params">(request)</span>:</span></span><br><span class="line">    title = request.POST.get(<span class="string">'title'</span>, <span class="string">'TITLE'</span>)</span><br><span class="line">    content = request.POST.get(<span class="string">'content'</span>, <span class="string">'CONTENT'</span>)</span><br><span class="line">    article_id = request.POST.get(<span class="string">'article_id'</span>, <span class="string">'0'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> article_id == <span class="string">'0'</span>:</span><br><span class="line">        models.Article.objects.create(title=title, content=content)</span><br><span class="line">        articles = models.Article.objects.all()</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'index.html'</span>, &#123;<span class="string">'articles'</span>: articles&#125;)</span><br><span class="line"></span><br><span class="line">    article = models.Article.objects.get(pk=article_id)</span><br><span class="line">    article.title = title</span><br><span class="line">    article.content = content</span><br><span class="line">    article.save()</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'article_page.html'</span>, &#123;<span class="string">'article'</span>: article&#125;)</span><br></pre></td></tr></table></figure></p><p>　　修改blog\urls.py<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">''</span>, views.index),</span><br><span class="line">    path(<span class="string">'article/(?P&lt;article_id&gt;[0-9]+)$'</span>, views.article_page,name=<span class="string">'article_page'</span>),</span><br><span class="line">    path(<span class="string">'edit/(?P&lt;article_id&gt;[0-9]+)$'</span>, views.edit_page,name=<span class="string">'edit_page'</span>),</span><br><span class="line">    path(<span class="string">'edit/Action$'</span>, views.edit_action,name=<span class="string">'edit_action'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>　　修改article_page.html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Article Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;article.title&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;article.content&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'blog:edit_page' article.id %&#125;"</span>&gt;</span>修改文章<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>　　修改主页index.html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'blog:edit_page' 0 %&#125;"</span>&gt;</span>新文章<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;% for article in articles %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'blog:article_page' article.id %&#125;"</span>&gt;</span>&#123;&#123;article.title&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>　　修改edit_page.gtml<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Edit Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"&#123;% url 'blog:edit_action' %&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    &#123;% if article %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"article_id"</span> <span class="attr">value</span>=<span class="string">"&#123;&#123;article.id&#125;&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>文章标题</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"title"</span> <span class="attr">value</span>=<span class="string">"&#123;&#123;article.title&#125;&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>文章内容</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"content"</span> <span class="attr">value</span>=<span class="string">"&#123;&#123;article.content&#125;&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    &#123;% else %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"article_id"</span> <span class="attr">value</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>文章标题</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"title"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>文章内容</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"content"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="Templates过滤器"><a href="#Templates过滤器" class="headerlink" title="Templates过滤器"></a>Templates过滤器</h1><p>　　写在模板中，属于Django模板语言<br>　　可以修改模板中的变量，从而显示不同的内容<br>　　使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;value | filter&#125;&#125;</span><br></pre></td></tr></table></figure></p><p>e.g.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;list_nums | length&#125;&#125;</span><br></pre></td></tr></table></figure></p><p>　　过滤器可叠加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;value | filter1 | filter2 | ...&#125;&#125;</span><br></pre></td></tr></table></figure></p><p>　　修改edit_page.html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Edit Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"&#123;% url 'blog:edit_action' %&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"article_id"</span> <span class="attr">value</span>=<span class="string">"&#123;&#123;article.id | default:'0'&#125;&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>文章标题</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"title"</span> <span class="attr">value</span>=<span class="string">"&#123;&#123;article.title&#125;&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>文章内容</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"content"</span> <span class="attr">value</span>=<span class="string">"&#123;&#123;article.content&#125;&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="Django-Shell"><a href="#Django-Shell" class="headerlink" title="Django Shell"></a>Django Shell</h1><p>　　Python交互式命令行程序，自动引入了项目环境，可使用它与项目进行交互<br>　　使用<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python manage.py shell</span><br><span class="line"><span class="keyword">from</span> blog.models <span class="keyword">import</span> Article</span><br><span class="line">Article.objects.all()</span><br></pre></td></tr></table></figure></p><p>　　可以使用它进行调试<br>　　测试未知的方法</p><h1 id="Admin增强"><a href="#Admin增强" class="headerlink" title="Admin增强"></a>Admin增强</h1><h2 id="创建admin配置类"><a href="#创建admin配置类" class="headerlink" title="创建admin配置类"></a>创建admin配置类</h2><p>　　class ArticleAdmin(admin.ModelAdmin)<br>　　注册：admin.site.register(Article, ArticleAdmin)</p><h2 id="显示其他字段"><a href="#显示其他字段" class="headerlink" title="显示其他字段"></a>显示其他字段</h2><p>　　list_display = (‘title’, ‘content’)<br>　　list_display同时支持tuple和list</p><p>　　修改admin.py<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Article</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    list_display = (<span class="string">'title'</span>, <span class="string">'content'</span>,<span class="string">'pub_time'</span>)</span><br><span class="line"></span><br><span class="line">admin.site.register(Article, ArticleAdmin)</span><br></pre></td></tr></table></figure></p><p>　　修改models.py<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">32</span>, default=<span class="string">'Title'</span>)</span><br><span class="line">    content=models.TextField(null=<span class="keyword">True</span>)</span><br><span class="line">    pub_time = models.DateTimeField(auto_now=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.title</span><br></pre></td></tr></table></figure></p><p>　　如果是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pub_time = models.DateTimeField(null=True)</span><br></pre></td></tr></table></figure></p><p>　　则可自己设定时间。</p><p>　　修改完代码记得进行数据移植<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure></p><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><p>　　list_filter = (‘pub_time’,)<br>　　注意有个逗号</p><h1 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h1><p><a href="https://docs.djangoproject.com/en/2.1/ref/" target="_blank" rel="noopener">Django API Reference</a></p><h1 id="代码下载"><a href="#代码下载" class="headerlink" title="代码下载"></a>代码下载</h1><p><a href="https://github.com/hubojing/django-blog-demo" target="_blank" rel="noopener">django-blog-demo</a></p><hr><p>hexo天坑：<br>遇到 两个大括号 以及 一个大括号一个% 一定放入代码行（如下），<code>这样是不行的</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;&#125;&#125;</span><br><span class="line">&#123;%%&#125;</span><br></pre></td></tr></table></figure></p><p>排查这个bug花了我半个小时…</p>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;left&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1547395242880&amp;di=51c657b409cc95bb168dde1d33880538&amp;imgtype=0&amp;src=http%3A%2F%2F5b0988e595225.cdn.sohucs.com%2Fimages%2F20171129%2F35c49523c50843f3ba22b8bc246c5d42.jpeg&quot; width=&quot;300&quot; height=&quot;180&quot; style=&quot;float:right;&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;　　&lt;strong&gt;Django-blog-demo笔记。&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt; &lt;/div&gt;
    
    </summary>
    
      <category term="互联网" scheme="https://hubojing.github.io/categories/%E4%BA%92%E8%81%94%E7%BD%91/"/>
    
    
      <category term="Python" scheme="https://hubojing.github.io/tags/Python/"/>
    
      <category term="Django" scheme="https://hubojing.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>新年Flag</title>
    <link href="https://hubojing.github.io/2019/01/01/%E6%96%B0%E5%B9%B4Flag/"/>
    <id>https://hubojing.github.io/2019/01/01/新年Flag/</id>
    <published>2019-01-01T14:18:16.000Z</published>
    <updated>2019-01-06T10:05:28.000Z</updated>
    
    <content type="html"><![CDATA[<div align="left"><br><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1546778719714&di=dc8a0026620328217ea579b8991c2354&imgtype=0&src=http%3A%2F%2Fpic2.zhimg.com%2Fv2-673bcb24e3663cabbeb18216130e8d05_1200x500.jpg" width="300" height="180" style="float:right;"><br><br><br>　　<strong>简短地写一写今年的规划。</strong><br><br><br> </div><a id="more"></a><p>　　元旦快乐！</p><p>　　2019年刚刚开始，不过我总有一种2019已经结束的错觉……<br>　　去年元旦前夕洋洋洒洒写了不少，2018也有很多事情可写，但可能不是一篇两篇写得下的……</p><p>　　去年我只立了两条Flag：<br>　　1. 每日看足1小时技术类图书<br>　　2. 不要熬夜</p><p>　　验收：<br>　　第一条算自己基本做到了吧，不过手头还有一叠书没看，不少时候也是利用的碎片化时间阅读。<br>　　第二条2018年上半年没做到，下半年基本做到了。</p><p>　　今年的Flag：<br>　　1. 不要熬夜，加强锻炼<br>　　2. 技术方面基础和实战两头抓<br>　　3. 提高算法能力，首先从多做题开始<br>　　4. 继续提高英语水平，尤其是计算机英语<br>　　5. 研究方向的趋向性研讨</p><p>　　2019年理应是一个自我技术能力快速提高的一年。</p><p>　　之前有朋友提醒我更博，Thanks♪(･ω･)ﾉ。2018年是忙碌的一年，其实也并非从八月起就停更了。只是那段时间折腾，开了一个微信公众号：玩代码，并且打算在上面更完关于OpenCV学习的一个系列笔记。这个系列可能文章比较多，但每篇篇幅较短，质量也可能参差不齐，因为主要是我进行自我查阅和复习使用。我之前没有和任何人提及过该公众号，只是在github上提交了部分代码。感谢各位默默关注。<br>　　可以说，公众号目前只是一个我折腾的玩具，技术博客依然是我的主要记录地。不过后期也许在公众号写点技术方面别的东西（比如一些日常写代码的bug或者计算机相关的新闻感想？）技术公众号和技术博客的分界点在哪，还没想好。<br>　　不过公众号借助微信的开发平台，很多方面省事省力。贴图也不用担心哪天图就挂了。我前几年写的文章不少配图失效了，而我当时也没有备份，算是找不到了。最初用极简图床丢了一波图，后来用七牛扣了一波钱，现在用VSCode写markdown，图床外链也不能实时显示。现在写文章怕丢图还得自我先备份，着实有些麻烦。关于这方面，还是得想想有没有什么好办法。</p><p>　　感觉没图太单调<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/%E6%96%B0%E5%B9%B4Flag%E2%80%94%E2%80%94%E6%88%91%E7%9A%84%E7%9F%A5%E4%B9%8E.jpg?raw=true" alt="2018我的知乎" title="">                </div>                <div class="image-caption">2018我的知乎</div>            </figure><br>　　跟上时代，未来必是人工智能的世界。</p><p>　　2019，扬帆起航吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;left&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1546778719714&amp;di=dc8a0026620328217ea579b8991c2354&amp;imgtype=0&amp;src=http%3A%2F%2Fpic2.zhimg.com%2Fv2-673bcb24e3663cabbeb18216130e8d05_1200x500.jpg&quot; width=&quot;300&quot; height=&quot;180&quot; style=&quot;float:right;&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;　　&lt;strong&gt;简短地写一写今年的规划。&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt; &lt;/div&gt;
    
    </summary>
    
      <category term="杂谈" scheme="https://hubojing.github.io/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="杂谈" scheme="https://hubojing.github.io/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>C++面向对象程序设计（侯捷）笔记</title>
    <link href="https://hubojing.github.io/2018/12/27/C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%EF%BC%88%E4%BE%AF%E6%8D%B7%EF%BC%89%E7%AC%94%E8%AE%B0/"/>
    <id>https://hubojing.github.io/2018/12/27/C-面向对象程序设计（侯捷）笔记/</id>
    <published>2018-12-27T10:27:25.000Z</published>
    <updated>2019-02-01T12:12:33.000Z</updated>
    
    <content type="html"><![CDATA[<div align="left"><br><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1550076388605&di=ccc7e1012e5eadf4fdefe9ed6bee1170&imgtype=0&src=http%3A%2F%2Fimg.mp.itc.cn%2Fupload%2F20170622%2F57ea5e537b91482b93347c7254ee59dd_th.jpg" width="300" height="180" style="float:right;"><br><br><br>　　<strong>侯捷老师带我飞，再学习C++系列。</strong><br><br><br> </div><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>　　再复习C++，现整理笔记如下。（以下【注】为我的注释）<br>　　写正规大气的C++代码。感谢侯捷老师！</p><h1 id="C-编程简介"><a href="#C-编程简介" class="headerlink" title="C++编程简介"></a>C++编程简介</h1><h2 id="你应具备的基础"><a href="#你应具备的基础" class="headerlink" title="你应具备的基础"></a>你应具备的基础</h2><ul><li>曾学过某种procedural language(C语言)<br> 变量(variables)<br> 类型(types):int, float, char, struct …<br> 作用域(scope)<br> 循环(loops):while, for<br> 流程控制：if-else, switch-case</li><li>知道一个程序需要编译、连结才能被执行</li><li>知道如何编译和连结（如何建立一个可运行程序）</li></ul><p>【注】台湾译法也许有某些不同，如此处“连结”。本笔记不改变作者用词。</p><h2 id="我们的目标"><a href="#我们的目标" class="headerlink" title="我们的目标"></a>我们的目标</h2><ul><li>培养正规的、大气的编程习惯</li><li>以良好的方式编写C++ class(Object Based)<ul><li>class without pointer members  – Complex</li><li>class with pointer members – String</li></ul></li><li>学习Classes之间的关系(Objected Oriented)<ul><li>继承（inheritance）</li><li>复合（composition）</li><li>委托（delegation） </li></ul></li></ul><h2 id="你将获得的代码"><a href="#你将获得的代码" class="headerlink" title="你将获得的代码"></a>你将获得的代码</h2><p>complex.h<br>complex-test.cpp</p><p>string.h<br>string-test.cpp</p><p>oop-demo.h<br>oop-test.cpp</p><h2 id="C-的历史"><a href="#C-的历史" class="headerlink" title="C++的历史"></a>C++的历史</h2><ul><li>B语言（1969）</li><li>C语言（1972）</li><li>C++语言（1983）<br>(new C -&gt; C with Class -&gt;C++)</li><li>Java语言</li><li>C#语言</li></ul><h2 id="C-演化"><a href="#C-演化" class="headerlink" title="C++演化"></a>C++演化</h2><ul><li>C++ 98(1.0)</li><li>C++ 03(TR1, Technical Report 1)</li><li>C++ 11(2.0)</li><li>C++ 14</li></ul><p>C++:C++语言、C++标准库</p><h2 id="Bibliography-书目志"><a href="#Bibliography-书目志" class="headerlink" title="Bibliography(书目志)"></a>Bibliography(书目志)</h2><ol><li>C++ Primer</li><li>The C++ PROGRAMMING LANGUAGE</li><li>Effective C++</li><li>THE C++ STANDARD LIBRARY</li><li>STL源码剖析</li></ol><h1 id="头文件与类的声明"><a href="#头文件与类的声明" class="headerlink" title="头文件与类的声明"></a>头文件与类的声明</h1><h2 id="C-vs-C-关于数据和函数"><a href="#C-vs-C-关于数据和函数" class="headerlink" title="C vs C++,关于数据和函数"></a>C vs C++,关于数据和函数</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/9d26e12a3e8f9bb1b75015884287637c9af86692/C++%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%EF%BC%88%E4%BE%AF%E6%8D%B7%EF%BC%89%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94C%20vs%20C++.png?raw=true" alt="C vs C++" title="">                </div>                <div class="image-caption">C vs C++</div>            </figure><h2 id="C-关于数据和函数"><a href="#C-关于数据和函数" class="headerlink" title="C++,关于数据和函数"></a>C++,关于数据和函数</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/C++%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%EF%BC%88%E4%BE%AF%E6%8D%B7%EF%BC%89%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94C++,%E5%85%B3%E4%BA%8E%E6%95%B0%E6%8D%AE%E5%92%8C%E5%87%BD%E6%95%B0.png?raw=true" alt="C++,关于数据和函数" title="">                </div>                <div class="image-caption">C++,关于数据和函数</div>            </figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">complex</span> <span class="title">c1</span><span class="params">(<span class="number">2</span>,<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">complex</span> c2;</span><br><span class="line"><span class="keyword">complex</span>* pc = <span class="keyword">new</span> <span class="keyword">complex</span>(<span class="number">0</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>【注】数据可以有很多份，函数只有一份。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s1</span><span class="params">(<span class="string">"Hello"</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s2</span><span class="params">(<span class="string">"World"</span>)</span></span>;</span><br><span class="line"><span class="built_in">string</span>* ps = <span class="keyword">new</span> <span class="built_in">string</span>;</span><br></pre></td></tr></table></figure><h2 id="Object-Based-基于对象-vs-Object-Oriented-面向对象"><a href="#Object-Based-基于对象-vs-Object-Oriented-面向对象" class="headerlink" title="Object Based(基于对象) vs Object Oriented(面向对象)"></a>Object Based(基于对象) vs Object Oriented(面向对象)</h2><p>Object Based:面向的是单一class的设计<br>Object Oriented:面对的是多重classes的设计，classes和classes之间的关系。</p><h2 id="我们的第一个C-程序"><a href="#我们的第一个C-程序" class="headerlink" title="我们的第一个C++程序"></a>我们的第一个C++程序</h2><p>Classes的两个经典分类：</p><ul><li>Class without pointer member(s)<br>complex</li><li>Class with pointer member(s)<br>string</li></ul><h2 id="C-programs代码基本形式"><a href="#C-programs代码基本形式" class="headerlink" title="C++ programs代码基本形式"></a>C++ programs代码基本形式</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/C++%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%EF%BC%88%E4%BE%AF%E6%8D%B7%EF%BC%89%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94C++%E4%BB%A3%E7%A0%81%E5%9F%BA%E6%9C%AC%E5%BD%A2%E5%BC%8F.png?raw=true" alt="代码基本形式" title="">                </div>                <div class="image-caption">代码基本形式</div>            </figure><p>延伸文件名（extension file name）不一定是.h或.cpp，也可能是.hpp或其他或甚至无延伸名。</p><h2 id="Output-C-vs-C"><a href="#Output-C-vs-C" class="headerlink" title="Output, C++ vs. C"></a>Output, C++ vs. C</h2><p>C++<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">7</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt; <span class="string">"i="</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>C<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">7</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"i=%d \n"</span>, i);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Header-头文件-中的防卫式声明"><a href="#Header-头文件-中的防卫式声明" class="headerlink" title="Header(头文件)中的防卫式声明"></a>Header(头文件)中的防卫式声明</h2><p>guard(防卫式声明)<br>complex.h<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __COMPLEX__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __COMPLEX__</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></p><p>【注】如果xxx已经定义过了，则不进入下方的定义。 </p><p>complex-test.h</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"complex.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">complex</span> <span class="title">c1</span><span class="params">(<span class="number">2</span>,<span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">complex</span> c2;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; c1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; c2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    c2 = c1 + <span class="number">5</span>;</span><br><span class="line">    c2 = <span class="number">7</span> + c1;</span><br><span class="line">    c2 = c1 + c2;</span><br><span class="line">    c2 += c1;</span><br><span class="line">    c2 += <span class="number">3</span>;</span><br><span class="line">    c2 = -c1;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; (c1 == c2) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; (c1 != c2) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; conj(c1) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Header-头文件-的布局"><a href="#Header-头文件-的布局" class="headerlink" title="Header(头文件)的布局"></a>Header(头文件)的布局</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __COMPLEX__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __COMPLEX__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//forward declarations(前置声明)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ostream</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">complex</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">complex</span>&amp;</span><br><span class="line">    __doapl (<span class="keyword">complex</span>* ths, <span class="keyword">const</span> <span class="keyword">complex</span>&amp; r);</span><br><span class="line"></span><br><span class="line"><span class="comment">//class declarations(类-声明)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">complex</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//class definiton(类-定义)</span></span><br><span class="line"><span class="keyword">complex</span>::function ...</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="class的声明-declaration"><a href="#class的声明-declaration" class="headerlink" title="class的声明(declaration)"></a>class的声明(declaration)</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">complex</span>//<span class="title">class</span> <span class="title">head</span></span></span><br><span class="line"><span class="class">&#123;</span><span class="comment">//class body</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">complex</span> (<span class="keyword">double</span> r = <span class="number">0</span>, <span class="keyword">double</span> i = <span class="number">0</span>)</span><br><span class="line">    : re (r), im(i)</span><br><span class="line">    &#123;&#125;</span><br><span class="line">    <span class="keyword">complex</span>&amp; <span class="keyword">operator</span> += (<span class="keyword">const</span> <span class="keyword">complex</span>&amp;);</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">real</span> <span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> re;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">imag</span> <span class="params">()</span> <span class="keyword">const</span> </span>&#123;reutn im;&#125;<span class="comment">//有些函数在此直接定义，另一些在body之外定义</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">double</span> re, im;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">complex</span>&amp; __doapl (<span class="keyword">complex</span>*, <span class="keyword">const</span> <span class="keyword">complex</span>&amp;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>使用：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">complex</span> <span class="title">c1</span><span class="params">(<span class="number">2</span>,<span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">complex</span> c2;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="class-template-模板-简介"><a href="#class-template-模板-简介" class="headerlink" title="class template(模板)简介"></a>class template(模板)简介</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">complex</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">complex</span> (T r = <span class="number">0</span>, T i = <span class="number">0</span>)</span><br><span class="line">    : re (r), im(i)</span><br><span class="line">    &#123;&#125;</span><br><span class="line">    <span class="keyword">complex</span>&amp; <span class="keyword">operator</span> += (<span class="keyword">const</span> <span class="keyword">complex</span>&amp;);</span><br><span class="line">    <span class="function">T <span class="title">real</span> <span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> re;&#125;</span><br><span class="line">    <span class="function">T <span class="title">imag</span> <span class="params">()</span> <span class="keyword">const</span> </span>&#123;reutn im;&#125;<span class="comment">//有些函数在此直接定义，另一些在body之外定义</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T re, im;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">complex</span>&amp; __doapl (<span class="keyword">complex</span>*, <span class="keyword">const</span> <span class="keyword">complex</span>&amp;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>使用：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">complex</span>&lt;<span class="keyword">double</span>&gt; c1(<span class="number">2.5</span>,<span class="number">1.5</span>);</span><br><span class="line">    <span class="keyword">complex</span>&lt;<span class="keyword">int</span>&gt; c2(<span class="number">2</span>,<span class="number">6</span>);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h1><h2 id="inline-内联-函数"><a href="#inline-内联-函数" class="headerlink" title="inline(内联)函数"></a>inline(内联)函数</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">complex</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">complex</span> (<span class="keyword">double</span> r = <span class="number">0</span>, <span class="keyword">double</span> i = <span class="number">0</span>)</span><br><span class="line">    : re (r), im(i)</span><br><span class="line">    &#123;&#125;<span class="comment">//函数若在class body内定义完成，便成为inline候选人</span></span><br><span class="line">    <span class="keyword">complex</span>&amp; <span class="keyword">operator</span> += (<span class="keyword">const</span> <span class="keyword">complex</span>&amp;);</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">real</span> <span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> re;&#125;<span class="comment">//可以inline</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">imag</span> <span class="params">()</span> <span class="keyword">const</span> </span>&#123;reutn im;&#125;<span class="comment">//可以inline</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">double</span> re, im;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">complex</span>&amp; __doapl (<span class="keyword">complex</span>*, <span class="keyword">const</span> <span class="keyword">complex</span>&amp;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>使用：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span> <span class="keyword">double</span></span><br><span class="line">imag(<span class="keyword">const</span> <span class="keyword">complex</span>&amp; x)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> x.imag ();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>【注】函数太复杂，就不能inline。</p><h2 id="access-level-访问级别"><a href="#access-level-访问级别" class="headerlink" title="access level(访问级别)"></a>access level(访问级别)</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">complex</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">complex</span> (<span class="keyword">double</span> r = <span class="number">0</span>, <span class="keyword">double</span> i = <span class="number">0</span>)</span><br><span class="line">    : re (r), im(i)</span><br><span class="line">    &#123;&#125;</span><br><span class="line">    <span class="keyword">complex</span>&amp; <span class="keyword">operator</span> += (<span class="keyword">const</span> <span class="keyword">complex</span>&amp;);</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">real</span> <span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> re;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">imag</span> <span class="params">()</span> <span class="keyword">const</span> </span>&#123;reutn im;&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">double</span> re, im;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">complex</span>&amp; __doapl (<span class="keyword">complex</span>*, <span class="keyword">const</span> <span class="keyword">complex</span>&amp;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>错误使用：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">complex</span> <span class="title">c1</span><span class="params">(<span class="number">2</span>,<span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; c1.re;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; c1.im;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>正确使用：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">complex</span> <span class="title">c1</span><span class="params">(<span class="number">2</span>,<span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; c1.real();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; c1.imag();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="constructor-ctor-构造函数"><a href="#constructor-ctor-构造函数" class="headerlink" title="constructor(ctor,构造函数)"></a>constructor(ctor,构造函数)</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">complex</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">complex</span> (<span class="keyword">double</span> r = <span class="number">0</span>, <span class="keyword">double</span> i = <span class="number">0</span>)<span class="comment">//default argument(默认实参)</span></span><br><span class="line">    : re (r), im(i)<span class="comment">//initialization list(初值列，初始列)</span></span><br><span class="line">    &#123; &#125;</span><br><span class="line">    <span class="keyword">complex</span>&amp; <span class="keyword">operator</span> += (<span class="keyword">const</span> <span class="keyword">complex</span>&amp;);</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">real</span> <span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> re;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">imag</span> <span class="params">()</span> <span class="keyword">const</span> </span>&#123;reutn im;&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">double</span> re, im;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">complex</span>&amp; __doapl (<span class="keyword">complex</span>*, <span class="keyword">const</span> <span class="keyword">complex</span>&amp;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>【注】其他函数也可以有默认值。构造函数没有返回值类型。initialization list(初值列，初始列)上下三行等价于<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">complex</span> (<span class="keyword">double</span> r = <span class="number">0</span>, <span class="keyword">double</span> i = <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    re = r; im = i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>但建议用初始列方式写。初始化+赋值。初始列就是初始化的阶段。</p><p>使用：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">complex</span> <span class="title">c1</span><span class="params">(<span class="number">2</span>,<span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">complex</span> c2;<span class="comment">//没有指明，用默认值</span></span><br><span class="line">    <span class="keyword">complex</span>* p = <span class="keyword">new</span> <span class="keyword">complex</span>(<span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>【注】不带指针的类多半不用写析构函数。</p><h2 id="ctor-构造函数-可以有很多个-overloading-重载"><a href="#ctor-构造函数-可以有很多个-overloading-重载" class="headerlink" title="ctor(构造函数)可以有很多个 - overloading(重载)"></a>ctor(构造函数)可以有很多个 - overloading(重载)</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">complex</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">complex</span> (<span class="keyword">double</span> r = <span class="number">0</span>, <span class="keyword">double</span> i = <span class="number">0</span>)</span><br><span class="line">    : re (r), im(i)</span><br><span class="line">    &#123; &#125;</span><br><span class="line">    <span class="keyword">complex</span> () : re(<span class="number">0</span>), im(<span class="number">0</span>) &#123; &#125;<span class="comment">//？！</span></span><br><span class="line">    <span class="keyword">complex</span>&amp; <span class="keyword">operator</span> += (<span class="keyword">const</span> <span class="keyword">complex</span>&amp;);</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">real</span> <span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> re;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">imag</span> <span class="params">()</span> <span class="keyword">const</span> </span>&#123;reutn im;&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">double</span> re, im;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">complex</span>&amp; __doapl (<span class="keyword">complex</span>*, <span class="keyword">const</span> <span class="keyword">complex</span>&amp;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">real</span><span class="params">(<span class="keyword">double</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    re = r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>real函数编译后的实际名称可能是：<br>?real@Complex@@QBENXZ<br>?real@Complex@@QAENABN@Z<br>取决于编译器。</p><p>【注】重载表面名字相同，其实在编译器内名字不同。</p><p>构造函数重载：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    Complex c1;</span><br><span class="line">    <span class="function">Complex <span class="title">c2</span><span class="params">()</span></span>;<span class="comment">//写法不同，意思相同</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>所以？！处的构造函数不能这样重载。</p><h1 id="参数传递与返回值"><a href="#参数传递与返回值" class="headerlink" title="参数传递与返回值"></a>参数传递与返回值</h1><h2 id="constructor-ctor-构造函数-被放在private区"><a href="#constructor-ctor-构造函数-被放在private区" class="headerlink" title="constructor(ctor,构造函数)被放在private区"></a>constructor(ctor,构造函数)被放在private区</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/C++面向对象程序设计（侯捷）笔记——ctor被放在private区.png?raw=true" alt="ctor被放在private区" title="">                </div>                <div class="image-caption">ctor被放在private区</div>            </figure><p>以下无法使用：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">complex</span> <span class="title">c1</span><span class="params">(<span class="number">2</span>,<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">complex</span> c2;</span><br></pre></td></tr></table></figure></p><p>那么是不是说ctor不应该放在private区呢？也不是。</p><p>Singleton(单例)设计模式：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> A&amp; <span class="title">getInstance</span><span class="params">()</span></span>;</span><br><span class="line">    setup() &#123;...&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    A();</span><br><span class="line">    A(<span class="keyword">const</span> A&amp; rhs);</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">A&amp; A::getInstance()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> A a;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A::getInstance().setup();</span><br></pre></td></tr></table></figure></p><h2 id="const-member-functions-常量成员函数"><a href="#const-member-functions-常量成员函数" class="headerlink" title="const member functions(常量成员函数)"></a>const member functions(常量成员函数)</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">complex</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">complex</span> (<span class="keyword">double</span> r = <span class="number">0</span>, <span class="keyword">double</span> i = <span class="number">0</span>)</span><br><span class="line">    : re (r), im(i)</span><br><span class="line">    &#123; &#125;</span><br><span class="line">    <span class="keyword">complex</span>&amp; <span class="keyword">operator</span> += (<span class="keyword">const</span> <span class="keyword">complex</span>&amp;);</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">real</span> <span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> re;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">imag</span> <span class="params">()</span> <span class="keyword">const</span> </span>&#123;reutn im;&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">double</span> re, im;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">complex</span>&amp; __doapl (<span class="keyword">complex</span>*, <span class="keyword">const</span> <span class="keyword">complex</span>&amp;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>正确使用：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">complex</span> <span class="title">c1</span><span class="params">(<span class="number">2</span>,<span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; c1.real();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; c1.imag();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>【注】不改变数据就加const。</p><p>？！<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">const</span> <span class="keyword">complex</span> <span class="title">c1</span><span class="params">(<span class="number">2</span>,<span class="number">1</span>)</span></span>;<span class="comment">//我这个值是不能改变的哦</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; c1.real();<span class="comment">//万一real函数没写const，就可能改data。就会产生矛盾</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; c2.imag();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="参数传递：pass-by-value-vs-pass-by-reference-to-const"><a href="#参数传递：pass-by-value-vs-pass-by-reference-to-const" class="headerlink" title="参数传递：pass by value vs. pass by reference(to const)"></a>参数传递：pass by value vs. pass by reference(to const)</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">complex</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">complex</span> (<span class="keyword">double</span> r = <span class="number">0</span>, <span class="keyword">double</span> i = <span class="number">0</span>)</span><br><span class="line">    : re (r), im(i)</span><br><span class="line">    &#123; &#125;</span><br><span class="line">    <span class="keyword">complex</span>&amp; <span class="keyword">operator</span> += (<span class="keyword">const</span> <span class="keyword">complex</span>&amp;);<span class="comment">//传引用速度很快哦，并且不能改我，我加了const哦。如果你改我，编译器就会报错</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">real</span> <span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> re;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">imag</span> <span class="params">()</span> <span class="keyword">const</span> </span>&#123;reutn im;&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">double</span> re, im;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">complex</span>&amp; __doapl (<span class="keyword">complex</span>*, <span class="keyword">const</span> <span class="keyword">complex</span>&amp;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>没有const:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ostream&amp;</span><br><span class="line"><span class="keyword">operator</span> &lt;&lt; (ostream&amp; os, <span class="keyword">const</span> <span class="keyword">complex</span>&amp; x)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> os &lt;&lt; <span class="string">'('</span> &lt;&lt; real (x) &lt;&lt; <span class="string">','</span></span><br><span class="line">              &lt;&lt; imag (x) &lt;&lt; <span class="string">')'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>【注】pass by value压到栈里。大的遵循守则，尽量不要pass by value。在C里用指针。C++ pass by reference。<br>如果不希望对方改数据，加const。</p><p>使用：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">complex</span> <span class="title">c1</span><span class="params">(<span class="number">2</span>,<span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">complex</span> c2;</span><br><span class="line"></span><br><span class="line">    c2 += c1;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; c2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="返回值传递：return-by-value-vs-return-by-reference-to-const"><a href="#返回值传递：return-by-value-vs-return-by-reference-to-const" class="headerlink" title="返回值传递：return by value vs. return by reference(to const)"></a>返回值传递：return by value vs. return by reference(to const)</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">complex</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">complex</span> (<span class="keyword">double</span> r = <span class="number">0</span>, <span class="keyword">double</span> i = <span class="number">0</span>)</span><br><span class="line">    : re (r), im(i)</span><br><span class="line">    &#123; &#125;</span><br><span class="line">    <span class="keyword">complex</span>&amp; <span class="keyword">operator</span> += (<span class="keyword">const</span> <span class="keyword">complex</span>&amp;);</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">real</span> <span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> re;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">imag</span> <span class="params">()</span> <span class="keyword">const</span> </span>&#123;reutn im;&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">double</span> re, im;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">complex</span>&amp; __doapl (<span class="keyword">complex</span>*, <span class="keyword">const</span> <span class="keyword">complex</span>&amp;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="friend-友元"><a href="#friend-友元" class="headerlink" title="friend(友元)"></a>friend(友元)</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">complex</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">complex</span> (<span class="keyword">double</span> r = <span class="number">0</span>, <span class="keyword">double</span> i = <span class="number">0</span>)</span><br><span class="line">    : re (r), im(i)</span><br><span class="line">    &#123; &#125;</span><br><span class="line">    <span class="keyword">complex</span>&amp; <span class="keyword">operator</span> += (<span class="keyword">const</span> <span class="keyword">complex</span>&amp;);</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">real</span> <span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> re;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">imag</span> <span class="params">()</span> <span class="keyword">const</span> </span>&#123;reutn im;&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">double</span> re, im;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">complex</span>&amp; __doapl (<span class="keyword">complex</span>*, <span class="keyword">const</span> <span class="keyword">complex</span>&amp;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>使用：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span> <span class="keyword">complex</span>&amp;</span><br><span class="line">__doapl (<span class="keyword">complex</span>* ths, <span class="keyword">const</span> <span class="keyword">complex</span>&amp; r)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;re += r.re;</span><br><span class="line">    <span class="keyword">this</span>-&gt;im += r.im;<span class="comment">//自由取得friend的private成员</span></span><br><span class="line">    <span class="keyword">return</span> *ths;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>【注】friend打破封装。</p><h2 id="相同class的各个objects互为friends-友元"><a href="#相同class的各个objects互为friends-友元" class="headerlink" title="相同class的各个objects互为friends(友元)"></a>相同class的各个objects互为friends(友元)</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">complex</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">complex</span> (<span class="keyword">double</span> r = <span class="number">0</span>; <span class="keyword">double</span> i = <span class="number">0</span>)</span><br><span class="line">    : re (r), im (i)</span><br><span class="line">    &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">const</span> <span class="keyword">complex</span>&amp; param)</span></span></span><br><span class="line"><span class="function">    </span>&#123; <span class="keyword">return</span> param.re + param.im; &#125;<span class="comment">//这个怎么可以直接拿咧~</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">double</span> re, im;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>使用：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">complex</span> <span class="title">c1</span><span class="params">(<span class="number">2</span>,<span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">complex</span> c2;</span><br><span class="line"></span><br><span class="line">    c2.func(c1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="class-body外的各种定义-definitions"><a href="#class-body外的各种定义-definitions" class="headerlink" title="class body外的各种定义(definitions)"></a>class body外的各种定义(definitions)</h2><p>什么情况下可以pass by reference<br>什么情况下可以return by reference</p><p>do assignment plus<br>第一参数将会被改动，第二参数不会被改动<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span> <span class="keyword">complex</span>&amp;</span><br><span class="line">__doapl (<span class="keyword">complex</span>* ths, <span class="keyword">const</span> <span class="keyword">complex</span>&amp; r)</span><br><span class="line">&#123;</span><br><span class="line">    ths-&gt;re += r.re;</span><br><span class="line">    ths-&gt;im += r.im;</span><br><span class="line">    <span class="keyword">return</span> *ths;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">complex</span>&amp;</span><br><span class="line"><span class="keyword">complex</span>::<span class="keyword">operator</span> += (<span class="keyword">const</span> <span class="keyword">complex</span>&amp; r)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> __doapl (<span class="keyword">this</span>, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="操作符重载与临时对象"><a href="#操作符重载与临时对象" class="headerlink" title="操作符重载与临时对象"></a>操作符重载与临时对象</h1><h2 id="operator-overloading-操作符重载-1，成员函数-this"><a href="#operator-overloading-操作符重载-1，成员函数-this" class="headerlink" title="operator overloading(操作符重载-1，成员函数) this"></a>operator overloading(操作符重载-1，成员函数) this</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/C++面向对象程序设计（侯捷）笔记——操作符重载之成员函数.png?raw=true" alt="操作符重载之成员函数" title="">                </div>                <div class="image-caption">操作符重载之成员函数</div>            </figure><h2 id="return-by-reference语法分析"><a href="#return-by-reference语法分析" class="headerlink" title="return by reference语法分析"></a>return by reference语法分析</h2><p>传递者无需知道接受者是以reference形式接收。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/C++面向对象程序设计（侯捷）笔记——返回引用语法分析.png?raw=true" alt="语法分析" title="">                </div>                <div class="image-caption">语法分析</div>            </figure></p><p>【注】return *ths;  接收端是complex&amp;，不矛盾。</p><h2 id="class-body外的各种定义-definitions-1"><a href="#class-body外的各种定义-definitions-1" class="headerlink" title="class body外的各种定义(definitions)"></a>class body外的各种定义(definitions)</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span> <span class="keyword">double</span></span><br><span class="line">imag(<span class="keyword">const</span> <span class="keyword">complex</span>&amp; x)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> x.imag ();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">double</span></span><br><span class="line">real(<span class="keyword">const</span> <span class="keyword">complex</span>&amp; x)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> x.real ();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">complex</span> <span class="title">c1</span><span class="params">(<span class="number">2</span>,<span class="number">1</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; imag(c1);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; real(c1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="operator-overloading-操作符重载-2，非成员函数-无this"><a href="#operator-overloading-操作符重载-2，非成员函数-无this" class="headerlink" title="operator overloading(操作符重载-2，非成员函数)(无this)"></a>operator overloading(操作符重载-2，非成员函数)(无this)</h2><p>为了应对client的三种可能用法，这儿对应开发三个函数。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/C++面向对象程序设计（侯捷）笔记——操作符重载之非成员函数.png?raw=true" alt="操作符重载之非成员函数" title="">                </div>                <div class="image-caption">操作符重载之非成员函数</div>            </figure></p><h2 id="temp-object-临时对象-typename"><a href="#temp-object-临时对象-typename" class="headerlink" title="temp object(临时对象) typename();"></a>temp object(临时对象) typename();</h2><p>上图complex这些函数绝不可return by reference,因为它们返回的必定是个local object。</p><h1 id="三大函数：拷贝构造，拷贝复制，析构"><a href="#三大函数：拷贝构造，拷贝复制，析构" class="headerlink" title="三大函数：拷贝构造，拷贝复制，析构"></a>三大函数：拷贝构造，拷贝复制，析构</h1><ul><li>Class without pointer member(s)<br>complex</li><li>Class with pointer member(s)<br>string</li></ul><h2 id="String-class"><a href="#String-class" class="headerlink" title="String class"></a>String class</h2><p>string-test.cpp<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    String s1(),</span><br><span class="line">    <span class="function">String <span class="title">s2</span><span class="params">(<span class="string">"hello"</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">s3</span><span class="params">(s1)</span></span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s3 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    s3 = s2;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s3 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>string.h<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __MYSTRING__</span></span><br><span class="line">define __MYSTRING__</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">String</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">String::function(...)   ...</span><br><span class="line">Global-function(...)    ...</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></p><h3 id="Big-Three-三个特殊函数"><a href="#Big-Three-三个特殊函数" class="headerlink" title="Big Three, 三个特殊函数"></a>Big Three, 三个特殊函数</h3><p>Big Three：拷贝构造、拷贝赋值、析构函数<br>【注】拷贝构造、拷贝赋值，在带有指针的情况下，不能用编译器自带的那一套，需要自己编写。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">String</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    String(<span class="keyword">const</span> <span class="keyword">char</span>* cstr = <span class="number">0</span>);</span><br><span class="line">    String(<span class="keyword">const</span> String&amp; str);<span class="comment">//拷贝构造</span></span><br><span class="line">    String&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> String&amp; s);<span class="comment">//操作符重载（拷贝赋值）</span></span><br><span class="line">    ~String();<span class="comment">//析构函数</span></span><br><span class="line">    <span class="function"><span class="keyword">char</span>* <span class="title">get_c_str</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> m_data&#125;;<span class="comment">//inline</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">char</span>* m_data;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>【注】类似于动态分配的方式，用指针指向字符串，而不要用数组。</p><h3 id="ctor和dtor-构造函数和析构函数"><a href="#ctor和dtor-构造函数和析构函数" class="headerlink" title="ctor和dtor(构造函数和析构函数)"></a>ctor和dtor(构造函数和析构函数)</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span> String::String(<span class="keyword">const</span> <span class="keyword">char</span>* cstr = <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(cstr)</span><br><span class="line">    &#123;</span><br><span class="line">        m_data = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="built_in">strlen</span>(cstr)+<span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(m_data, cstr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;<span class="comment">//未指定初值</span></span><br><span class="line">        m_data = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1</span>];</span><br><span class="line">        *m_data = <span class="string">'\0'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> String::~String()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span>[] m_data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="function">String <span class="title">s1</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">s2</span><span class="params">(<span class="string">"hello"</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    String* p = <span class="keyword">new</span> String(<span class="string">"hello"</span>);</span><br><span class="line">    <span class="keyword">delete</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>【注】离开作用域（一对大括号）时，s1,s2自然而然调用析构函数，p手动调用析构函数。</p><h3 id="class-with-pointer-members-必须有-copy-ctor-和-copy-op"><a href="#class-with-pointer-members-必须有-copy-ctor-和-copy-op" class="headerlink" title="class with pointer members 必须有 copy ctor 和 copy op="></a>class with pointer members 必须有 copy ctor 和 copy op=</h3><p>copy ctor(拷贝构造)<br>copy op=(拷贝赋值) </p><p>e.g.<br>a有一个data，指向Hello\0<br>b有一个data，指向World\0</p><p>如果使用 default copy ctor 或 default op= 就会形成以下局面<br>b = a;<br>导致b的指针也指向Hello\0</p><p>而World\0造成memory leak（内存泄漏）<br>这种叫做<strong>浅拷贝</strong></p><h4 id="cpoy-ctor-拷贝构造函数"><a href="#cpoy-ctor-拷贝构造函数" class="headerlink" title="cpoy ctor(拷贝构造函数)"></a>cpoy ctor(拷贝构造函数)</h4><p><strong>深拷贝</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span> String::String(<span class="keyword">const</span> String&amp; str)</span><br><span class="line">&#123;</span><br><span class="line">    m_data = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="built_in">strlen</span>(str.m_data)+<span class="number">1</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(m_data, str.m_data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="function">String <span class="title">s1</span><span class="params">(<span class="string">"hello"</span>)</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">s2</span><span class="params">(s1)</span></span>;</span><br><span class="line"><span class="comment">//  String s2 = s1;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="copy-assignment-operator-拷贝赋值函数"><a href="#copy-assignment-operator-拷贝赋值函数" class="headerlink" title="copy assignment operator(拷贝赋值函数)"></a>copy assignment operator(拷贝赋值函数)</h4><p>【注】类比：原来有一个装水和油的瓶子。现在要赋值，步骤：</p><ol><li>倒掉油（杀掉自己）</li><li>将瓶子改造成水瓶一样大（重新创造自己）</li><li>将水从水瓶倒入新瓶（拷贝过来）</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span> String&amp; String::<span class="keyword">operator</span>=(<span class="keyword">const</span> String&amp;)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span> == &amp;str)<span class="comment">//检测自我赋值(self assignment)</span></span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">delete</span>[] m_data;<span class="comment">//杀掉自己</span></span><br><span class="line">    m_data = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="built_in">strlen</span>(str.m_data) + <span class="number">1</span>];<span class="comment">//重新创造自己</span></span><br><span class="line">    <span class="built_in">strcpy</span>(m_data, str.m_data);<span class="comment">//拷贝过来</span></span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="function">String <span class="title">s1</span><span class="params">(<span class="string">"hello"</span>)</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">s2</span><span class="params">(s1)</span></span>;</span><br><span class="line">    s2 = s1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="一定要在-operator-中检查是否-self-assignment"><a href="#一定要在-operator-中检查是否-self-assignment" class="headerlink" title="一定要在 operator= 中检查是否 self assignment"></a>一定要在 operator= 中检查是否 self assignment</h5><p>【注】这样做不仅是为了提高效率，不做还会影响正确性。</p><p>比如， <em>this和rhs的指针指向同一片内存Hello\0<br>前述operator=的第一件事情就是delete，造成</em>this和rhs指向？？？<br>然后，当企图存取（访问）rhs，产生不确定行为(undefined behavior)</p><p>output函数<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream.h&gt;</span></span></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os, <span class="keyword">const</span> String&amp; str)</span><br><span class="line">&#123;</span><br><span class="line">    os &lt;&lt; str.get_c_str();</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="function">String <span class="title">s1</span><span class="params">(<span class="string">"hello"</span>)</span></span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="堆，栈与内存管理"><a href="#堆，栈与内存管理" class="headerlink" title="堆，栈与内存管理"></a>堆，栈与内存管理</h1><h2 id="所谓stack-栈-，所谓heap-堆"><a href="#所谓stack-栈-，所谓heap-堆" class="headerlink" title="所谓stack(栈)，所谓heap(堆)"></a>所谓stack(栈)，所谓heap(堆)</h2><p>Stack，是存在于某作用域(scope)的一块内存空间(memory space)。例如当你调用函数，函数本身即会形成一个stack用来放置它所接收的参数，以及返回地址。<br>在函数本体(function body)内声明的任何变量，其所使用的内存块都取自上述stack。</p><p>Heap，或谓system heap，是指由操作系统提供的一块global内存空间，程序可动态分配(dynamic allocated)从某中获得若干区块(blocks)。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complex</span>&#123;</span>...&#125;;</span><br><span class="line">...</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">Complex <span class="title">c1</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">    Complex* p = <span class="keyword">new</span> Complex(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>c1所占用的空间来自stack<br>Complex(3)是个临时对象，其所占用的空间乃是以new自heap动态分配而得，并由p指向。</p><h2 id="stack-objects-的生命期"><a href="#stack-objects-的生命期" class="headerlink" title="stack objects 的生命期"></a>stack objects 的生命期</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complex</span>&#123;</span>...&#125;;</span><br><span class="line">...</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">Complex <span class="title">c1</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>c1便是所谓stack object，其生命在作用域(scope)结束之后结束。<br>这种作用域内的object，又称为auto object，因为它会被“自动”清理。</p><h2 id="stack-local-objects-的生命期"><a href="#stack-local-objects-的生命期" class="headerlink" title="stack local objects 的生命期"></a>stack local objects 的生命期</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complex</span>&#123;</span>...&#125;;</span><br><span class="line">...</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> Complex <span class="title">c2</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>c2便是所谓的static object，其生命在作用域(scope)结束之后仍然存在，直到整个程序结束。</p><h2 id="global-objects-的生命期"><a href="#global-objects-的生命期" class="headerlink" title="global objects 的生命期"></a>global objects 的生命期</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complex</span>&#123;</span>...&#125;;</span><br><span class="line">...</span><br><span class="line"><span class="function">Complex <span class="title">c3</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>c3便是所谓global object，其生命在整个程序结束之后才结束。也可以把它视为一种static object，其作用域是“整个程序”。</p><h2 id="heap-objects-的生命期"><a href="#heap-objects-的生命期" class="headerlink" title="heap objects 的生命期"></a>heap objects 的生命期</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complex</span>&#123;</span>...&#125;;</span><br><span class="line">...</span><br><span class="line">&#123;</span><br><span class="line">    Complex* p = <span class="keyword">new</span> Complex;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">delete</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>p所指的便是heap object，其生命在它被deleted之后结束。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complex</span>&#123;</span>...&#125;;</span><br><span class="line">...</span><br><span class="line">&#123;</span><br><span class="line">    Complex* p = <span class="keyword">new</span> Complex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上为内存泄漏(memory leak)，因为当作用域结束，p所指的heap object仍然存在，但指针p的生命却结束了，作用域之外再也看不到p（也就没机会delete p）。</p><h2 id="new-先分配memory-再调用ctor"><a href="#new-先分配memory-再调用ctor" class="headerlink" title="new:先分配memory,再调用ctor"></a>new:先分配memory,再调用ctor</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Complex* pc = <span class="keyword">new</span> Complex(<span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>编译器转化为<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Complex *pc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span>* mem = <span class="keyword">operator</span> <span class="keyword">new</span>(<span class="keyword">sizeof</span>(Complex));<span class="comment">//分配内存</span></span><br><span class="line">pc = <span class="keyword">static_cast</span>&lt;Complex*&gt;(mem);<span class="comment">//转型</span></span><br><span class="line">pc-&gt;Complex::Complex(<span class="number">1</span>, <span class="number">2</span>);<span class="comment">//构造函数</span></span><br></pre></td></tr></table></figure></p><p>operator new是一个函数，其内部调用malloc(n)<br>构造函数的全名是<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Complex::Complex(pc, <span class="number">1</span> ,<span class="number">2</span>);</span><br></pre></td></tr></table></figure></p><p>pc即隐藏的参数this。</p><h2 id="delete-先调用dtor-再释放memory"><a href="#delete-先调用dtor-再释放memory" class="headerlink" title="delete: 先调用dtor,再释放memory"></a>delete: 先调用dtor,再释放memory</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Complex* ps = <span class="keyword">new</span> Complex(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">...</span><br><span class="line"><span class="keyword">delete</span> ps;</span><br></pre></td></tr></table></figure><p>编译器转化为<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Complex::~Complex(ps);<span class="comment">//析构函数</span></span><br><span class="line"><span class="function"><span class="keyword">operator</span> <span class="title">delete</span><span class="params">(ps)</span></span>;<span class="comment">//释放内存</span></span><br></pre></td></tr></table></figure></p><p>delete函数内部调用free(ps)</p><p>析构函数先删除内容，delete删除指针</p><h2 id="动态分配所得的内存块-memory-block-in-VC"><a href="#动态分配所得的内存块-memory-block-in-VC" class="headerlink" title="动态分配所得的内存块(memory block),in VC"></a>动态分配所得的内存块(memory block),in VC</h2><p>Complex大小为8b，调试模式下会增加灰色的内存块（32+4），并且收尾各有一个cookie（4*2）（用于回收）<br>vc每一块都是16的倍数，所以需要一些填补物(pad)</p><p>release下没有灰色部分</p><p>String大小为4b<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/C++面向对象程序设计（侯捷）笔记——动态分配所得的内存块.png?raw=true" alt="动态分配所得的内存块" title="">                </div>                <div class="image-caption">动态分配所得的内存块</div>            </figure></p><h2 id="动态分配所得的array"><a href="#动态分配所得的array" class="headerlink" title="动态分配所得的array"></a>动态分配所得的array</h2><p>vc用一个整数记录数组个数，所以+4<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/C++面向对象程序设计（侯捷）笔记——动态分配所得的array.png?raw=true" alt="动态分配所得的array" title="">                </div>                <div class="image-caption">动态分配所得的array</div>            </figure></p><h2 id="array-new一定要搭配array-delete"><a href="#array-new一定要搭配array-delete" class="headerlink" title="array new一定要搭配array delete"></a>array new一定要搭配array delete</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/hubojing/BlogImages/master/C%2B%2B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%EF%BC%88%E4%BE%AF%E6%8D%B7%EF%BC%89%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94array%20new%E4%B8%80%E5%AE%9A%E8%A6%81%E6%90%AD%E9%85%8Darray%20delete.png" alt="array new一定要搭配array delete" title="">                </div>                <div class="image-caption">array new一定要搭配array delete</div>            </figure><p>【注】看清内存泄漏的地方。  </p><h1 id="扩展补充：类模板，函数模板及其他"><a href="#扩展补充：类模板，函数模板及其他" class="headerlink" title="扩展补充：类模板，函数模板及其他"></a>扩展补充：类模板，函数模板及其他</h1><h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><p>静态函数和一般成员函数的区别：静态函数没有this pointer<br>静态函数只能处理静态数据</p><p>如设计银行户头的类<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">double</span> m_rate;<span class="comment">//静态数据</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">set_rate</span><span class="params">(<span class="keyword">const</span> <span class="keyword">double</span>&amp; x)</span></span>&#123;m_rate = x;&#125;<span class="comment">//静态函数</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">double</span> Account::m_rate = <span class="number">8.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Account::set_rate(<span class="number">5.0</span>);</span><br><span class="line"></span><br><span class="line">    Account a;</span><br><span class="line">    a.set_rate(<span class="number">7.0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>调用static函数的方式有二：<br>（1）通过object调用<br>（2）通过class name调用</p><h2 id="把ctor放在private区"><a href="#把ctor放在private区" class="headerlink" title="把ctor放在private区"></a>把ctor放在private区</h2><p>Singleton<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">static</span> A&amp; getInstance&#123;<span class="keyword">return</span> a;&#125;;<span class="comment">//取得唯一的自己</span></span><br><span class="line">    setup()&#123;...&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    A();<span class="comment">//任何人不能创建它</span></span><br><span class="line">    A(<span class="keyword">const</span> A&amp; rhs);</span><br><span class="line">    <span class="keyword">static</span> A a;<span class="comment">//已经创建了一份</span></span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>使用：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A::getInstance().setup();</span><br></pre></td></tr></table></figure></p><p>如果不用a，但a仍然存在，为避免资源浪费，更好的写法是：<br>Meyers Singleton<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> A&amp; <span class="title">getInstance</span><span class="params">()</span></span>;</span><br><span class="line">    setup() &#123;...&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    A();</span><br><span class="line">    A(<span class="keyword">const</span> A&amp; rhs);</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">A&amp; A::getInstance()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> A a;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A::getInstance().setup();</span><br></pre></td></tr></table></figure></p><h2 id="cout"><a href="#cout" class="headerlink" title="cout"></a>cout</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> _<span class="title">IO_ostream_withassign</span>:</span><span class="keyword">public</span> ostream&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">extern</span> _IO_ostream_withassign <span class="built_in">cout</span>;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ostream</span>:</span><span class="keyword">virtual</span> <span class="keyword">public</span> ios</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ostream&amp; <span class="keyword">operator</span>&lt;&lt;(<span class="keyword">char</span> c);</span><br><span class="line">    ostream&amp; <span class="keyword">operator</span>&lt;&lt;(<span class="keyword">unsigned</span> <span class="keyword">char</span> c)&#123;<span class="keyword">return</span> (*<span class="keyword">this</span>)&lt;&lt;(<span class="keyword">char</span>)c;&#125;</span><br><span class="line">    ostream&amp; <span class="keyword">operator</span>&lt;&lt;(<span class="keyword">signed</span> <span class="keyword">char</span> c)&#123;<span class="keyword">return</span> (*<span class="keyword">this</span>)&lt;&lt;(<span class="keyword">char</span>)c;&#125;</span><br><span class="line">    ostream&amp; <span class="keyword">operator</span>&lt;&lt;(<span class="keyword">const</span> <span class="keyword">char</span> *s);</span><br><span class="line">    ostream&amp; <span class="keyword">operator</span>&lt;&lt;(<span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> *s)</span><br><span class="line">    &#123;<span class="keyword">return</span> (*<span class="keyword">this</span>) &lt;&lt; (<span class="keyword">const</span> <span class="keyword">char</span>*)s;&#125;</span><br><span class="line">    ostream&amp; <span class="keyword">operator</span>&lt;&lt;(<span class="keyword">const</span> <span class="keyword">signed</span> <span class="keyword">char</span> *s)</span><br><span class="line">    &#123;reutrn (*<span class="keyword">this</span>) &lt;&lt; (<span class="keyword">const</span> <span class="keyword">char</span>*)s;&#125;</span><br><span class="line">    ostream&amp; <span class="keyword">operator</span>&lt;&lt;(<span class="keyword">const</span> <span class="keyword">void</span> *p);</span><br><span class="line">    ostream&amp; <span class="keyword">operator</span>&lt;&lt;(<span class="keyword">int</span> n);</span><br><span class="line">    ostream&amp; <span class="keyword">operator</span>&lt;&lt;(<span class="keyword">unsigned</span> <span class="keyword">int</span> n);</span><br><span class="line">    ostream&amp; <span class="keyword">operator</span>&lt;&lt;(<span class="keyword">long</span> n);</span><br><span class="line">    ostream&amp; <span class="keyword">operator</span>&lt;&lt;(<span class="keyword">unsigned</span> <span class="keyword">long</span> n);</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="class-template-类模板"><a href="#class-template-类模板" class="headerlink" title="class template,类模板"></a>class template,类模板</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">complex</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">complex</span>(T r = <span class="number">0</span>, T i = <span class="number">0</span>):re(r), im(i)</span><br><span class="line">    &#123;&#125;</span><br><span class="line">    <span class="keyword">complex</span>&amp; <span class="keyword">operator</span> += (<span class="keyword">const</span> <span class="keyword">complex</span>)</span><br><span class="line">    T real() <span class="keyword">const</span> &#123;<span class="keyword">return</span> re;&#125;</span><br><span class="line">    <span class="function">T <span class="title">imag</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> im;&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T re, im;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">complex</span>&amp; __doapl(<span class="keyword">complex</span>*, <span class="keyword">const</span> <span class="keyword">complex</span>&amp;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>使用：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">complex</span>&lt;<span class="keyword">double</span>&gt; c1(<span class="number">2.5</span>, <span class="number">1.5</span>);</span><br><span class="line">    <span class="keyword">complex</span>&lt;<span class="keyword">int</span>&gt; c2(<span class="number">2</span>, <span class="number">6</span>);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="function-template-函数模板"><a href="#function-template-函数模板" class="headerlink" title="function template, 函数模板"></a>function template, 函数模板</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stone r1(2,3),r(3,3),r3;</span><br><span class="line">r3 = min(r1, r2);</span><br></pre></td></tr></table></figure><p>编译器会对function template进行引数推导(argument deduction)<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">const</span> <span class="title">T</span>&amp; <span class="title">min</span>(<span class="title">const</span> <span class="title">T</span>&amp; <span class="title">a</span>, <span class="title">const</span> <span class="title">T</span>&amp; <span class="title">b</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">return</span> b &lt; a ? b : a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>引数推导的结果，T为stone，于是调用stone::operator&lt;<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">stone</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    stone(<span class="keyword">int</span> w, <span class="keyword">int</span> h, <span class="keyword">int</span> we):_w(w), _h(h), _weight(we)</span><br><span class="line">    &#123;&#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt; (<span class="keyword">const</span> strone&amp; rhs) <span class="keyword">const</span></span><br><span class="line">    &#123;<span class="keyword">return</span> _weight &lt; rhs._weight;&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> _w, _h, _weight;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="namespace"><a href="#namespace" class="headerlink" title="namespace"></a>namespace</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="built_in">std</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>using directive<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &lt;&lt; ...;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ...;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>using declaration<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span>&lt;&lt;...;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;...;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span>&lt;&lt;...;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;...;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="更多细节与深入"><a href="#更多细节与深入" class="headerlink" title="更多细节与深入"></a>更多细节与深入</h2><ul><li>operator type() const;</li><li>*explicit complex(…):initialization list{}</li><li>pointer-like object</li><li>funtion-like object</li><li>Namespace</li><li>template specialization</li><li>Standard Library</li><li>variadic template(since C++11)</li><li>move ctor(since C++11)</li><li>Rvalue reference(since C++11)</li><li>auto(since C++11)</li><li>lambda(since C++11)</li><li>range-base for loop(since C++11)</li><li>unordered containers(since C++ 11)</li><li>…</li></ul><h1 id="组合与继承"><a href="#组合与继承" class="headerlink" title="组合与继承"></a>组合与继承</h1><h2 id="Object-Oriented-Programming-Object-Oriented-Design-OOP-OOD"><a href="#Object-Oriented-Programming-Object-Oriented-Design-OOP-OOD" class="headerlink" title="Object Oriented Programming, Object Oriented Design  OOP, OOD"></a>Object Oriented Programming, Object Oriented Design  OOP, OOD</h2><ul><li>Inheritance(继承)</li><li>Composition(复合)</li><li>Delegation(委托)</li></ul><h3 id="Compostion-复合-，表示has-a"><a href="#Compostion-复合-，表示has-a" class="headerlink" title="Compostion(复合)，表示has-a"></a>Compostion(复合)，表示has-a</h3><p><strong>Adapter</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span> <span class="title">Sequence</span> = <span class="title">deque</span>&lt;T&gt;&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">queue</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    Sequence c;<span class="comment">//底层容器</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//以下完全利用c的操作函数完成</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> c.empty();&#125;</span><br><span class="line">    <span class="function">size_type <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> c.size();&#125;</span><br><span class="line">    <span class="function">reference <span class="title">front</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> c.front();&#125;</span><br><span class="line">    <span class="function">reference <span class="title">back</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> c.back();&#125;</span><br><span class="line">    <span class="comment">//deque是两端可进出，queue是末端进前端出（先进先出）</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">const</span> value_type&amp; x)</span> </span>&#123;c.push_back(x);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;c.pop_front();&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>从内存角度看<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">queue</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="built_in">deque</span>&lt;T&gt; c;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>Sizeof: 40</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">deque</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    Itr&lt;T&gt; start;</span><br><span class="line">    Itr&lt;T&gt; finish;</span><br><span class="line">    T** <span class="built_in">map</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> map_size;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Sizeof: 16 * 2 + 4 + 4</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">Itr</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    T* cur;</span><br><span class="line">    T* first;</span><br><span class="line">    T* last;</span><br><span class="line">    T** node;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Sizeof: 4*4</p><h3 id="Composition-复合-关系下的构造和析构"><a href="#Composition-复合-关系下的构造和析构" class="headerlink" title="Composition(复合)关系下的构造和析构"></a>Composition(复合)关系下的构造和析构</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/C++面向对象程序设计（侯捷）笔记——复合关系下的构造和析构.png?raw=true" alt="复合关系下的构造和析构" title="">                </div>                <div class="image-caption">复合关系下的构造和析构</div>            </figure><p><strong>构造由内而外</strong><br>Container的构造函数首先调用Component的default构造函数，然后才执行自己。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Container::Container(...):Component()&#123;...&#125;;</span><br></pre></td></tr></table></figure></p><p><strong>析构由外而内</strong><br>Container的析构函数首先执行自己，然后才调用Component的析构函数。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Container:~Container(...)&#123;... ~Component()&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="Delegation-委托-Composition-by-reference"><a href="#Delegation-委托-Composition-by-reference" class="headerlink" title="Delegation(委托). Composition by reference."></a>Delegation(委托). Composition by reference.</h3><p><strong>Handle/Body(pImpl)</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//file String.hpp</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringRep</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">String</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    String();</span><br><span class="line">    String(<span class="keyword">const</span> <span class="keyword">char</span>* s);</span><br><span class="line">    String(<span class="keyword">const</span> String&amp; s);</span><br><span class="line">    String &amp;<span class="keyword">operator</span>=(<span class="keyword">const</span> String&amp; s);</span><br><span class="line">    ~String();</span><br><span class="line">...</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    StringRep* rep;<span class="comment">//pimpl</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//file String.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"String.hpp"</span></span></span><br><span class="line"><span class="keyword">namespace</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringRep</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">String</span>;</span></span><br><span class="line">    StringRep(<span class="keyword">const</span> <span class="keyword">char</span>* s);</span><br><span class="line">    ~StringRep();</span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line">    <span class="keyword">char</span>* rep;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String::String()&#123;...&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>这种手法可称为编译防火墙<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/C++面向对象程序设计（侯捷）笔记——引用计数.png?raw=true" alt="引用计数" title="">                </div>                <div class="image-caption">引用计数</div>            </figure><br>n=3<br>共享同一个Hello，节省内存。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/hubojing/BlogImages/master/C%2B%2B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%EF%BC%88%E4%BE%AF%E6%8D%B7%EF%BC%89%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E5%A7%94%E6%89%98%20%E5%9B%BE.png" alt="委托 图" title="">                </div>                <div class="image-caption">委托 图</div>            </figure></p><h3 id="Inheritance-继承-表示is-a"><a href="#Inheritance-继承-表示is-a" class="headerlink" title="Inheritance(继承), 表示is-a"></a>Inheritance(继承), 表示is-a</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">List_node_base</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    _List_node_base* _M_next;</span><br><span class="line">    _List_node_base* _M_prev;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Tp&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">List_node</span>:</span><span class="keyword">public</span> _List_node_base</span><br><span class="line">&#123;</span><br><span class="line">    _Tp _M_data;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/hubojing/BlogImages/master/C%2B%2B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%EF%BC%88%E4%BE%AF%E6%8D%B7%EF%BC%89%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E7%BB%A7%E6%89%BF%20%E5%9B%BE.png" alt="继承 图" title="">                </div>                <div class="image-caption">继承 图</div>            </figure><h4 id="Inheritance-继承-关系下的构造和析构"><a href="#Inheritance-继承-关系下的构造和析构" class="headerlink" title="Inheritance(继承)关系下的构造和析构"></a>Inheritance(继承)关系下的构造和析构</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/C++面向对象程序设计（侯捷）笔记——继承关系下的构造和析构.png?raw=true" alt="内存上看" title="">                </div>                <div class="image-caption">内存上看</div>            </figure><p>base class的dtor必须是virtual，否则会出现undefined behavior</p><p><strong>构造由内而外</strong><br>Derived的构造函数首先调用Base的default构造函数，然后才执行自己。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Derived::Derived(...):Base()&#123;...&#125;;</span><br></pre></td></tr></table></figure></p><p><strong>析构由外而内</strong><br>Derived的析构函数首先执行自己，然后才调用Base的析构函数。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Derived::~Derived(...)&#123;...~Base()&#125;;</span><br></pre></td></tr></table></figure></p><h4 id="Inheritance-继承-with-virtual-functions-虚函数"><a href="#Inheritance-继承-with-virtual-functions-虚函数" class="headerlink" title="Inheritance(继承) with virtual functions(虚函数)"></a>Inheritance(继承) with virtual functions(虚函数)</h4><p>non-virtual函数：不希望derived class重新定义(override,复写)它。<br>virtual函数：希望derived class重新定义(override，复写)它，它已有默认定义。<br>pure virtual函数：希望derived class一定要重新定义(override)它，对它没有默认定义。</p><p>【注】：纯虚函数其实可以有定义，只是本文不提及。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shape</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;<span class="comment">//pure virtual</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">error</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; msg)</span></span>;<span class="comment">//impure virtual</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">objectID</span><span class="params">()</span> <span class="keyword">const</span></span>;<span class="comment">//non-virtual</span></span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span>:</span><span class="keyword">public</span> Shape &#123;...&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ellipse</span>:</span><span class="keyword">public</span> Shape &#123;...&#125;;</span><br></pre></td></tr></table></figure><p><strong>Template Method</strong><br><img src="" alt="继承 虚函数"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CDocument</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnFileOpen</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//这是个算法，每个cout输出代表一个实际动作</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"dialog..."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"check file status..."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"open file..."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        Serialize();</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"close file..."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"update all views..."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Serialize</span><span class="params">()</span>  </span>&#123;&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CMyDoc</span> :</span> <span class="keyword">public</span> CDocument</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Serialize</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//只有应用程序本身才知道如何读取自己的文件（格式）</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"CMyDoc::Serialize()"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CMyDoc myDoc;<span class="comment">//假设对应[File/open]</span></span><br><span class="line">    myDoc.OnFileOpen();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Inheritance-Composition关系下的构造和析构"><a href="#Inheritance-Composition关系下的构造和析构" class="headerlink" title="Inheritance + Composition关系下的构造和析构"></a>Inheritance + Composition关系下的构造和析构</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/C++面向对象程序设计（侯捷）笔记——继承+复合.png?raw=true" alt="继承+复合" title="">                </div>                <div class="image-caption">继承+复合</div>            </figure><p>第一个问号：</p><p>第二个问号：构造函数调用顺序：Component, Base , Derived<br>析构函数则相反。</p><h3 id="Delegation-委托-Inheritance-继承"><a href="#Delegation-委托-Inheritance-继承" class="headerlink" title="Delegation(委托) + Inheritance(继承)"></a>Delegation(委托) + Inheritance(继承)</h3><p><strong>Observer</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subject</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> m_value;</span><br><span class="line">    <span class="built_in">vector</span>&lt;Observer*&gt; m_views;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">attach</span><span class="params">(Observer* obs)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_views.push_back(obs);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set_val</span><span class="params">(<span class="keyword">int</span> value)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_value = value;</span><br><span class="line">        notify();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">notify</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m_views.size(); ++i)</span><br><span class="line">            m_views[i]-&gt;update(<span class="keyword">this</span>, m_value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Subject* sub, <span class="keyword">int</span> value)</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/C++面向对象程序设计（侯捷）笔记——委托+继承.png?raw=true" alt="委托+继承" title="">                </div>                <div class="image-caption">委托+继承</div>            </figure><p><strong>Composite</strong><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/C++面向对象程序设计（侯捷）笔记——Composite.png?raw=true" alt="Composite" title="">                </div>                <div class="image-caption">Composite</div>            </figure></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Primitive</span>:</span><span class="keyword">public</span> Component</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Primitive(<span class="keyword">int</span> val):Component(val) &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Component</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> value;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Component(<span class="keyword">int</span> val) &#123; value = val; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Component*)</span> </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Composite</span>:</span><span class="keyword">public</span> Component</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;Component*&gt;c;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Composite(<span class="keyword">int</span> val):Component(val) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(Component* elem)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        c.push_back(elem);</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">**Prototype**</span><br><span class="line">![Prototype](https:<span class="comment">//github.com/hubojing/BlogImages/blob/master/C++面向对象程序设计（侯捷）笔记——Prototype.png?raw=true)</span></span><br><span class="line">出自Design Patterns Explained Simply</span><br><span class="line">```cpp</span><br><span class="line">#include&lt;iostream.h&gt;</span><br><span class="line"><span class="keyword">enum</span> imageType</span><br><span class="line">&#123;</span><br><span class="line">    LSAT, SPOT</span><br><span class="line">&#125;;</span><br><span class="line">class Image</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> <span class="keyword">void</span> draw() = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> Image *findAndClone(imageType);</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="keyword">virtual</span> imageType returnType() = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> Image* clone() = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//As each subclass of Image is declared, it registers its prototype</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> addPrototype(Image *image)</span><br><span class="line">    &#123;</span><br><span class="line">        _prototypes[_nextSlot++] = image;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">//addPrototype() saves each registered prototype here</span></span><br><span class="line">    <span class="keyword">static</span> Image* _prototypes[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> _nextSlot;</span><br><span class="line">&#125;;</span><br><span class="line">Image *Image::prototypes[];<span class="comment">//定义</span></span><br><span class="line"><span class="keyword">int</span> Image::_nextSlot;<span class="comment">//定义</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Client calls this public static member function when it needs an instance </span></span><br><span class="line">Image *Image::findAndClone(imageType type)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; _nextSlot; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(_prototypes[i]-&gt;returnType())</span><br><span class="line">        <span class="keyword">return</span> _prototypes[i]-&gt;clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子类<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LandSatImage</span>:</span><span class="keyword">public</span> Image</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">imageType <span class="title">returnType</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> LSAT;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"LandSatImage::draw"</span> &lt;&lt; _id &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//When clone() is called, call the one-argument with a dummy arg</span></span><br><span class="line">    <span class="function">Image *<span class="title">clone</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LandSatImage(<span class="number">1</span>); </span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="comment">//This is only called from clone()</span></span><br><span class="line">    LandSatImage(<span class="keyword">int</span> dummy)</span><br><span class="line">    &#123;</span><br><span class="line">        _id = _count++;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">//Mechanism for initializing an Image subclass - this causes</span></span><br><span class="line">    the <span class="keyword">default</span> ctor to be called, which registers the subclass's prototype</span><br><span class="line">    <span class="keyword">static</span> LandSatImage _landSatImage;</span><br><span class="line">    <span class="comment">//This is only called when the private static data member is inited</span></span><br><span class="line">    LandSatImage()</span><br><span class="line">    &#123;</span><br><span class="line">        addPrototype(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Nominal "state" per instance mechanism</span></span><br><span class="line">    <span class="keyword">int</span> _id;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> _count;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//Register the subclass's prototype</span></span><br><span class="line">LandSatImage LandSatImage::_landSatImage;</span><br><span class="line"><span class="comment">//Initialize the "state" per instance mechanism</span></span><br><span class="line"><span class="keyword">int</span> LandSatImage::_count = <span class="number">1</span>;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;left&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1550076388605&amp;di=ccc7e1012e5eadf4fdefe9ed6bee1170&amp;imgtype=0&amp;src=http%3A%2F%2Fimg.mp.itc.cn%2Fupload%2F20170622%2F57ea5e537b91482b93347c7254ee59dd_th.jpg&quot; width=&quot;300&quot; height=&quot;180&quot; style=&quot;float:right;&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;　　&lt;strong&gt;侯捷老师带我飞，再学习C++系列。&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt; &lt;/div&gt;
    
    </summary>
    
      <category term="编程语言" scheme="https://hubojing.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="CPP" scheme="https://hubojing.github.io/tags/CPP/"/>
    
  </entry>
  
</feed>
