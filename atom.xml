<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>靖待的技术博客</title>
  
  <subtitle>小清新IT旅程|为中华之崛起而读书</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://hubojing.github.io/"/>
  <updated>2020-01-02T14:56:54.071Z</updated>
  <id>https://hubojing.github.io/</id>
  
  <author>
    <name>靖待</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2020——新的启航</title>
    <link href="https://hubojing.github.io/2020/01/02/2020%E2%80%94%E2%80%94%E6%96%B0%E7%9A%84%E5%90%AF%E8%88%AA/"/>
    <id>https://hubojing.github.io/2020/01/02/2020——新的启航/</id>
    <published>2020-01-02T13:42:00.000Z</published>
    <updated>2020-01-02T14:56:54.071Z</updated>
    
    <content type="html"><![CDATA[<div align="left"><br><img src="" width="300" height="180" style="float:right;"><br><br>　　<strong>20年代第一年的Flag已立</strong><br>　　<strong>其实这篇文章也没写完</strong><br><br><br> </div><a id="more"></a><p>　　这篇文章写的很匆忙，我猜自己后期可能会修改。现在是2020年1月2日21点42分，距离零点只有两个多小时了。（毕竟今年的常规Flag就是不能熬夜）<br>　　但我一定要写！本来这篇文章应该在2019年12月31日写完的，结果当日上午写另一篇文章才写了几百字，整个心就都飘去跨年活动了，确实很久没有这样期待一些活动了。<br>　　再不写的话，Flag的期限感就要没了。嗯，这也算是个仪式感吧！</p><p>　　首先向各位介绍一下近况，我从职场又回学校啦~开始我的研究生生活。<br>　　研究生生活到目前为止，我都感觉挺棒的，做学生真的是一件幸福的事情，坐在教室里听课，坐在实验室里看论文、写代码。生活简简单单，好像所有烦恼都随着重返校园又推迟了几年。而且学习氛围是真的好，不会因为你坐前排就很奇怪，也不会因为学得太晚而被吐槽。因为，前排坐的都是认识的同学，实验室也总有人会比我更晚离开。尤其是我所在的实验室，从来不用担心成为最后一个离开的人，无论多晚都有人还在这里学习。当我的努力学习成为一件稀疏平常的事情时，我感到很踏实。导师真的很负责，每周必会与我们至少见一面讨论目前科研进展，有人带的感觉真的非常好。<br>　　技术博客谈技术，我在读研后，最大的收获就是——我在认真科研了。<br>　　科研这两个字，曾经我以为此生不会再见了。由于我考的也是专硕，之前构想的是做项目，提高技术，然后进入心仪的大企业做开发。科研，留存于大学以前的梦，听起来就很高级的样子。大二那时曾很想涉足科研，奈何苦寻不到高人指点，为此着实苦恼了很久。读研后，导师似乎并不在乎学硕专硕这个名号，于是我就这样开始了科研的生活。<br>　　而我这个人自从大学以后，好像学会了从当下找出价值，干什么事情我都能找出意义来。所以后来工作我觉得很开心，现在回来读书我也觉得很开心。没有做项目，做起了学术，我好像也很开心。我甚至很珍惜这种机会。<br>　　我也跑到学术的大门口晃了！哈哈哈——真实想法<br>　　我想我应该快速成长起来，毕竟其他同学可能比我接触科研要系统得多。但我要补的知识确实太多了。我就连文献管理软件之前都没用过几次……所以我花了不少时间在我科研的准备上，包括科研的工具，科研怎么读论文等等。（当然都是通过和导师的交流以及万能的知乎）</p><p>　　现在是22：22，我感觉这篇文章算是写不完了。<br>　　那先看看去年的Flag完成了多少吧，</p><ul><li>不要熬夜，加强锻炼（0/1）<blockquote><p>读研前能做到，但天天失眠，读研后。。。和室友一起熬夜</p></blockquote></li><li>技术方面基础和实战两头抓（0.5/1）<blockquote><p>考研算是补了一些基础，不够还要多看书，实战还是弱</p></blockquote></li><li>提高算法能力，首先从多做题开始（0.5/1）<blockquote><p>为考研复试刷了一些题，平日也开始重视刷题，但总的说来还是刷得太少，不成体系</p></blockquote></li><li>继续提高英语水平，尤其是计算机英语（0/1）<blockquote><p>这一点要重点批评自己，后期电台几乎停更了，这是不好的趋势。前年更新了两百多期，去年只更新了八十多期，退步过于明显。这样却妄想六级上六百，我看五百都悬。今年说什么都要重启更新起来！</p></blockquote></li><li>研究方向的趋向性研讨（1/1）<blockquote><p>大方向是数据挖掘，小方向目前是推荐系统。</p></blockquote></li></ul><p>　　综上，2/5的完成度，2019年执行力不强。</p><p>　　2020年，20后都要出生了！想想他们<del>上小学</del>上幼儿园就要学编程……OMG</p><ol><li>不能熬夜（是不能，不是不要）</li><li>提高算法能力，刷爆Leetcode</li><li>科研方向努力钻研，早日定下开发还是算法<br>　　我知道目前市场上算法岗难度极大，但我既然目前在做科研，也希望读研期间的工作没有白费，所以希望尝试一番。<br>　　目前来说，开发还是算法，我还真拿不定，因为目前我对两者都还挺感兴趣，又或者说我对算法岗还不够了解。<br>　　我的愿望依然是想去目前一流的互联网公司，当然这本身就有难度，算法岗就更难了。不过梦想还是要有的，万一~~~</li><li>英语能力不能放松<br>　　看英语论文的时候，就发现英语还是有用的……<br>　　专业方面多读英文论文，注意论文的整理。<br>　　电台方面，必须重新更新起来。同时，自己稀烂的口语应该改善。</li><li>技术方面在一个语言上深耕<br>　　目前暂定Java</li></ol><p>　　目前只想到这些，感觉都能做到的话也很不错了。<br>　　22:50了！！！下线下线，在实验室赶作业般的写这篇博文，我真是（<del>手动滑稽</del>）</p><p>　　2020，新的生活冲冲冲！</p><p>　　——写于2020年1月2日的夜晚</p>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;left&quot;&gt;&lt;br&gt;&lt;img src=&quot;&quot; width=&quot;300&quot; height=&quot;180&quot; style=&quot;float:right;&quot;&gt;&lt;br&gt;&lt;br&gt;　　&lt;strong&gt;20年代第一年的Flag已立&lt;/strong&gt;&lt;br&gt;　　&lt;strong&gt;其实这篇文章也没写完&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt; &lt;/div&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>《推荐系统实践》笔记</title>
    <link href="https://hubojing.github.io/2019/11/30/%E3%80%8A%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E5%AE%9E%E8%B7%B5%E3%80%8B%E7%AC%94%E8%AE%B0/"/>
    <id>https://hubojing.github.io/2019/11/30/《推荐系统实践》笔记/</id>
    <published>2019-11-30T10:45:33.000Z</published>
    <updated>2019-12-27T13:55:38.121Z</updated>
    
    <content type="html"><![CDATA[<div align="left"><br><img src="http://img0.imgtn.bdimg.com/it/u=2317694558,3959665778&fm=26&gp=0.jpg" width="300" height="180" style="float:right;"><br><br><br>　　<strong>未完待续</strong><br><br><br> </div><a id="more"></a><h1 id="第1章-好的推荐系统"><a href="#第1章-好的推荐系统" class="headerlink" title="第1章 好的推荐系统"></a>第1章 好的推荐系统</h1><h2 id="什么是推荐系统"><a href="#什么是推荐系统" class="headerlink" title="什么是推荐系统"></a>什么是推荐系统</h2><p>推荐系统的基本任务是联系用户和物品，解决信息过载的问题。<br>社会化推荐(social recommendation)：向朋友咨询<br>基于内容的推荐(content-based filtering)：寻找和自己之前喜欢的物品相似的物品<br>基于协同过滤(collaborative filtering)：找到和自己历史兴趣相似的用户所喜欢的物品</p><h2 id="推荐系统评测"><a href="#推荐系统评测" class="headerlink" title="推荐系统评测"></a>推荐系统评测</h2><h3 id="实验方法"><a href="#实验方法" class="headerlink" title="实验方法"></a>实验方法</h3><p>离线实验（offline experiment）、用户调查（user study）、在线实验（online experiment）<br>离线实验步骤：</p><ol><li>通过日志系统获得用户行为数据，并按照一定格式生成一个标准的数据集;</li><li>将数据集按照一定的规则分成训练集和测试集;</li><li>在训练集上训练用户兴趣模型，在测试集上进行预测;</li><li>通过事先定义的离线指标评测算法在测试集上的预测结果。<br>在线实验：AB测试<br>AB测试是一种很常用的在线评测算法的实验方法。它通过一定的规则将用户随机分成几组，并对不同组的用户采用不同的算法，然后通过统计不同组用户的各种不同的评测指标比较不同算法，比如可以统计不同组用户的点击率，通过点击率比较不同算法的性能。<h3 id="评测指标"><a href="#评测指标" class="headerlink" title="评测指标"></a>评测指标</h3></li><li>用户满意度</li><li>预测准确度<br>评分预测：均方根误差RMSE和平均绝对误差（MAE）<br>TopN推荐：准确率（precision）和召回率（recall）</li><li>覆盖率（coverage）<br>信息熵和基尼系数（Gini Index）</li><li>多样性</li><li>新颖性</li><li>惊喜度</li><li>信任度</li><li>实时性</li><li>健壮性</li><li>商业目标<h3 id="评测维度"><a href="#评测维度" class="headerlink" title="评测维度"></a>评测维度</h3>用户维度<br>物品维度<br>时间维度</li></ol><h1 id="第2章-利用用户行为数据"><a href="#第2章-利用用户行为数据" class="headerlink" title="第2章 利用用户行为数据"></a>第2章 利用用户行为数据</h1><p>基于用户行为分析的推荐算法是个性化推荐系统的重要算法，学术界一般将这种类型的算法称为协同过滤算法。<br>按反馈的明确性分，显式反馈（explicit feedback）和隐式反馈（implicit feedback）<br>按反馈的方向分，正反馈（用户的行为倾向于指用户喜欢该物品）和负反馈（用户的行为倾向于指用户不喜欢该物品）<br>有代表性的数据集：<br>无上下文信息的隐性反馈数据集：每一条行为记录仅仅包含用户ID和物品ID。<br>无上下文信息的显性反馈数据集：每一条记录包含用户ID、物品ID和用户对物品的评分。<br>有上下文信息的隐性反馈数据集：每一条记录包含用户ID、物品ID和用户对物品产生行为的时间戳。<br>有上下文信息的显性反馈数据集：每一条记录包含用户ID、物品ID、用户对物品的评分和评分行为发生的时间戳。</p><h2 id="用户活跃度和物品流行度的分布"><a href="#用户活跃度和物品流行度的分布" class="headerlink" title="用户活跃度和物品流行度的分布"></a>用户活跃度和物品流行度的分布</h2><p>PowerLaw分布（长尾分布）<br>$f(x)=αx^k$<br>令$f_u(k)$为对k个物品产生过行为的用户数，令$f_i(k)$为被k个用户产生过行为的物品数。它们都满足长尾分布。<br>$f_i(k)=a_ik^{β_i}$<br>$f_u(k)=a_uk^{β_u}$<br>物品的流行度指对物品产生过行为的用户总数。<br>用户的活跃度为用户产生过行为的物品总数。</p><h2 id="用户活跃度和物品流行度的关系"><a href="#用户活跃度和物品流行度的关系" class="headerlink" title="用户活跃度和物品流行度的关系"></a>用户活跃度和物品流行度的关系</h2><p>仅仅基于用户行为数据设计的推荐算法一般称为协同过滤算法。<br>基于邻域的方法（neighborhood-based）：基于用户的协同过滤算法（推荐和用户兴趣相似的其他用户喜欢的物品）、基于物品的协同过滤算法（推荐和他之前喜欢的物品相似的物品）<br>隐语义模型（latent factor model）<br>基于图的随机游走算法（random walk on graph）</p><h2 id="基于邻域的算法"><a href="#基于邻域的算法" class="headerlink" title="基于邻域的算法"></a>基于邻域的算法</h2><h3 id="基于用户的协同过滤算法"><a href="#基于用户的协同过滤算法" class="headerlink" title="基于用户的协同过滤算法"></a>基于用户的协同过滤算法</h3><p>步骤：</p><ol><li>找到和目标用户兴趣相似的用户集合。</li><li>找到这个集合中的用户喜欢的，且目标用户没有听说过的物品推荐给目标用户。<br>步骤1关键是计算两个用户的兴趣相似度。<br>利用行为的相似度计算兴趣相似度。Jaccard公式计算用户u和用户v的兴趣相似度。（N(u)表示用户u曾经有过正反馈的物品集合）<br>$w_{uv}=|{N(u)∩N(v)}|/|{N(u)∪N(v)}|$<br>或者通过余弦相似度<br>$w_{uv}=|{N(u)∩N(v)}|/√(|{N(u)||N(v)}|)$</li></ol><h3 id="基于物品的协同过滤算法"><a href="#基于物品的协同过滤算法" class="headerlink" title="基于物品的协同过滤算法"></a>基于物品的协同过滤算法</h3><p>UserCF的推荐更社会化，反映了用户所在的小型兴趣群体中物品的热门程度，而ItemCF的推荐更加个性化，反映了用户自己的兴趣传承。</p>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;left&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://img0.imgtn.bdimg.com/it/u=2317694558,3959665778&amp;fm=26&amp;gp=0.jpg&quot; width=&quot;300&quot; height=&quot;180&quot; style=&quot;float:right;&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;　　&lt;strong&gt;未完待续&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt; &lt;/div&gt;
    
    </summary>
    
      <category term="推荐系统" scheme="https://hubojing.github.io/categories/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="推荐系统" scheme="https://hubojing.github.io/tags/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>注意力机制</title>
    <link href="https://hubojing.github.io/2019/11/26/%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6/"/>
    <id>https://hubojing.github.io/2019/11/26/注意力机制/</id>
    <published>2019-11-26T06:08:38.000Z</published>
    <updated>2019-12-27T13:55:28.064Z</updated>
    
    <content type="html"><![CDATA[<div align="left"><br><img src="http://img0.imgtn.bdimg.com/it/u=2317694558,3959665778&fm=26&gp=0.jpg" width="300" height="180" style="float:right;"><br><br><br>　　<strong>没写完</strong><br><br><br> </div><a id="more"></a><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>从众多信息中选择出对当前任务目标更关键的信息。</p><h1 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h1><p>图像领域到自然语言处理领域</p><h1 id="Encoder-Decoder框架"><a href="#Encoder-Decoder框架" class="headerlink" title="Encoder-Decoder框架"></a>Encoder-Decoder框架</h1><p>目前大多数注意力模型附着于Encoder-Decoder框架。<br>一般而言，文本处理和语音识别的Encoder部分通常采用RNN模型，图像处理的Encoder一般采用CNN模型。<br>对比：分心模型<br>Attention函数的本质可以被描述为一个查询（query）到一系列（键key-值value）对的映射。<br>在计算attention时主要分为三步，第一步是将query和每个key进行相似度计算得到权重，常用的相似度函数有点积，拼接，感知机等；然后第二步一般是使用一个softmax函数对这些权重进行归一化；最后将权重和相应的键值value进行加权求和得到最后的attention。目前在NLP研究中，key和value常常都是同一个，即key=value。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://blog.csdn.net/hpulfc/article/details/80448570" target="_blank" rel="noopener">https://blog.csdn.net/hpulfc/article/details/80448570</a><br><a href="https://www.cnblogs.com/robert-dlut/p/8638283.html" target="_blank" rel="noopener">https://www.cnblogs.com/robert-dlut/p/8638283.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;left&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://img0.imgtn.bdimg.com/it/u=2317694558,3959665778&amp;fm=26&amp;gp=0.jpg&quot; width=&quot;300&quot; height=&quot;180&quot; style=&quot;float:right;&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;　　&lt;strong&gt;没写完&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt; &lt;/div&gt;
    
    </summary>
    
      <category term="人工智能" scheme="https://hubojing.github.io/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
      <category term="注意力机制" scheme="https://hubojing.github.io/tags/%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>一元线性回归</title>
    <link href="https://hubojing.github.io/2019/11/25/%E4%B8%80%E5%85%83%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/"/>
    <id>https://hubojing.github.io/2019/11/25/一元线性回归/</id>
    <published>2019-11-25T07:31:46.000Z</published>
    <updated>2019-12-27T13:55:21.098Z</updated>
    
    <content type="html"><![CDATA[<div align="left"><br><img src="http://img0.imgtn.bdimg.com/it/u=2317694558,3959665778&fm=26&gp=0.jpg" width="300" height="180" style="float:right;"><br><br><br>　　<strong>深度学习实践系列笔记</strong><br><br><br> </div><a id="more"></a><h1 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h1><p>L1损失：基于模型预测的值与标签的实际值之差的绝对值<br>平方误差（L2误差）：均方误差（MSE）指每个样本的平均平方损失<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdnimg.cn/20191125164618335.png" alt="MSE" title="">                </div>                <div class="image-caption">MSE</div>            </figure></p><h1 id="梯度下降法"><a href="#梯度下降法" class="headerlink" title="梯度下降法"></a>梯度下降法</h1><p>梯度：矢量<br>沿着负梯度方向探索</p><h1 id="超参数"><a href="#超参数" class="headerlink" title="超参数"></a>超参数</h1><p>超参数：开始学习过程之前设置的参数，而不是训练得到的参数<br>典型超参数：学习率、神经网络的隐含层数量</p><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol><li>准备数据</li><li>构建模型</li><li>训练模型</li><li>进行预测</li></ol><h1 id="生成人工数据集"><a href="#生成人工数据集" class="headerlink" title="生成人工数据集"></a>生成人工数据集</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在jupyter中使用matplotlib显示图像需设为inline模式，否则不会显示图像</span></span><br><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置随机数种子</span></span><br><span class="line">np.random.seed(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#直接采用np生成等差数列的方法，生成100个点，每个点的取值在-1~1之间</span></span><br><span class="line">x_data = np.linspace(<span class="number">-1</span>, <span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># y=2x+1+噪声，噪声的维度与x_data一致</span></span><br><span class="line">y_data = <span class="number">2</span>*x_data + <span class="number">1.0</span> + np.random.randn(*x_data.shape) * <span class="number">0.4</span></span><br></pre></td></tr></table></figure><p>numpy.random.randn(d0, d1, …, dn)是从标准正态分布中返回一个或多个样本值<br>实参前加上<code>*</code>和<code>**</code>时代表拆包，单个<code>*</code>表示将元祖拆成一个个单独的实参</p><h1 id="画图"><a href="#画图" class="headerlink" title="画图"></a>画图</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#画出随机生成数据的散点图</span></span><br><span class="line">plt.scatter(x_data, y_data)</span><br><span class="line"></span><br><span class="line"><span class="comment">#画出线性函数y=2x+1</span></span><br><span class="line">plt.plot(x_data, <span class="number">2</span>*x_data + <span class="number">1.0</span>, color=<span class="string">'red'</span>, linewidth=<span class="number">3</span>)</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdnimg.cn/20191125173109443.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1Ym9qaW5n,size_16,color_FFFFFF,t_70" alt="散点图" title="">                </div>                <div class="image-caption">散点图</div>            </figure><h1 id="构建模型"><a href="#构建模型" class="headerlink" title="构建模型"></a>构建模型</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">x = tf.placeholder(<span class="string">"float"</span>, name = <span class="string">"x"</span>)</span><br><span class="line">y = tf.placeholder(<span class="string">"float"</span>, name = <span class="string">"y"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">model</span><span class="params">(x, w, b)</span>:</span></span><br><span class="line"><span class="keyword">return</span> tf.multiply(x, w) + b</span><br><span class="line"></span><br><span class="line"><span class="comment">#构建线性函数的斜率</span></span><br><span class="line">w = tf.Variable(<span class="number">1.0</span>, name=<span class="string">"w0"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#构建线性函数的截距</span></span><br><span class="line">b = tf.Variable(<span class="number">0.0</span>, name=<span class="string">"b0"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#pred是预测值，前向计算</span></span><br><span class="line">pred = model(x, w, b)</span><br></pre></td></tr></table></figure><h1 id="训练模型"><a href="#训练模型" class="headerlink" title="训练模型"></a>训练模型</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#迭代次数（训练轮数）</span></span><br><span class="line">train_epochs = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#学习率</span></span><br><span class="line">learning_rate = <span class="number">0.05</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#采用均方差作为损失函数</span></span><br><span class="line">loss_function = tf.reduce_mean(tf.square(y - pred))</span><br><span class="line"></span><br><span class="line"><span class="comment">#梯度下降优化器</span></span><br><span class="line">optimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(loss_function)</span><br><span class="line"></span><br><span class="line">sess = tf.Session()</span><br><span class="line">init = tf.global_variables_initializer()</span><br><span class="line">sess.run(init)</span><br><span class="line"></span><br><span class="line"><span class="comment">#开始训练，采用SGD随机梯度下降优化方法</span></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> range(train_epochs):</span><br><span class="line">    <span class="keyword">for</span> xs,ys <span class="keyword">in</span> zip(x_data, y_data):</span><br><span class="line">        _, loss = sess.run([optimizer,loss_function], feed_dict=&#123;x: xs, y: ys&#125;)</span><br><span class="line">    b0temp = b.eval(session=sess)</span><br><span class="line">    w0temp = w.eval(session=sess)</span><br><span class="line">    <span class="comment">#plt.plot(x_data, w0temp * x_data + b0temp)</span></span><br><span class="line">    </span><br><span class="line">print(<span class="string">"w:"</span>, sess.run(w))</span><br><span class="line">print(<span class="string">"b:"</span>, sess.run(b))</span><br><span class="line"></span><br><span class="line">plt.scatter(x_data, y_data, label=<span class="string">'Original data'</span>)</span><br><span class="line">plt.plot(x_data, x_data * sess.run(w) + sess.run(b), label=<span class="string">'Fitted line'</span>, color=<span class="string">'r'</span>, linewidth=<span class="number">3</span>)</span><br><span class="line">plt.legend(loc=<span class="number">2</span>)<span class="comment">#通过参数loc指定图例位置</span></span><br></pre></td></tr></table></figure><p>常见损失函数：均方差（Mean Square Error, MSE）和交叉熵（cross-entropy）<br>定义优化器Optimizer，初始化一个GradientDescentOptimizer<br>设置学习率和优化目标：最小化损失<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdnimg.cn/20191125190224581.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1Ym9qaW5n,size_16,color_FFFFFF,t_70" alt="训练结果" title="">                </div>                <div class="image-caption">训练结果</div>            </figure><br>w: 1.9822965<br>b: 1.0420128<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdnimg.cn/20191125191721732.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1Ym9qaW5n,size_16,color_FFFFFF,t_70" alt="对比" title="">                </div>                <div class="image-caption">对比</div>            </figure></p><h1 id="预测"><a href="#预测" class="headerlink" title="预测"></a>预测</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x_test = <span class="number">3.21</span></span><br><span class="line"></span><br><span class="line">predict = sess.run(pred, feed_dict=&#123;x: x_test&#125;)</span><br><span class="line">print(<span class="string">"预测值：%f"</span> % predict)</span><br><span class="line"></span><br><span class="line">target = <span class="number">2</span> * x_test + <span class="number">1.0</span></span><br><span class="line">print(<span class="string">"目标值：%f"</span> % target)</span><br></pre></td></tr></table></figure><p>或者<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x_test = <span class="number">3.21</span></span><br><span class="line">predict = sess.run(w) * x_test + sess.run(b)</span><br><span class="line">print(<span class="string">"预测值：%f"</span> % predict)</span><br></pre></td></tr></table></figure></p><p>预测值：7.405184<br>目标值：7.420000</p><h1 id="显示损失值"><a href="#显示损失值" class="headerlink" title="显示损失值"></a>显示损失值</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">step = <span class="number">0</span><span class="comment">#训练步数</span></span><br><span class="line">loss_list = []</span><br><span class="line">display_step = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> range(train_epochs):</span><br><span class="line">    <span class="keyword">for</span> xs,ys <span class="keyword">in</span> zip(x_data, y_data):</span><br><span class="line">        _, loss = sess.run([optimizer,loss_function], feed_dict=&#123;x: xs, y: ys&#125;)</span><br><span class="line">        <span class="comment">#显示损失值loss,display_step控制报告的粒度</span></span><br><span class="line">        <span class="comment">#若display_step为2，则将每训练2个样本输出一次损失值</span></span><br><span class="line">        loss_list.append(loss)</span><br><span class="line">        step = step + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> step % display_step == <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">"Train Epoch:"</span>,<span class="string">"%02d"</span> % (epoch+<span class="number">1</span>), <span class="string">"Step: %03d"</span> % (step), <span class="string">"loss="</span>, <span class="string">"&#123;:.9f&#125;"</span>.format(loss))</span><br><span class="line"></span><br><span class="line"><span class="comment">#plt.plot(loss_list)</span></span><br><span class="line">plt.plot(loss_list,<span class="string">'r+'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Train Epoch: 05 Step: 408 loss= 0.125508696</span><br><span class="line">Train Epoch: 05 Step: 410 loss= 0.036273275</span><br><span class="line">Train Epoch: 05 Step: 412 loss= 0.000716237</span><br><span class="line">Train Epoch: 05 Step: 414 loss= 0.097748078</span><br><span class="line">Train Epoch: 05 Step: 416 loss= 0.026035903</span><br><span class="line">Train Epoch: 05 Step: 418 loss= 0.633028984</span><br><span class="line">Train Epoch: 05 Step: 420 loss= 0.084138028</span><br><span class="line">Train Epoch: 05 Step: 422 loss= 0.088319123</span><br><span class="line">Train Epoch: 05 Step: 424 loss= 0.002654018</span><br><span class="line">Train Epoch: 05 Step: 426 loss= 0.116265893</span><br><span class="line">Train Epoch: 05 Step: 428 loss= 0.018808722</span><br><span class="line">Train Epoch: 05 Step: 430 loss= 0.000472802</span><br></pre></td></tr></table></figure><h1 id="显示损失值-1"><a href="#显示损失值-1" class="headerlink" title="显示损失值"></a>显示损失值</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdnimg.cn/20191125194553838.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1Ym9qaW5n,size_16,color_FFFFFF,t_70" alt="loss1" title="">                </div>                <div class="image-caption">loss1</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdnimg.cn/20191125194606462.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1Ym9qaW5n,size_16,color_FFFFFF,t_70" alt="loss2" title="">                </div>                <div class="image-caption">loss2</div>            </figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[x <span class="keyword">for</span> x <span class="keyword">in</span> loss_list <span class="keyword">if</span> x&gt;<span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>打印突出的点<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[1.0133754,</span><br><span class="line"> 1.2284044,</span><br><span class="line"> 1.0088208,</span><br><span class="line"> 1.2116321,</span><br><span class="line"> 2.3539772,</span><br><span class="line"> 2.3148305,</span><br><span class="line"> 1.3175836,</span><br><span class="line"> 1.0387748,</span><br><span class="line"> 1.5018207,</span><br><span class="line"> 1.547514,</span><br><span class="line"> 1.5514,</span><br><span class="line"> 1.5517284,</span><br><span class="line"> 1.5517554,</span><br><span class="line"> 1.551758,</span><br><span class="line"> 1.551758,</span><br><span class="line"> 1.551758,</span><br><span class="line"> 1.551758]</span><br></pre></td></tr></table></figure></p><h1 id="随机梯度下降"><a href="#随机梯度下降" class="headerlink" title="随机梯度下降"></a>随机梯度下降</h1><p>梯度下降法中，<code>批量</code>指用于在单次迭代中计算梯度的样本总数。<br>批量可能相当巨大。<br>随机梯度下降法（SGD）每次迭代只是用一个样本（批量大小为1）。<code>随机</code>表示构成各批量的一个样本是随机选择的。<br>小批量随机梯度下降法（小批量SGD）是介于全批量迭代与SGD之间的折中方案。通常包含10-1000个随机选择的样本。</p><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><p><a href="https://github.com/hubojing/DeepLearningCode-TensorFlow/blob/master/Simple%20linear%20regression.py" target="_blank" rel="noopener">https://github.com/hubojing/DeepLearningCode-TensorFlow/blob/master/Simple%20linear%20regression.py</a></p>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;left&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://img0.imgtn.bdimg.com/it/u=2317694558,3959665778&amp;fm=26&amp;gp=0.jpg&quot; width=&quot;300&quot; height=&quot;180&quot; style=&quot;float:right;&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;　　&lt;strong&gt;深度学习实践系列笔记&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt; &lt;/div&gt;
    
    </summary>
    
      <category term="人工智能" scheme="https://hubojing.github.io/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
      <category term="深度学习" scheme="https://hubojing.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>再学Java</title>
    <link href="https://hubojing.github.io/2019/10/27/%E5%86%8D%E5%AD%A6Java/"/>
    <id>https://hubojing.github.io/2019/10/27/再学Java/</id>
    <published>2019-10-27T13:21:25.000Z</published>
    <updated>2019-11-08T08:50:03.063Z</updated>
    
    <content type="html"><![CDATA[<div align="left"><br><img src="https://cdn.pixabay.com/photo/2014/04/03/11/08/tea-311845_960_720.png" width="300" height="180" style="float:right;"><br><br><br>　　<strong>详尽笔记，用于复习和速查</strong><br>　　<strong>将包含基础、进阶、高阶</strong><br>　　<strong>目前更新到基础-不可变对象</strong><br><br><br> </div><a id="more"></a><h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li>Java SE(Standard Edition) 面向PC级应用开发</li><li>Java EE(Enterprise Edition) 面向企业级应用开发</li><li>Java ME(Micro Edition) 面向嵌入式应用开发</li></ul><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="JDK下载"><a href="#JDK下载" class="headerlink" title="JDK下载"></a>JDK下载</h3><p>搜索java archive，选择版本下载。（本文选择JDK1.8)<br>安装JDK时，会同时安装JRE。</p><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>新增<br>JAVA_HOME<br>C:\Java\jdk1.8.0_73<br>修改Path<br>新增%JAVA_HOME%\bin  上移到最高</p><p>打开cmd<br>java -version<br>有版本号输出<br>javac<br>有用法输出<br>即可。</p><h3 id="配置Eclipse"><a href="#配置Eclipse" class="headerlink" title="配置Eclipse"></a>配置Eclipse</h3><p>修改字号<br>Window-Preferences-General-Appaerance-Colors and Fonts-右侧Java-Java Editor Text Font</p><p>显示行号<br>General-Editors-Text Editors-右侧show line numbers勾上</p><p>自动保存时间间隔<br>General-Workspace-右侧Workspace save interval(in minutes)（默认5分钟）<br>下方可以修改文本编码格式</p><p>复原视窗<br>Window-Perspective-Reset Perspective…</p><p><a href="http://wiki.jikexueyuan.com/project/eclipse/" target="_blank" rel="noopener">Eclipse使用教程</a></p><h3 id="Java从编写到运行"><a href="#Java从编写到运行" class="headerlink" title="Java从编写到运行"></a>Java从编写到运行</h3><p>编写：利用记事本/vi/IDE等完成代码文件(.java)编写<br>编译：利用JDK中javac.exe将代码(.java)编译成字节码文件(.class)<br>运行：java.exe读入并解释字节码文件(.class)，最终在JVM上运行</p><h3 id="编程标准"><a href="#编程标准" class="headerlink" title="编程标准"></a>编程标准</h3><ul><li>类名首字母大写，后面单词驼峰命名</li><li>方法名和变量名首字母小写，后面单词驼峰命名</li><li><a href="https://yq.aliyun.com/articles/69327" target="_blank" rel="noopener">阿里巴巴编程标准</a></li></ul><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="class类"><a href="#class类" class="headerlink" title="class类"></a>class类</h3><ul><li>java文件必须以.java作为扩展名</li><li>一个java文件只能有一个public class</li><li>public class的名字必须和文件名字一样，大小写都要完全一致</li><li>一个文件可有多个class，但是只能有一个是public。不提倡一个文件里面放多个类（内部类除外）</li><li>System.out.print 输出</li><li><p>System.out.println 换行输出</p></li><li><p>类是Java中最基础逻辑单位<br>Java所有内容都需放在类的范围中</p></li><li>类的构成<br>成员变量/属性<br>成员方法/函数</li></ul><h3 id="main函数"><a href="#main函数" class="headerlink" title="main函数"></a>main函数</h3><ul><li>一个class最多只能有一个main函数<br>类可以没有main函数，没有main函数的类不能主动执行，但可以被动执行（被调用执行）</li><li>程序入口都是main函数</li><li><p>main函数的形参和前缀修饰符public、static、void等都不能省略，是固定写法<br>注意区别</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//PSVM，main函数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//普通main函数，不是入口函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>严格意义上说，main函数不属于这个类的所拥有函数。<br>只是因为Java要求所有内容都必须放置在class范围内，所有main函数“寄居”在某一个class中。</p></li><li>main函数无法被其它方法/类所调用。</li><li>一个Java程序可调用多个其它Java class。</li><li>String[] args是main函数的形参，即在main函数中可使用args的值（这些值在main函数启动时输入）。</li></ul><p>右键test.java，Run As-&gt;Run Configuration-右侧Arguments-输入Program arguments程序参数-Run<br>多个变量需用空格隔开</p><h3 id="八种基本类型"><a href="#八种基本类型" class="headerlink" title="八种基本类型"></a>八种基本类型</h3><ul><li>boolean 布尔<br>true false(默认)</li><li><p>byte 字节<br>1 byte = 8 bits<br>存储有符号的，以二进制补码表示的整数<br>最小值-128，最大值127，默认值0<br>该类型用在大型数组中可显著节约空间（占用空间只用int类型的四分之一），主要代替小整数<br>在二进制文件读写中使用较多<br>byte a = (byte) -129;<br>System.out.println(a);//127<br>byte b = (byte) 128;<br>System.out.println(b);//-128<br>怎么理解：<br>标准值：-128~127<br>两边可以延伸<br>左延伸-384(-128)~-129(127)<br>右延伸128(-128)~383(127)</p></li><li><p>short/int/long 短整数/整数/长整数<br>short 16位 2个字节 -32768~32767,-2^15~2^15-1，默认值0<br>int 32位，4个字节 -2147483648~2147483647，-2^31~2^31-1，默认值0<br>long 64位 8个字节 -9223372036854775808~9223372036854775807,-2^63~2^63-1,默认值0L</p></li><li><p>float/double 浮点数<br>float 单精度 32位 4个字节 1.4<em>10^-45~3.4</em>10^38 默认值0.0f<br>double 双精度 64位 8个字节 4.9<em>10^-324~1.7</em>10^308 默认值0.0d<br>float和double都不能用来表示很精确的数字</p></li><li><p>char 字符<br>16位 Unicode字符<br>最小值是 <code>\u0000</code>(即为0)<br>最大值是<code>\uffff</code>(即为65535)<br>（<code>\u4e00</code>~<code>\u9fa5</code>两万多汉字）</p></li></ul><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p><code>&gt;&gt;</code> 右移 除以2<br><code>&lt;&lt;</code> 左移 乘以2</p><h3 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h3><p>重载(overload)：同一个类中，函数名称可以相同，但函数参数的个数或者类型必须有所不同<br>不能以返回值来区分同名的函数</p><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p>对象=属性+方法<br>对象的规范=属性定义+方法定义<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A obj = <span class="keyword">new</span> A();</span><br></pre></td></tr></table></figure></p><ul><li>obj课看作是内存中一个对象（包含若干个数据）的句柄</li><li>在C/C++中，obj称为指针，在Java中称为Reference</li><li>对象赋值是Reference赋值，基本类型是直接值拷贝<br>理解：基本类型的变量值小，可直接拷贝；对象包含多个值，不容易复制，赋值采用共享同一块内存区域。</li></ul><p>函数内的局部变量，编译器不会给默认值，需初始化；<br>类的成员变量，编译器会给默认值，可直接使用。</p><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><ul><li>构造函数名称必须和类名一样，且没有返回值<br>public void A(int x)不是构造函数，而是普通函数。</li><li>Java有构造函数，但没有析构函数</li><li>每个变量都有生命周期，它只能存储在离它最近的一对{}中</li><li>Java具有内存自动回收机制，当变量退出其生命周期后，JVM会自动回收所分配的对象的内存。</li><li>对象回收效率依赖于垃圾回收器GC(Garbage Collector)，其回收算法关系到性能好坏，是JVM研究热点。</li><li>每个Java类都必须有构造函数</li><li>若没有显式定义构造函数，Java编译器自动为该类产生一个空的无形参构造函数。若有显式构造函数，编译器就不会再产生构造函数</li><li>每个子类的构造函数的第一句话，都默认调用父类的无参数构造函数super()，除非子类的构造函数第一句话是super，而且super语句必须放在第一条</li><li>一个类可有多个构造函数，只要形参列表不同</li></ul><p>多个class可写在一个.java文件中，但最多只有一个类是public class，并且public class类的名字必须和.java文件名相同。</p><h3 id="信息隐藏原则"><a href="#信息隐藏原则" class="headerlink" title="信息隐藏原则"></a>信息隐藏原则</h3><ul><li>类的成员属性，是私有的private</li><li>类的方法，是共有的public，通过方法修改成员属性的值</li><li>get和set方法是公有public的，统称为getter和setter</li><li>外界对类成员的操作只能通过get和set方法</li><li>可用Java IDE快速生成<br>Source-Generate Getters and Setters…</li></ul><h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><ul><li><p>this负责指向本类中的成员变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        <span class="comment">//在这个构造函数里，形参优先级更高</span></span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>this负责指向本类中的成员方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.add(<span class="number">1</span>,<span class="number">2</span>);<span class="comment">//调用本类的add方法，this可忽略</span></span><br></pre></td></tr></table></figure></li><li><p>this可代替本类的构造函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>(<span class="number">5</span>);<span class="comment">//调用本类的一个形参的构造函数</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="继承、接口和抽象类"><a href="#继承、接口和抽象类" class="headerlink" title="继承、接口和抽象类"></a>继承、接口和抽象类</h2><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>父类/基类/超类<br>Parent class/Base class/Super class<br>子类/派生类<br>Child class/Derived class</p><ul><li>子类继承父类所有的属性和方法（但不能直接访问private成员）</li><li>根据信息隐藏原则：子类会继承父类所有的方法，可直接使用</li><li>子类也会继承父类的父类所有的属性和方法（但不能直接访问private成员）<br>子类可以通过调用父类的方法来访问父类的私有的成员属性<br>在同样方法名和参数情况下，本类的方法会比父类的方法优先级高</li></ul><p>区别于C++，单根继承</p><ul><li>单根继承原则：每个类都只能继承一个类</li><li>若不写extends，Java类默认继承java.lang.Object类</li><li>Java所有类从java.lang.Object开始，构造出一个类型继承树</li><li><p>Object类里面默认就有clone, equals, finalize, getClass, hashCode, toString等方法</p></li><li><p>每个子类的构造函数的第一句话，都默认调用父类的无参数构造函数super()，除非子类的构造函数第一句话是super，而且super语句必须放在第一条<br>如果构造函数的第一句话不是super，编译器会自动增加一句super();。如果构造函数第一句是自己写的super语句，编译器就不会自动添加。</p></li></ul><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p>若方法只有方法名字，形参列表，没有方法体，那所在的类就被定义为抽象类。<br>若一个类暂时有方法未实现，需被定义为抽象类。</p><ul><li>一个类继承于抽象类，就不能继承于其他的（抽象）类</li><li>子类可继承于抽象类，但一定要实现父类们所有abstract的方法，若不能完全实现，子类也必须被定义为抽象类</li></ul><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><ul><li><p>如果类的所有方法都没有实现，这个类就算是接口interface</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>类只可以继承(extends)一个类，但可实现(implements)多个接口，继承和实现可以同时</p></li><li>接口不算类，或者说是特殊的类</li><li>接口可以继承（多个）接口，没有实现的方法将会叠加</li><li>类实现接口，就必须实现所有未实现的方法。若没有全部实现，只能成为一个抽象类</li><li>接口里可定义变量，但一般是常量</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>抽象类和接口相同点：两者都不能被实例化，不能new操作<br>不同点：</p><ul><li>抽象类abstract，接口interface</li><li>抽象类可有部分方法实现，接口所有方法不能有实现</li><li>一个类只能继承(extends)一个（抽象）类，实现(implenments)多个接口</li><li>接口可继承(extends)多个接口</li><li>抽象类有构造函数，接口没有构造函数</li><li>抽象类可有main，也能运行，接口没有main函数</li><li>抽象类方法可有private/protected，接口方法都是public</li></ul><h3 id="类转型"><a href="#类转型" class="headerlink" title="类转型"></a>类转型</h3><p>类型可相互转型，但只限制于有继承关系的类</p><ul><li>子类可转换成父类（从大到小，向上转型），而父类不可转为子类（从小变大，向下转型）</li><li>父类转为子类有一种情况例外：这个父类本身就是从子类转化而来<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Human obj1 = <span class="keyword">new</span> Man();<span class="comment">//OK, Man extends Human</span></span><br><span class="line">Man obj2 = (Man) obj1;<span class="comment">//OK, because obj1 is born from Man class</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><ul><li>类型转换带来的作用就是多态</li><li>子类继承父类的所有方法，但子类可重新定义一个名字，参数和父类样的方法，这种行为是<strong>重写</strong>（覆写，覆盖，overwrite/override,not overload(重载))</li><li>子类方法优先级高于父类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Man</span> <span class="keyword">extends</span> <span class="title">Human</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"I can eat more"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">plough</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] a)</span></span>&#123;</span><br><span class="line">        Man obj1 = <span class="keyword">new</span>  Man();</span><br><span class="line">        obj1.eat();<span class="comment">//call Man.eat()</span></span><br><span class="line">        Human obj2 = (Human) obj1;</span><br><span class="line">        obj2.eat();<span class="comment">//call Man.eat()</span></span><br><span class="line">        Man obj3 = (Man) obj2;</span><br><span class="line">        obj3.eat();<span class="comment">//call Man.eat()</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>契约设计：类不会直接使用另外一个类，而是采用接口的形式，外部可以“空投”这个接口下的任意子类对象</p><h2 id="static、final和常量设计"><a href="#static、final和常量设计" class="headerlink" title="static、final和常量设计"></a>static、final和常量设计</h2><h3 id="static"><a href="#static" class="headerlink" title="static"></a>static</h3><p>static关键字可作用在：</p><ul><li><p>变量<br>static变量只依赖于类存在（通过类即可访问），不依赖于对象实例存在。<br>所有对象实例，关于同一个变量的值都共享存储在一个共同的空间（栈）。</p></li><li><p>方法<br>静态方法无需通过对象来引用，而通过类名可直接引用。<br>静态方法中只能使用静态变量，不能使用非静态变量。<br>静态方法禁止引用非静态方法。</p></li><li><p>类</p></li><li>匿名方法块<br>static块只在类第一次被加载时调用，在程序运行期间，代码只运行一次<br>执行顺序：static块 &gt; 匿名块 &gt; 构造函数<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StaticBlock</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"static 块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"匿名块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StaticBlock</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"构造函数"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"匿名块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><ul><li>又名单态模式，Singleton</li><li>限定某一个类在整个程序运行过程中，只能保留一个实例对象在内存空间</li><li>GoF的23中设计模式(Design Pattern)（创建型、结构型、行为型）中经典的一种，属于创建型模式类型</li><li>采用static来共享对象实例</li><li>采用private构建函数，防止外界new操作</li></ul><h3 id="final"><a href="#final" class="headerlink" title="final"></a>final</h3><p>final关键字用来修饰</p><ul><li>类</li><li>方法</li><li><p>字段</p></li><li><p>final的类，不能被继承（不能有子类）</p></li><li>父类中若有final方法，子类不能改写此方法<br>子类方法和父类方法在方法名和参数列表一样，就属于方法改写/重写/覆写，若参数列表不一样，就属于方法重载</li><li>final的变量不能再次赋值<br>若是基本类型的变量，不能修改其值<br>若是对象实例，不能修改其指针（但可修改对象内部的值）<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FinalObject</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinalObjectTest</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">final</span> FinalObject obj1 = <span class="keyword">new</span> FinalObject();</span><br><span class="line">        System.out.println(obj1.a);</span><br><span class="line">        obj1.a = <span class="number">20</span>;</span><br><span class="line">        System.out.println(obj1.a);<span class="comment">//正确，可以修改内部值</span></span><br><span class="line"></span><br><span class="line">        obj1 = <span class="keyword">new</span> FinalObject();<span class="comment">//报错，不能修改指针</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="常量设计"><a href="#常量设计" class="headerlink" title="常量设计"></a>常量设计</h3><ul><li>Java没有constant关键字</li><li>不能修改， final</li><li>不会修改/只读/只要一份， static</li><li>方便访问public</li></ul><p>Java中的常量</p><ul><li>public static final</li><li>建议变量名字全大写，以连字符相连，如UPPER_BOUND</li><li>一种特殊的常量：接口内定义的变量默认是常量</li></ul><p>常量池</p><ul><li>Java为很多基本类型的包装类/字符串都建立常量池</li><li>常量池：相同的值只存储一份，节省内存，共享访问</li><li><p>基本类型的包装类<br>Boolean: true, false<br>Byte:-128~127<br>Short, Integer, Long:-128~127<br>Character:0~127<br>不包括Float, Double:没有缓存(常量池)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Long l1 = -<span class="number">128L</span>;</span><br><span class="line">Long l2 = -<span class="number">128L</span>;</span><br><span class="line">System.out.println(String.valueOf(l1==l2));<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">Float f1 = <span class="number">0.5f</span>;</span><br><span class="line">Float f2 = <span class="number">0.5f</span>;</span><br><span class="line">System.out.println(String.valueOf(f1 == f2));<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">Double d1 = <span class="number">0.5</span>;</span><br><span class="line">Double d2 = <span class="number">0.5</span>;</span><br><span class="line">System.out.println(String.valueOf(d1 == d2));<span class="comment">//false</span></span><br></pre></td></tr></table></figure></li><li><p>Java为常量字符串都建立常量池缓存机制</p></li><li><p>基本类型的包装类和字符串有两种创建方式</p></li></ul><ol><li><p>常量式（字面量）复制创建，放在栈内存（将被常量化）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Integer a = <span class="number">10</span>;</span><br><span class="line">String b = <span class="string">"abc"</span>;</span><br></pre></td></tr></table></figure></li><li><p>new对象进行创建，放在堆内存（不会常量化）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Integer c = <span class="keyword">new</span> Integer(<span class="number">10</span>);</span><br><span class="line">String d = <span class="keyword">new</span> String(<span class="string">"abc"</span>);</span><br></pre></td></tr></table></figure></li></ol><p>这两种创建方式导致创建的对象存放的位置不同<br>栈内存读取速度快但容量小<br>堆内存读取速度慢但容量大</p><ul><li>基本类型和包装类比较，将对包装类自动拆箱</li><li>对象比较，比较地址</li><li><p>加法+会自动拆箱</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i1 = <span class="number">10</span>;</span><br><span class="line">Integer i2 = <span class="number">10</span>;<span class="comment">//自动装箱</span></span><br><span class="line">System.out.println(i1 == i2);<span class="comment">//true</span></span><br><span class="line"><span class="comment">//自动拆箱 基本类型和包装类进行比较，包装类自动拆箱</span></span><br><span class="line"></span><br><span class="line">Integer i3 = <span class="keyword">new</span> Integer(<span class="number">10</span>);</span><br><span class="line">System.out.println(i1 == i3);<span class="comment">//true</span></span><br><span class="line"><span class="comment">//自动拆箱 基本类型和包装类进行比较，包装类自动拆箱</span></span><br><span class="line"></span><br><span class="line">System.out.println(i2 == i3);<span class="comment">//false</span></span><br><span class="line"><span class="comment">//两个对象比较，比较其地址</span></span><br><span class="line"><span class="comment">//i2是常量，放在栈内存常量池中，i3是new出对象，放在堆内存中</span></span><br><span class="line"></span><br><span class="line">Integer i4 = <span class="keyword">new</span> Integer(<span class="number">5</span>);</span><br><span class="line">Integer i5 = <span class="keyword">new</span> Integer(<span class="number">5</span>);</span><br><span class="line">System.out.println(i1 == (i4+i5));<span class="comment">//true</span></span><br><span class="line">System.out.println(i2 == (i4+i5));<span class="comment">//true</span></span><br><span class="line">System.out.println(i3 == (i4+i5));<span class="comment">//true</span></span><br><span class="line"><span class="comment">//i4+i5操作将会使得i4,i5自动拆箱为基本类型并运算得到10</span></span><br><span class="line"><span class="comment">//基础类型10和对象相比，将会使对象自动拆箱，做基本类型比较</span></span><br><span class="line"></span><br><span class="line">Integer i6 = i4 + i5;<span class="comment">//+操作使得i4,i5自动拆箱，得到10，因此i6 == i2</span></span><br><span class="line">System.out.println(i1 == i6);<span class="comment">//true</span></span><br><span class="line">System.out.println(i2 == i6);<span class="comment">//true</span></span><br><span class="line">System.out.println(i3 == i6);<span class="comment">//false</span></span><br></pre></td></tr></table></figure></li><li><p>常量赋值（堆内存）和new创建（栈内存）不是同一个对象</p></li><li>编译器只会优化确定的字符串，并缓存<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">String s0 = <span class="string">"abcdef"</span>;</span><br><span class="line">String s1 = <span class="string">"abc"</span>;</span><br><span class="line">String s2 = <span class="string">"abc"</span>;</span><br><span class="line">String s3 = <span class="keyword">new</span> String(<span class="string">"abc"</span>);</span><br><span class="line">String s4 = <span class="keyword">new</span> String(<span class="string">"abc"</span>);</span><br><span class="line">System.out.println(s1 == s2);<span class="comment">//true常量池</span></span><br><span class="line">System.out.println(s1 == s3);<span class="comment">//false一个栈内存，一个堆内存</span></span><br><span class="line">System.out.println(s3 == s4);<span class="comment">//false两个都是堆内存</span></span><br><span class="line"></span><br><span class="line">String s5 = s1 + <span class="string">"def"</span>;<span class="comment">//设计到变量，编译器不优化</span></span><br><span class="line">String s6 = <span class="string">"abc"</span> + <span class="string">"def"</span>;<span class="comment">//都是常量，编译器会自动优化成abcdef</span></span><br><span class="line">String s7 = <span class="string">"abc"</span> + <span class="keyword">new</span> String(<span class="string">"def"</span>);<span class="comment">//设计到new对象，编译器不优化</span></span><br><span class="line">System.out.println(s5 == s6);<span class="comment">//false</span></span><br><span class="line">System.out.println(s6 == s7);<span class="comment">//false</span></span><br><span class="line">System.out.println(s0 == s6);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">String s8 = s3 + <span class="string">"def"</span>;<span class="comment">//涉及到new对象，编译器不优化</span></span><br><span class="line">String s9 = s4 + <span class="string">"def"</span>;<span class="comment">//设计到new对象，编译器不优化</span></span><br><span class="line">String s10 = s3 + <span class="keyword">new</span> String(<span class="string">"def"</span>);<span class="comment">//涉及到new对象，编译器不优化</span></span><br><span class="line">System.out.println(s8 == s9);<span class="comment">//false</span></span><br><span class="line">System.out.println(s8 == s10);<span class="comment">//false</span></span><br><span class="line">System.out.println(s9 == s10);<span class="comment">//false</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="不可变对象和字符串"><a href="#不可变对象和字符串" class="headerlink" title="不可变对象和字符串"></a>不可变对象和字符串</h3><h4 id="不可变对象"><a href="#不可变对象" class="headerlink" title="不可变对象"></a>不可变对象</h4><ul><li>不可变对象(Immutable Object)<br>一旦创建，该对象（状态/值）不能被更改<br>其内在的成员变量的值不能修改<br>如八个基本型别的包装类<br>String, BigInteger和BigDecimal等</li><li>可变对象(Mutable Object)<br>普通对象<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String a = <span class="keyword">new</span> String(<span class="string">"abc"</span>);</span><br><span class="line">String b = a;</span><br><span class="line">System.out.println(b);<span class="comment">//abc</span></span><br><span class="line">a = <span class="string">"def"</span>;</span><br><span class="line">System.out.println(b);<span class="comment">//abc</span></span><br></pre></td></tr></table></figure></li></ul><p>不可变对象是指值对象不再修改，即abc不会被修改，而指针（句柄/变量名）a的指向可以修改。<br>不可变对象，也是传指针（引用）<br>由于不可变，临时变量指向新内存，外部实参的指针不改动<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(String b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    b = <span class="string">"def"</span>;</span><br><span class="line">&#125;</span><br><span class="line">a = <span class="keyword">new</span> String(<span class="string">"abc"</span>);</span><br><span class="line">change(a);</span><br><span class="line">System.out.println(a);<span class="comment">//abc</span></span><br></pre></td></tr></table></figure></p><p>a-&gt;abc<br>b–^<br>change(a)后<br>a-&gt;abc<br>b-&gt;def</p><ul><li><p>如何创建不可变对象<br>immutable对象是不可改变，改变要clone/new一个对象进行修改<br>所有属性是final和private<br>不提供setter方法<br>类是final的，或所有方法都是final<br>勒种包含mutable对象，那么返回拷贝需要深度clone</p></li><li><p>不可变对象(Immutable Object)优点<br>只读，线程安全<br>并发读，提高性能<br>可重复使用</p></li><li>缺点<br>制造垃圾，浪费空间</li></ul><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><p>不可变对象<br>字符串内容比较：equals方法<br>是否指向同一个对象：指针比较==</p><ul><li>字符串加法<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String a = <span class="string">"abc"</span>;</span><br><span class="line">a = a + <span class="string">"def"</span>;<span class="comment">//String不可修改，需新申请空间，效率差</span></span><br></pre></td></tr></table></figure></li></ul><p>使用SrringBuffer/StringBuilder类的append方法进行修改<br>StringBuffer/StringBuilder的对象都是可变对象<br>StringBuffer(同步，线程安全，修改快速)，StringBuilder（不同步，线程不安全，修改更快）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">changeValue</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">changeValue</span><span class="params">(String s1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    s1 = <span class="string">"def"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">changeValue</span><span class="params">(StringBuffer s1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    s1.append(<span class="string">"def"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">5</span>;</span><br><span class="line">    String b = <span class="string">"abc"</span>;</span><br><span class="line">    StringBuffer c = <span class="keyword">new</span> StringBuffer(<span class="string">"abc"</span>);</span><br><span class="line">    changeValue(a);</span><br><span class="line">    changeValue(b);</span><br><span class="line">    changeValue(c);</span><br><span class="line">    System.out.println(a);<span class="comment">//5</span></span><br><span class="line">    System.out.println(b);<span class="comment">//abc</span></span><br><span class="line">    System.out.println(c);<span class="comment">//abcdef</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="package-import和classpath"><a href="#package-import和classpath" class="headerlink" title="package, import和classpath"></a>package, import和classpath</h2><h3 id="package和import"><a href="#package和import" class="headerlink" title="package和import"></a>package和import</h3><ul><li>若所有Java类都是放置在同一个目录下的，类之间相互调用无需显式声明调用<br>同一个目录下，两个类的名字不能相同<br>文件过多不方便查找</li><li>Java支持多个目录放置Java，并通过package/import/classpath/jar等机制配合使用，可支持跨目录放置和调用Java类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.edu.pku;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PackageExample</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>类全称cn.edu.pku.PackageExample，短名称PackageExample<br>引用类时，必须采用全称引用；程序正文可用短名称<br>PackageExample.java必须严格放置在cn/edu/pku目录下</p><ul><li>包名尽量唯一</li><li>域名是唯一的，因此常用域名做包名</li><li>域名逆序：cn.edu.pku，范围通常从大到小<br>类的完整名字：包名+类名，cn.edu.pku.PackageExample<br>包名：和目录层次一样，cn\edu\pku\PackageExample.java<br>包具体放在上面位置不重要，编译和运行时再制定</li></ul><p>举个栗子<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.edu.pku;</span><br><span class="line"><span class="keyword">import</span> cn.edu.pku.PackageExample;</span><br><span class="line"><span class="comment">//或import cn.edu.pku.*</span></span><br><span class="line"><span class="comment">//但不能是import cn.*</span></span><br><span class="line"><span class="comment">//若PackageExample和当前类在同一个目录，可省略import</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PackageExampleTest</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        PackageExample obj = <span class="keyword">new</span> PackageExample();</span><br><span class="line">        <span class="comment">//此处可用类的短名称来引用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>“*”代表这个目录下所有文件，但不包括子文件夹和子文件夹内的文件。</p><p>import规则</p><ul><li>import必须全部放在package之后，类定义之前<br>package必须是第一句话</li><li>多个import的顺序无关</li><li>可用<em>来引入一个目录下的所有类，比如import java.lang.</em>;<br>注意：不能递归包含其下各个目录下的文件</li><li>import尽量精确，不推荐*，以免新增同名程序会使老程序报错</li></ul><h3 id="jar"><a href="#jar" class="headerlink" title="jar"></a>jar</h3><p>用于可执行程序文件的传播，实际上是一组class文件的压缩包<br>项目引入一个jar文件，就可以使用jar文件中所有类（.class文件），无需类的源码（.java文件）。<br>jar只包含.class文件，没有.java文件，不会泄露源码。不过Java里的一些反编译工具，可从class反编译到Java。</p><p>利用Eclipse的Export功能导出jar文件</p><ul><li>选中项目，点击顶部菜单File-Export-Java-Jar File</li></ul><h3 id="classpath"><a href="#classpath" class="headerlink" title="classpath"></a>classpath</h3><p>手动创建c:\temp\cn\com\test\Man.java<br>编译：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac c:\temp\cn\com\test\Man.java</span><br></pre></td></tr></table></figure></p><p>运行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -classpath   .;c:\temp   cn.com.test.Man</span><br></pre></td></tr></table></figure></p><p>-classpath固定格式参数，简写为-cp<br>.;c:\temp<br>windows是分号，Linux/Mac是冒号<br>当在某一个子路径找到所需类后，后续子路径不再寻找<br>在classpath中，子路径排在前面优先级高<br>当所有子路径都寻找不到所需类，系统会报告NoClassDefFoundException错误</p><p>编译和运行规则</p><ul><li>编译一个类，需java文件全路径，包括拓展名</li><li>运行一个类，需写类名全称（非文件路径），无需写扩展名</li><li>编译类时，需给出这个类所依赖的类（包括依赖的类再次依赖的所有其他类）的所在路径</li><li>运行类时，需给出这个类，以及被依赖类的路径总和</li><li>classpath参数也可以包含jar包。若路径内有空格，请将classpath参数整体加双引号。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -classpath   &quot;.;c:\test.jar;c:\temp;c:\a bc&quot;   cn.com.test.Man</span><br></pre></td></tr></table></figure></li></ul><h4 id="Java访问权限"><a href="#Java访问权限" class="headerlink" title="Java访问权限"></a>Java访问权限</h4><ul><li>private：私有，只能本类访问</li><li>default（通常忽略不写）：同一个包内访问</li><li>protected: 同一个包，子类均可以访问</li><li>public：公开，所有类都可访问<br>四种都可用来修饰成员变量、成员方法、构造函数<br>default和public可修饰类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123; &#125;<span class="comment">//default class</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123; &#125;<span class="comment">//public class</span></span><br></pre></td></tr></table></figure></li></ul><p>权限表<br>            同一个类    同一个包    不同包的子类    不同包的非子类<br>private         √<br>default         √           √<br>protected       √           √           √<br>public          √           √           √               √</p><h2 id="Java常用类"><a href="#Java常用类" class="headerlink" title="Java常用类"></a>Java常用类</h2><p>Java类库文档<br><a href="https://docs.oracle.com/en/" target="_blank" rel="noopener">https://docs.oracle.com/en/</a><br><a href="https://docs.oracle.com/en/java/javase/13/docs/api/index.html" target="_blank" rel="noopener">https://docs.oracle.com/en/java/javase/13/docs/api/index.html</a><br>这些文档原先是程序中的注释。利用JavaDoc技术，将这些注释抽取出来，组织形成的以HTML为表现形式的API文档。</p><h3 id="数字类"><a href="#数字类" class="headerlink" title="数字类"></a>数字类</h3><ul><li>Java数字类<br>整数Short, Int, Long<br>浮点数Float, Double<br>大数类BigInteger(大整数), BigDecimal(大浮点数)<br>大数类没有限制，可表示无穷大的数字<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">BigInteger b1 = <span class="keyword">new</span> BigInteger(<span class="string">"123456789"</span>);</span><br><span class="line">BigInteger b2 = <span class="keyword">new</span> BigInteger(<span class="string">"987654321"</span>);</span><br><span class="line">System.out.println(b2.add(b1));<span class="comment">//加法操作</span></span><br><span class="line">System.out.println(b2.subtract(b1));<span class="comment">//减法操作</span></span><br><span class="line">System.out.println(b2.multiply(b1));<span class="comment">//乘法操作</span></span><br><span class="line">System.out.println(b2.divide(b1));<span class="comment">//除法操作</span></span><br><span class="line">System.out.println(b2.max(b1));<span class="comment">//求出最大数</span></span><br><span class="line">System.out.println(b2.min(b1));<span class="comment">//求出最小数</span></span><br><span class="line">BigInteger result[] = b2.divideAndRemainder(b1);<span class="comment">//求出余数的除法操作</span></span><br><span class="line">System.out.println(<span class="string">"商是："</span> + result[<span class="number">0</span>] + <span class="string">"；余数是："</span> + result[<span class="number">1</span>]);<span class="comment">//求出余数的除法操作</span></span><br><span class="line">System.out.println(b1.equals(b2));<span class="comment">//是否等价</span></span><br><span class="line"><span class="keyword">int</span> flag = b1.compareTo(b2);</span><br><span class="line"><span class="keyword">if</span>(flag == -<span class="number">1</span>)</span><br><span class="line">    System.out.println(<span class="string">"比较操作：b1&lt;b2"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(flag == <span class="number">0</span>)</span><br><span class="line">    System.out.println(<span class="string">"比较操作：b1==b2"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    System.out.println(<span class="string">"比较操作：b1&gt;b2"</span>);</span><br></pre></td></tr></table></figure></li></ul><p>尽量采用字符串对BigDecimal赋值，这样精度更准确。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="keyword">new</span> BigDecimal(<span class="string">"2.3"</span>));</span><br><span class="line">System.out.println(<span class="keyword">new</span> BigDecimal(<span class="number">2.3</span>));<span class="comment">//2.29999999999999</span></span><br><span class="line"></span><br><span class="line">BigDecimal num1 = <span class="keyword">new</span> BigDecimal(<span class="string">"10"</span>);</span><br><span class="line">BigDecimal num2 = <span class="keyword">new</span> BigDecimal(<span class="string">"3"</span>);</span><br><span class="line"><span class="comment">//需要指定位数，防止无限循环，或者包含在try-catch中</span></span><br><span class="line">BigDecimal num3 = num1.divide(num2, <span class="number">3</span>, BigDecimal.ROUND_HALF_UP);</span><br><span class="line">System.out.println(num3);</span><br></pre></td></tr></table></figure></p><p>BigDecimal做除法操作，需要注意截断，防止出现无限循环小数。</p><p>随机数类Random<br>nextInt() 返回一个随机Int<br>nextInt(int a) 返回一个[0,a)之间的随机int<br>nextDouble() 返回一个[0.0,1.0]之间double<br>ints方法批量返回随机数数组<br>Math.random() 返回一个[0.0,1.0]之间double<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种，采用Random类随机生成</span></span><br><span class="line">Random rd = <span class="keyword">new</span> Random();</span><br><span class="line">System.out.println(rd.nextInt());</span><br><span class="line">System.out.println(rd.nextInt(<span class="number">100</span>));<span class="comment">//0-100的随机数</span></span><br><span class="line">System.out.println(rd.nextLong());</span><br><span class="line">System.out.println(rd.nextDouble());</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种，生成一个范围内的随机数 例如0-10之间的随机数</span></span><br><span class="line">System.out.println(Math.round(Math.random()*<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//JDK 8 新增方法</span></span><br><span class="line">rd.ints();<span class="comment">//返回无限个int类型范围内的数据</span></span><br><span class="line"><span class="keyword">int</span>[] arr = rd.ints(<span class="number">10</span>).toArray();<span class="comment">//生成10个int范围类的个数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; arr.length; i++)&#123;</span><br><span class="line">    System.out.println(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">arr = rd.ints(<span class="number">5</span>, <span class="number">10</span>, <span class="number">100</span>).toArray();<span class="comment">//5个10-100的随机数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">    System.out.println(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">arr = rd.ints(<span class="number">10</span>).limit(<span class="number">5</span>).toArray();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; arr.length; i++)&#123;</span><br><span class="line">    System.out.println(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>工具类Math<br>java.math包<br>java.lang.Math<br>绝对值函数abs<br>对数函数log<br>比较函数max、min<br>幂函数pow<br>四舍五入函数round<br>向下取整floor<br>向上取整ceil</p><h3 id="字符串相关类"><a href="#字符串相关类" class="headerlink" title="字符串相关类"></a>字符串相关类</h3><p>String<br>Java使用频率最高的类<br>一个不可变对象，加减操作性能较差<br>常用：<br>charAt, concat, contains, endsWith, equals, equalsIgnoreCase, hashCode, indexOf, length, matches, replace, replaceAll, split, startsWith, subString, trim, valueOf<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">String a = <span class="string">"123;456,789,123 "</span>;</span><br><span class="line">System.out.println(a.charAt(<span class="number">0</span>));<span class="comment">//返回第0个元素</span></span><br><span class="line">System.out.println(a.indexOf(<span class="string">";"</span>));<span class="comment">//返回第一个;的位置</span></span><br><span class="line">System.out.println(a.concat(<span class="string">";000"</span>));<span class="comment">//连接一个新字符串并返回，a不变</span></span><br><span class="line">System.out.println(a.contains(<span class="string">"000"</span>));<span class="comment">//判断a是否包含000</span></span><br><span class="line">System.out.println(a.endWith(<span class="string">"000"</span>));<span class="comment">//判断a是否以000结尾</span></span><br><span class="line">System.out.println(a.equals(<span class="string">"000"</span>));<span class="comment">//判断是否等于000</span></span><br><span class="line">System.out.println(a.equalsIgnoreCase(<span class="string">"000"</span>));<span class="comment">//判断在忽略大小写情况下是否等于000</span></span><br><span class="line">System.out.println(a.length());<span class="comment">//返回a长度</span></span><br><span class="line">System.out.println(a.trim());<span class="comment">//返回a去除前后空格后的字符串，a不变</span></span><br><span class="line">String[] b = a.split(<span class="string">";"</span>);<span class="comment">//将a字符串按照;分割成数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; b.length; i++)&#123;</span><br><span class="line">    System.out.println(b[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(a.substring(<span class="number">2</span>, <span class="number">5</span>));<span class="comment">//截取a的第2个到第5个字符 a不变</span></span><br><span class="line">System.out.println(a.replace(<span class="string">"1"</span>, <span class="string">"a"</span>));</span><br><span class="line">System.out.println(a.replaceAll(<span class="string">"1"</span>, <span class="string">"a"</span>);<span class="comment">//replaceAll第一个参数是正则表达式</span></span><br><span class="line"></span><br><span class="line">String s1 = <span class="string">"123456789"</span>;</span><br><span class="line">String s2 = s1.replace(<span class="string">"?"</span>, <span class="string">"a"</span>);</span><br><span class="line">String s3 = s1.replaceAll(<span class="string">"[?]"</span>, <span class="string">"a"</span>);</span><br><span class="line"><span class="comment">//这里的[?]才表示字符问号，这样才能正常替换。不然在正则中会有特殊的意义就会报异常</span></span><br></pre></td></tr></table></figure></p><p>trim方法去掉的是字符串的前后空格，无法去除字符串中间的空格。</p><ul><li><p>可变字符串<br>StringBuffer(字符串加减，同步，性能好)<br>StringBuilder(字符串加减，不同步，性能更好)</p></li><li><p>StringBuffer/StringBuilder：方法一样，区别在同步<br>append/insert/delete/replace/substring<br>length字符串实际大小，capacity字符串占用空间大小<br>trimToSize()：去除空隙，将字符串存储压缩到实际大小<br>如有大量append，事先预估大小，再调用相应构造函数</p></li><li><p>时间类</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;left&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://cdn.pixabay.com/photo/2014/04/03/11/08/tea-311845_960_720.png&quot; width=&quot;300&quot; height=&quot;180&quot; style=&quot;float:right;&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;　　&lt;strong&gt;详尽笔记，用于复习和速查&lt;/strong&gt;&lt;br&gt;　　&lt;strong&gt;将包含基础、进阶、高阶&lt;/strong&gt;&lt;br&gt;　　&lt;strong&gt;目前更新到基础-不可变对象&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt; &lt;/div&gt;
    
    </summary>
    
      <category term="编程语言" scheme="https://hubojing.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Java" scheme="https://hubojing.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>在Eclipse中使用Weka</title>
    <link href="https://hubojing.github.io/2019/10/17/%E5%9C%A8Eclipse%E4%B8%AD%E4%BD%BF%E7%94%A8Weka/"/>
    <id>https://hubojing.github.io/2019/10/17/在Eclipse中使用Weka/</id>
    <published>2019-10-17T02:28:49.000Z</published>
    <updated>2019-10-17T11:11:29.223Z</updated>
    
    <content type="html"><![CDATA[<div align="left"><br><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1571320761053&di=e3ea30e5834bde78e291a37e2063dbd9&imgtype=0&src=http%3A%2F%2Fimg3.doubanio.com%2Flpic%2Fs9123895.jpg" width="300" height="180" style="float:right;"><br><br><br>　　<strong>笔记备忘。</strong><br><br><br> </div><a id="more"></a><h1 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h1><p>Weka 3.8<br>Eclipse 2019-9</p><h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><ol><li>解压weka-src.jar，获得weka-src文件夹。</li><li>将weka-src文件夹放在桌面（或任何喜欢的位置）。</li><li>打开Eclipse，新建Java Project项目，取消<code>Use default location</code>的勾，选择weka-src所在位置。Finish。</li><li>在项目src中新建package, weka.classifiers.xxx(自己命名)，添加算法文件。比如NB.java。</li><li>修改配置（每次添加算法都需要）<br>weka.gui下<code>GenericPropertiesCreator.props</code>中添加创建的包<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">weka.classifiers.Classifier=\</span><br><span class="line"> ...</span><br><span class="line"> weka.classifiers.xxx,\</span><br><span class="line"> ...</span><br></pre></td></tr></table></figure></li></ol><p><code>GenericObjectEditor.props</code>中添加创建的算法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">weka.classifiers.functions.supportVector.Kernel=\</span><br><span class="line">...</span><br><span class="line"> weka.classifiers.xxx.NB,\</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><ol start="6"><li>点击<code>GUIChooser.java</code>运行。弹出Weka。</li><li>选择<code>Explorer</code>-<code>Preprocess</code>-<code>Open file...</code>添加数据。（Weka的data里有实例数据）</li><li>选择<code>Classify</code>-<code>Choose</code>，找到添加的算法-<code>Start</code>。<br>完成！</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;left&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1571320761053&amp;di=e3ea30e5834bde78e291a37e2063dbd9&amp;imgtype=0&amp;src=http%3A%2F%2Fimg3.doubanio.com%2Flpic%2Fs9123895.jpg&quot; width=&quot;300&quot; height=&quot;180&quot; style=&quot;float:right;&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;　　&lt;strong&gt;笔记备忘。&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt; &lt;/div&gt;
    
    </summary>
    
      <category term="数据挖掘" scheme="https://hubojing.github.io/categories/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/"/>
    
    
      <category term="Weka" scheme="https://hubojing.github.io/tags/Weka/"/>
    
  </entry>
  
  <entry>
    <title>ArcGIS操作备忘</title>
    <link href="https://hubojing.github.io/2019/10/09/ArcGIS%E6%93%8D%E4%BD%9C%E5%A4%87%E5%BF%98/"/>
    <id>https://hubojing.github.io/2019/10/09/ArcGIS操作备忘/</id>
    <published>2019-10-09T08:27:29.000Z</published>
    <updated>2019-11-17T08:38:56.699Z</updated>
    
    <content type="html"><![CDATA[<div align="left"><br><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1571320824862&di=08704337942c2cb7ba038a2597321fa8&imgtype=0&src=http%3A%2F%2Fpic4.zhimg.com%2F50%2F977b7b34370b0e721b367571791a6a85_qhd.jpg" width="300" height="180" style="float:right;"><br><br><br>　　<strong>好记性不如烂笔头。</strong><br><br><br> </div><a id="more"></a><h1 id="xls转shp文件"><a href="#xls转shp文件" class="headerlink" title="xls转shp文件"></a>xls转shp文件</h1><p>添加数据xls-Sheet1$-右键 显示XY数据-Y字段改为纬度-确定<br>对Sheet1$个事件右键 数据-导出数据-确定</p><h1 id="转换坐标系"><a href="#转换坐标系" class="headerlink" title="转换坐标系"></a>转换坐标系</h1><p>十进制度–&gt;米<br>打开shp文件，打开ArcToolbox-数据管理工具-投影和变换-定义投影<br>坐标系选择地理坐标系-World-WGS 1984</p><p>再选择投影-输出坐标系-投影坐标系-World-WGS 1984 Web Mercator(Auxiliary Sphere)</p><p>完成。</p><h1 id="属性表相关"><a href="#属性表相关" class="headerlink" title="属性表相关"></a>属性表相关</h1><h2 id="添加字段"><a href="#添加字段" class="headerlink" title="添加字段"></a>添加字段</h2><p>表选项-添加字段</p><h2 id="修改属性"><a href="#修改属性" class="headerlink" title="修改属性"></a>修改属性</h2><p>按属性选择<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;class&quot;=&apos;park&apos;</span><br></pre></td></tr></table></figure></p><p>修改选中行特定属性<br>选中该列右键 字段计算器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;green place&quot;</span><br></pre></td></tr></table></figure></p><p>写上需填写的值即可。<br>注意单双引号。</p><h1 id="裁剪"><a href="#裁剪" class="headerlink" title="裁剪"></a>裁剪</h1><p>ArcToolbox-分析工具-提取分析-裁剪<br>输入要素-大范围的（比如国家地图）<br>裁剪要素-要留下来的（比如区域地图）</p><h1 id="建立服务区"><a href="#建立服务区" class="headerlink" title="建立服务区"></a>建立服务区</h1><p>建立服务区之前需要先构建网络数据集<br>打开ArcCatalog-连接到文件夹-选中.shp文件右键-新建网络数据集-一路“下一步”（不用高程字段、修改连通性策略为任意节点）-生成nd文件即可。</p><p>勾上 自定义-拓展模块-Network Analyst和Spatial Analyst<br>自定义-工具条-勾上Network Analyst-新建服务区<br>在Network Analyst窗口选中设施点-右键加载位置-选择需要加进去的点文件<br>服务区-右键图层属性-分析设置-默认中断：1000米</p>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;left&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1571320824862&amp;di=08704337942c2cb7ba038a2597321fa8&amp;imgtype=0&amp;src=http%3A%2F%2Fpic4.zhimg.com%2F50%2F977b7b34370b0e721b367571791a6a85_qhd.jpg&quot; width=&quot;300&quot; height=&quot;180&quot; style=&quot;float:right;&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;　　&lt;strong&gt;好记性不如烂笔头。&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt; &lt;/div&gt;
    
    </summary>
    
      <category term="数据挖掘" scheme="https://hubojing.github.io/categories/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/"/>
    
    
      <category term="GIS" scheme="https://hubojing.github.io/tags/GIS/"/>
    
  </entry>
  
  <entry>
    <title>学习R语言</title>
    <link href="https://hubojing.github.io/2019/09/27/%E5%AD%A6%E4%B9%A0R%E8%AF%AD%E8%A8%80/"/>
    <id>https://hubojing.github.io/2019/09/27/学习R语言/</id>
    <published>2019-09-27T13:21:27.000Z</published>
    <updated>2019-12-04T02:33:10.000Z</updated>
    
    <content type="html"><![CDATA[<div align="left"><br><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1570279473&di=4d33479a18fb2e2b4de972424affd863&imgtype=jpg&er=1&src=http%3A%2F%2Fwww.raincent.com%2Fuploadfile%2F2017%2F0928%2F20170928104357284.jpg" width="300" height="180" style="float:right;"><br><br><br>　　<strong>嘤嘤嘤还要学统计</strong><br><br><br> </div><a id="more"></a><h1 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h1><h1 id="最基本"><a href="#最基本" class="headerlink" title="最基本"></a>最基本</h1><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">x1=c(<span class="number">171</span>,<span class="number">175</span>,<span class="number">159</span>,<span class="number">155</span>,<span class="number">152</span>,<span class="number">158</span>,<span class="number">154</span>,<span class="number">164</span>,<span class="number">168</span>,<span class="number">166</span>,<span class="number">159</span>,<span class="number">164</span>)</span><br><span class="line">&gt; x1</span><br><span class="line"> [<span class="number">1</span>] <span class="number">171</span> <span class="number">175</span> <span class="number">159</span> <span class="number">155</span> <span class="number">152</span> <span class="number">158</span> <span class="number">154</span> <span class="number">164</span> <span class="number">168</span> <span class="number">166</span> <span class="number">159</span> <span class="number">164</span></span><br><span class="line">&gt; x2=c(<span class="number">57</span>,<span class="number">64</span>,<span class="number">41</span>,<span class="number">38</span>,<span class="number">35</span>,<span class="number">44</span>,<span class="number">41</span>,<span class="number">51</span>,<span class="number">57</span>,<span class="number">49</span>,<span class="number">47</span>,<span class="number">46</span>);x2</span><br><span class="line"> [<span class="number">1</span>] <span class="number">57</span> <span class="number">64</span> <span class="number">41</span> <span class="number">38</span> <span class="number">35</span> <span class="number">44</span> <span class="number">41</span> <span class="number">51</span> <span class="number">57</span> <span class="number">49</span> <span class="number">47</span> <span class="number">46</span></span><br><span class="line">&gt; rbind(x1,x2)<span class="comment">#按行合并</span></span><br><span class="line">   [,<span class="number">1</span>] [,<span class="number">2</span>] [,<span class="number">3</span>] [,<span class="number">4</span>] [,<span class="number">5</span>] [,<span class="number">6</span>] [,<span class="number">7</span>] [,<span class="number">8</span>] [,<span class="number">9</span>] [,<span class="number">10</span>] [,<span class="number">11</span>] [,<span class="number">12</span>]</span><br><span class="line">x1  <span class="number">171</span>  <span class="number">175</span>  <span class="number">159</span>  <span class="number">155</span>  <span class="number">152</span>  <span class="number">158</span>  <span class="number">154</span>  <span class="number">164</span>  <span class="number">168</span>   <span class="number">166</span>   <span class="number">159</span>   <span class="number">164</span></span><br><span class="line">x2   <span class="number">57</span>   <span class="number">64</span>   <span class="number">41</span>   <span class="number">38</span>   <span class="number">35</span>   <span class="number">44</span>   <span class="number">41</span>   <span class="number">51</span>   <span class="number">57</span>    <span class="number">49</span>    <span class="number">47</span>    <span class="number">46</span></span><br><span class="line">&gt; cbind(x1,x2)<span class="comment">#按列合并</span></span><br><span class="line">       x1 x2</span><br><span class="line"> [<span class="number">1</span>,] <span class="number">171</span> <span class="number">57</span></span><br><span class="line"> [<span class="number">2</span>,] <span class="number">175</span> <span class="number">64</span></span><br><span class="line"> [<span class="number">3</span>,] <span class="number">159</span> <span class="number">41</span></span><br><span class="line"> [<span class="number">4</span>,] <span class="number">155</span> <span class="number">38</span></span><br><span class="line"> [<span class="number">5</span>,] <span class="number">152</span> <span class="number">35</span></span><br><span class="line"> [<span class="number">6</span>,] <span class="number">158</span> <span class="number">44</span></span><br><span class="line"> [<span class="number">7</span>,] <span class="number">154</span> <span class="number">41</span></span><br><span class="line"> [<span class="number">8</span>,] <span class="number">164</span> <span class="number">51</span></span><br><span class="line"> [<span class="number">9</span>,] <span class="number">168</span> <span class="number">57</span></span><br><span class="line">[<span class="number">10</span>,] <span class="number">166</span> <span class="number">49</span></span><br><span class="line">[<span class="number">11</span>,] <span class="number">159</span> <span class="number">47</span></span><br><span class="line">[<span class="number">12</span>,] <span class="number">164</span> <span class="number">46</span></span><br><span class="line"><span class="comment">#利用x1数据创建矩阵</span></span><br><span class="line">&gt; matrix(x1,nrow=<span class="number">3</span>,ncol=<span class="number">4</span>)</span><br><span class="line">     [,<span class="number">1</span>] [,<span class="number">2</span>] [,<span class="number">3</span>] [,<span class="number">4</span>]</span><br><span class="line">[<span class="number">1</span>,]  <span class="number">171</span>  <span class="number">155</span>  <span class="number">154</span>  <span class="number">166</span></span><br><span class="line">[<span class="number">2</span>,]  <span class="number">175</span>  <span class="number">152</span>  <span class="number">164</span>  <span class="number">159</span></span><br><span class="line">[<span class="number">3</span>,]  <span class="number">159</span>  <span class="number">158</span>  <span class="number">168</span>  <span class="number">164</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建行数列数发生变化的矩阵</span></span><br><span class="line">&gt; matrix(x1,nrow=<span class="number">4</span>,ncol=<span class="number">3</span>)</span><br><span class="line">     [,<span class="number">1</span>] [,<span class="number">2</span>] [,<span class="number">3</span>]</span><br><span class="line">[<span class="number">1</span>,]  <span class="number">171</span>  <span class="number">152</span>  <span class="number">168</span></span><br><span class="line">[<span class="number">2</span>,]  <span class="number">175</span>  <span class="number">158</span>  <span class="number">166</span></span><br><span class="line">[<span class="number">3</span>,]  <span class="number">159</span>  <span class="number">154</span>  <span class="number">159</span></span><br><span class="line">[<span class="number">4</span>,]  <span class="number">155</span>  <span class="number">164</span>  <span class="number">164</span></span><br><span class="line"><span class="comment">#创建两个相同的矩阵</span></span><br><span class="line">&gt; A=B=matrix(<span class="number">1</span>:<span class="number">12</span>,nrow=<span class="number">3</span>,ncol=<span class="number">4</span>)</span><br><span class="line">&gt; A+B<span class="comment">#矩阵加法</span></span><br><span class="line">     [,<span class="number">1</span>] [,<span class="number">2</span>] [,<span class="number">3</span>] [,<span class="number">4</span>]</span><br><span class="line">[<span class="number">1</span>,]    <span class="number">2</span>    <span class="number">8</span>   <span class="number">14</span>   <span class="number">20</span></span><br><span class="line">[<span class="number">2</span>,]    <span class="number">4</span>   <span class="number">10</span>   <span class="number">16</span>   <span class="number">22</span></span><br><span class="line">[<span class="number">3</span>,]    <span class="number">6</span>   <span class="number">12</span>   <span class="number">18</span>   <span class="number">24</span></span><br><span class="line">&gt; A-B<span class="comment">#矩阵减法</span></span><br><span class="line">     [,<span class="number">1</span>] [,<span class="number">2</span>] [,<span class="number">3</span>] [,<span class="number">4</span>]</span><br><span class="line">[<span class="number">1</span>,]    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span></span><br><span class="line">[<span class="number">2</span>,]    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span></span><br><span class="line">[<span class="number">3</span>,]    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span></span><br><span class="line"></span><br><span class="line">&gt; A=matrix(<span class="number">1</span>:<span class="number">9</span>,nrow=<span class="number">3</span>,ncol=<span class="number">3</span>)</span><br><span class="line">&gt; B=matrix(<span class="number">1</span>:<span class="number">9</span>,nrow=<span class="number">3</span>,ncol=<span class="number">3</span>)</span><br><span class="line">&gt; A*B<span class="comment">#矩阵对应元素的乘积</span></span><br><span class="line">     [,<span class="number">1</span>] [,<span class="number">2</span>] [,<span class="number">3</span>]</span><br><span class="line">[<span class="number">1</span>,]    <span class="number">1</span>   <span class="number">16</span>   <span class="number">49</span></span><br><span class="line">[<span class="number">2</span>,]    <span class="number">4</span>   <span class="number">25</span>   <span class="number">64</span></span><br><span class="line">[<span class="number">3</span>,]    <span class="number">9</span>   <span class="number">36</span>   <span class="number">81</span></span><br><span class="line">&gt; A%*%B<span class="comment">#矩阵的乘积</span></span><br><span class="line">     [,<span class="number">1</span>] [,<span class="number">2</span>] [,<span class="number">3</span>]</span><br><span class="line">[<span class="number">1</span>,]   <span class="number">30</span>   <span class="number">66</span>  <span class="number">102</span></span><br><span class="line">[<span class="number">2</span>,]   <span class="number">36</span>   <span class="number">81</span>  <span class="number">126</span></span><br><span class="line">[<span class="number">3</span>,]   <span class="number">42</span>   <span class="number">96</span>  <span class="number">150</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt; A=matrix(<span class="number">1</span>:<span class="number">16</span>,nrow=<span class="number">4</span>,ncol=<span class="number">4</span>)</span><br><span class="line">&gt; diag(A)<span class="comment">#获得矩阵对角线元素</span></span><br><span class="line">[<span class="number">1</span>]  <span class="number">1</span>  <span class="number">6</span> <span class="number">11</span> <span class="number">16</span></span><br><span class="line">&gt; diag(diag(A))<span class="comment">#利用对角线元素创建对角矩阵</span></span><br><span class="line">     [,<span class="number">1</span>] [,<span class="number">2</span>] [,<span class="number">3</span>] [,<span class="number">4</span>]</span><br><span class="line">[<span class="number">1</span>,]    <span class="number">1</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span></span><br><span class="line">[<span class="number">2</span>,]    <span class="number">0</span>    <span class="number">6</span>    <span class="number">0</span>    <span class="number">0</span></span><br><span class="line">[<span class="number">3</span>,]    <span class="number">0</span>    <span class="number">0</span>   <span class="number">11</span>    <span class="number">0</span></span><br><span class="line">[<span class="number">4</span>,]    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>   <span class="number">16</span></span><br><span class="line"></span><br><span class="line">&gt; A=matrix(rnorm(<span class="number">16</span>),<span class="number">4</span>,<span class="number">4</span>)</span><br><span class="line">&gt; solve(A)<span class="comment">#求矩阵的逆</span></span><br><span class="line">           [,<span class="number">1</span>]       [,<span class="number">2</span>]        [,<span class="number">3</span>]       [,<span class="number">4</span>]</span><br><span class="line">[<span class="number">1</span>,] -<span class="number">0.2144625</span>  <span class="number">0.9291739</span>  <span class="number">0.41134588</span> -<span class="number">0.4129970</span></span><br><span class="line">[<span class="number">2</span>,] -<span class="number">0.2990380</span>  <span class="number">0.5107384</span> -<span class="number">0.03081756</span>  <span class="number">0.6477244</span></span><br><span class="line">[<span class="number">3</span>,] -<span class="number">0.1700996</span>  <span class="number">1.4089089</span> -<span class="number">0.49639658</span>  <span class="number">0.4082339</span></span><br><span class="line">[<span class="number">4</span>,] -<span class="number">0.4334604</span> -<span class="number">0.3543499</span> -<span class="number">0.30915934</span> -<span class="number">0.5515849</span></span><br><span class="line">&gt; A=diag(<span class="number">4</span>)+<span class="number">1</span></span><br><span class="line">&gt; A.e=eigen(A,symmetric=<span class="literal">T</span>)</span><br><span class="line">&gt; A.e<span class="comment">#求特征根和特征向量</span></span><br><span class="line">eigen() decomposition</span><br><span class="line">$values</span><br><span class="line">[<span class="number">1</span>] <span class="number">5</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">$vectors</span><br><span class="line">     [,<span class="number">1</span>]       [,<span class="number">2</span>]       [,<span class="number">3</span>]       [,<span class="number">4</span>]</span><br><span class="line">[<span class="number">1</span>,] -<span class="number">0.5</span>  <span class="number">0.8660254</span>  <span class="number">0.0000000</span>  <span class="number">0.0000000</span></span><br><span class="line">[<span class="number">2</span>,] -<span class="number">0.5</span> -<span class="number">0.2886751</span> -<span class="number">0.5773503</span> -<span class="number">0.5773503</span></span><br><span class="line">[<span class="number">3</span>,] -<span class="number">0.5</span> -<span class="number">0.2886751</span> -<span class="number">0.2113249</span>  <span class="number">0.7886751</span></span><br><span class="line">[<span class="number">4</span>,] -<span class="number">0.5</span> -<span class="number">0.2886751</span>  <span class="number">0.7886751</span> -<span class="number">0.2113249</span></span><br><span class="line"></span><br><span class="line">&gt; A=matrix(<span class="number">1</span>:<span class="number">12</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">&gt; dim(A)<span class="comment">#矩阵的维数</span></span><br><span class="line">[<span class="number">1</span>] <span class="number">3</span> <span class="number">4</span></span><br><span class="line">&gt; nrow(A)<span class="comment">#矩阵的行数</span></span><br><span class="line">[<span class="number">1</span>] <span class="number">3</span></span><br><span class="line">&gt; ncol(A)<span class="comment">#矩阵的列数</span></span><br><span class="line">[<span class="number">1</span>] <span class="number">4</span></span><br><span class="line">&gt; rowSums(A)<span class="comment">#矩阵按行求和</span></span><br><span class="line">[<span class="number">1</span>] <span class="number">22</span> <span class="number">26</span> <span class="number">30</span></span><br><span class="line">&gt; rowMeans(A)<span class="comment">#矩阵按行求均值</span></span><br><span class="line">[<span class="number">1</span>] <span class="number">5.5</span> <span class="number">6.5</span> <span class="number">7.5</span></span><br><span class="line">&gt; colSums(A)<span class="comment">#矩阵按列求和</span></span><br><span class="line">[<span class="number">1</span>]  <span class="number">6</span> <span class="number">15</span> <span class="number">24</span> <span class="number">33</span></span><br><span class="line">&gt; colMeans(A)<span class="comment">#矩阵按列求均值</span></span><br><span class="line">[<span class="number">1</span>]  <span class="number">2</span>  <span class="number">5</span>  <span class="number">8</span> <span class="number">11</span></span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>apply()函数<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; apply(A,<span class="number">1</span>,sum)<span class="comment">#矩阵按行求和</span></span><br><span class="line">[<span class="number">1</span>] <span class="number">22</span> <span class="number">26</span> <span class="number">30</span></span><br><span class="line">&gt; apply(A,<span class="number">1</span>,mean)<span class="comment">#矩阵按行求均值</span></span><br><span class="line">[<span class="number">1</span>] <span class="number">5.5</span> <span class="number">6.5</span> <span class="number">7.5</span></span><br><span class="line">&gt; A=matrix(rnorm(<span class="number">100</span>),<span class="number">20</span>,<span class="number">5</span>)</span><br><span class="line">&gt; apply(A,<span class="number">2</span>,var)<span class="comment">#矩阵按列求方差</span></span><br><span class="line">[<span class="number">1</span>] <span class="number">0.864552</span> <span class="number">1.153079</span> <span class="number">1.143116</span> <span class="number">1.264152</span> <span class="number">1.061721</span></span><br><span class="line">&gt; B=matrix(<span class="number">1</span>:<span class="number">12</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="comment">#矩阵按列求函数结果</span></span><br><span class="line">&gt; apply(B,<span class="number">2</span>,<span class="keyword">function</span>(x,a)x*a,a=<span class="number">2</span>)</span><br><span class="line">     [,<span class="number">1</span>] [,<span class="number">2</span>] [,<span class="number">3</span>] [,<span class="number">4</span>]</span><br><span class="line">[<span class="number">1</span>,]    <span class="number">2</span>    <span class="number">8</span>   <span class="number">14</span>   <span class="number">20</span></span><br><span class="line">[<span class="number">2</span>,]    <span class="number">4</span>   <span class="number">10</span>   <span class="number">16</span>   <span class="number">22</span></span><br><span class="line">[<span class="number">3</span>,]    <span class="number">6</span>   <span class="number">12</span>   <span class="number">18</span>   <span class="number">24</span></span><br></pre></td></tr></table></figure></p><h2 id="数据框"><a href="#数据框" class="headerlink" title="数据框"></a>数据框</h2><p>#产生由X1和X2构建的数据框<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&gt; X=data.frame(x1,x2);X</span><br><span class="line">    x1 x2</span><br><span class="line"><span class="number">1</span>  <span class="number">171</span> <span class="number">57</span></span><br><span class="line"><span class="number">2</span>  <span class="number">175</span> <span class="number">64</span></span><br><span class="line"><span class="number">3</span>  <span class="number">159</span> <span class="number">41</span></span><br><span class="line"><span class="number">4</span>  <span class="number">155</span> <span class="number">38</span></span><br><span class="line"><span class="number">5</span>  <span class="number">152</span> <span class="number">35</span></span><br><span class="line"><span class="number">6</span>  <span class="number">158</span> <span class="number">44</span></span><br><span class="line"><span class="number">7</span>  <span class="number">154</span> <span class="number">41</span></span><br><span class="line"><span class="number">8</span>  <span class="number">164</span> <span class="number">51</span></span><br><span class="line"><span class="number">9</span>  <span class="number">168</span> <span class="number">57</span></span><br><span class="line"><span class="number">10</span> <span class="number">166</span> <span class="number">49</span></span><br><span class="line"><span class="number">11</span> <span class="number">159</span> <span class="number">47</span></span><br><span class="line"><span class="number">12</span> <span class="number">164</span> <span class="number">46</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#赋予数据框新的列标签</span></span><br><span class="line">&gt; X=data.frame(<span class="string">'身高'</span>=x1,<span class="string">'体重'</span>=x2);X</span><br><span class="line">   身高 体重</span><br><span class="line"><span class="number">1</span>   <span class="number">171</span>   <span class="number">57</span></span><br><span class="line"><span class="number">2</span>   <span class="number">175</span>   <span class="number">64</span></span><br><span class="line"><span class="number">3</span>   <span class="number">159</span>   <span class="number">41</span></span><br><span class="line"><span class="number">4</span>   <span class="number">155</span>   <span class="number">38</span></span><br><span class="line"><span class="number">5</span>   <span class="number">152</span>   <span class="number">35</span></span><br><span class="line"><span class="number">6</span>   <span class="number">158</span>   <span class="number">44</span></span><br><span class="line"><span class="number">7</span>   <span class="number">154</span>   <span class="number">41</span></span><br><span class="line"><span class="number">8</span>   <span class="number">164</span>   <span class="number">51</span></span><br><span class="line"><span class="number">9</span>   <span class="number">168</span>   <span class="number">57</span></span><br><span class="line"><span class="number">10</span>  <span class="number">166</span>   <span class="number">49</span></span><br><span class="line"><span class="number">11</span>  <span class="number">159</span>   <span class="number">47</span></span><br><span class="line"><span class="number">12</span>  <span class="number">164</span>   <span class="number">46</span></span><br></pre></td></tr></table></figure></p><h2 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h2><h3 id="从剪切板读取"><a href="#从剪切板读取" class="headerlink" title="从剪切板读取"></a>从剪切板读取</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dat = read.table(<span class="string">"clipboard"</span>,header=<span class="literal">TRUE</span>)</span><br><span class="line">dat = read.table(<span class="string">"clipboard"</span>)</span><br></pre></td></tr></table></figure><h3 id="从文本文件读取"><a href="#从文本文件读取" class="headerlink" title="从文本文件读取"></a>从文本文件读取</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dat = read.table(<span class="string">"textdata.txt"</span>,header=<span class="literal">TRUE</span>)</span><br><span class="line">dat = read.table(<span class="string">"textdata.txt"</span>)</span><br></pre></td></tr></table></figure><h3 id="读取csv格式"><a href="#读取csv格式" class="headerlink" title="读取csv格式"></a>读取csv格式</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X=read.csv(<span class="string">"textdata.csv"</span>)</span><br></pre></td></tr></table></figure><h3 id="读取excel格式"><a href="#读取excel格式" class="headerlink" title="读取excel格式"></a>读取excel格式</h3><ol><li>下载包”readxl”</li><li>调用包library(readxl)<br>3.读取文件<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X=read_excel(<span class="string">"data.xlsx"</span>)</span><br></pre></td></tr></table></figure></li></ol><h2 id="定性变量分析"><a href="#定性变量分析" class="headerlink" title="定性变量分析"></a>定性变量分析</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将剪切板数据读入数据框中</span></span><br><span class="line">&gt; d=read.table(<span class="string">"clipboard"</span>,header=<span class="literal">T</span>)</span><br><span class="line">&gt; head(d)<span class="comment">#显示前6组数据</span></span><br><span class="line">&gt; <span class="keyword">attach</span>(d)<span class="comment">#绑定数据</span></span><br><span class="line">&gt; table(年龄)<span class="comment">#以为列联表</span></span><br></pre></td></tr></table></figure><h2 id="单因素分析"><a href="#单因素分析" class="headerlink" title="单因素分析"></a>单因素分析</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#条形图</span></span><br><span class="line">&gt; barplot(table(年龄)，col=<span class="number">1</span>:<span class="number">7</span>)</span><br><span class="line"><span class="comment">#饼图</span></span><br><span class="line">&gt; pie(table(结果))</span><br></pre></td></tr></table></figure><h2 id="两因素分析"><a href="#两因素分析" class="headerlink" title="两因素分析"></a>两因素分析</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#以性别分组的年龄条图</span></span><br><span class="line">&gt; barplot(table(年龄,性别),beside=<span class="literal">T</span>,col=<span class="number">1</span>:<span class="number">7</span>)</span><br><span class="line"><span class="comment">#以年龄分组的性别条图</span></span><br><span class="line">&gt; barplot(table(性别,年龄),beside=<span class="literal">T</span>,col=<span class="number">1</span>:<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h2 id="三因素分析"><a href="#三因素分析" class="headerlink" title="三因素分析"></a>三因素分析</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#以年龄、性别排列的结果频数三维列联表</span></span><br><span class="line">&gt; ftable(年龄,性别,结果)</span><br><span class="line"><span class="comment">#以性别、年龄排列的结果频数三维列联表</span></span><br><span class="line">&gt; ftable(性别,年龄,结果)</span><br></pre></td></tr></table></figure><p><strong>当数据不使用时，记得解除绑定</strong><br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">detach</span>(d)</span><br></pre></td></tr></table></figure></p><h2 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&gt; X=read.table(<span class="string">'clipboard'</span>,header=<span class="literal">T</span>);X</span><br><span class="line"><span class="comment">#按行做均值条形图</span></span><br><span class="line">&gt; barplot(apply(X,<span class="number">1</span>,mean))</span><br><span class="line"><span class="comment">#修改横坐标位置</span></span><br><span class="line">&gt; barplot(apply(X,<span class="number">1</span>,mean),las=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#按列做均值图条形</span></span><br><span class="line">&gt; barplot(apply(X,<span class="number">2</span>,mean))</span><br><span class="line"><span class="comment">#按列做彩色均值图条形图</span></span><br><span class="line">&gt; barplot(apply(X,<span class="number">2</span>,mean),col=<span class="number">1</span>:<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#按列做中位数条形图</span></span><br><span class="line">&gt; barplot(apply(X,<span class="number">2</span>,median),col=<span class="number">1</span>:<span class="number">8</span>)</span><br><span class="line"><span class="comment">#按列做均值饼图</span></span><br><span class="line">&gt; pie(apply(X,<span class="number">2</span>,mean))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 垂直箱线图</span></span><br><span class="line">&gt; boxplot(X)</span><br><span class="line"><span class="comment">#水平箱线图</span></span><br><span class="line">&gt; boxplot(X,horizontal=<span class="literal">T</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#简单星相图</span></span><br><span class="line">&gt; stars(X)</span><br><span class="line"><span class="comment">#带图例的星相图</span></span><br><span class="line">&gt; stars(X,key.loc=c(<span class="number">17</span>,<span class="number">7</span>))</span><br><span class="line"><span class="comment">#带图例度彩色星相图</span></span><br><span class="line">&gt; stars(X,key.loc=c(<span class="number">17</span>,<span class="number">7</span>),draw.segments=<span class="literal">T</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#脸谱图</span></span><br><span class="line"><span class="comment">#加载aplpack包</span></span><br><span class="line">&gt; <span class="keyword">library</span>(aplpack)</span><br><span class="line">&gt; faces(X)</span><br><span class="line"><span class="comment">#去掉变量1做脸谱图</span></span><br><span class="line">&gt; faaces(X[,-<span class="number">1</span>])</span><br><span class="line"><span class="comment">#face(X,[,2:8])</span></span><br><span class="line"><span class="comment">#选择第1,5,6,9,18个观测的多元数据做脸谱图</span></span><br><span class="line">&gt; faces(X[C(<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">18</span>),])</span><br><span class="line"></span><br><span class="line"><span class="comment">#调和曲线图</span></span><br><span class="line">&gt; <span class="keyword">library</span>(mvstats)<span class="comment">#mvstats不是官方包</span></span><br><span class="line">&gt; plot.andrews(X)</span><br><span class="line">&gt; plot.andrews(X[C(<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">18</span>),])</span><br></pre></td></tr></table></figure><h1 id="多元相关及回归分析"><a href="#多元相关及回归分析" class="headerlink" title="多元相关及回归分析"></a>多元相关及回归分析</h1><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x=c(<span class="number">171</span>,<span class="number">175</span>,<span class="number">159</span>,<span class="number">155</span>,<span class="number">152</span>,<span class="number">158</span>,<span class="number">154</span>,<span class="number">164</span>,<span class="number">168</span>,<span class="number">166</span>,<span class="number">159</span>,<span class="number">164</span>)<span class="comment">#身高</span></span><br><span class="line">y=c(<span class="number">57</span>,<span class="number">64</span>,<span class="number">41</span>,<span class="number">38</span>,<span class="number">35</span>,<span class="number">44</span>,<span class="number">41</span>,<span class="number">51</span>,<span class="number">57</span>,<span class="number">49</span>,<span class="number">47</span>,<span class="number">46</span>)<span class="comment">#体重</span></span><br><span class="line">plot(x,y)</span><br></pre></td></tr></table></figure><p>画散点图<br>计算lxx=556.9  lyy=813   lxy=645.5<br>r=lxy/根号下(lxxlyy)=0.9593 高的正相关</p><h2 id="相关系数计算函数cor"><a href="#相关系数计算函数cor" class="headerlink" title="相关系数计算函数cor()"></a>相关系数计算函数cor()</h2><p>cor(x,y=NULL,method=c(“pearson”,”kendall”,”spearman”))<br>x 数值向量、矩阵或数据框，y 空或数值向量、矩阵或数据框<br>method 计算方法，包括”pearson”,”kendall”或”spearman”三种，默认pearson</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">计算pearson相关系数：</span><br><span class="line">&gt; cor(x,y)</span><br><span class="line"></span><br><span class="line">建立假设检验 H0：ρ=<span class="number">0</span>，H1：ρ≠<span class="number">0</span>，α=<span class="number">0.05</span></span><br><span class="line">计算相关系数r的t值：tr=r-<span class="number">0</span>/根号下(<span class="number">1</span>-r^<span class="number">2</span>/n-<span class="number">2</span>)=<span class="number">10.74</span></span><br><span class="line">&gt; n=length(x)</span><br><span class="line">&gt; tr=r/sqrt((<span class="number">1</span>-r^<span class="number">2</span>)/(n-<span class="number">2</span>));tr</span><br><span class="line">计算t值和P值，作结论：</span><br><span class="line">&gt; cor.test(x,y)<span class="comment">#相关系数假设检验</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> Pearson&apos;s product-moment correlation</span><br><span class="line"></span><br><span class="line">data:  x and y</span><br><span class="line">t = 10.743, df = 10, p-value = 8.21e-07</span><br><span class="line">alternative hypothesis: true correlation is not equal to 0</span><br><span class="line">95 percent confidence interval:</span><br><span class="line"> 0.8574875 0.9888163</span><br><span class="line">sample estimates:</span><br><span class="line">      cor </span><br><span class="line">0.9593031</span><br></pre></td></tr></table></figure><p>由于p-value &lt; 0.05，于是在α=0.05水准上拒绝H0，接受H1，可认为该人群身高与体重呈现正的线性关系。</p><p>建立直线回归方程<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">b=lxy(x,y)/lxy(x,x)<span class="comment">#不过我这里报错没有lxy函数...lxy好像是离差平方和</span></span><br><span class="line">a=mean(y)-b*mean(x)</span><br><span class="line">c(a=a,b=b)</span><br><span class="line"></span><br><span class="line"><span class="comment">#散点图</span></span><br><span class="line">plot(x,y)</span><br><span class="line">lines(x,a+b*x)</span><br></pre></td></tr></table></figure></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#数据输入</span></span><br><span class="line">d=read.table(<span class="string">"clipboard"</span>,header=<span class="literal">T</span>);d</span><br><span class="line"><span class="comment">#拟合模型</span></span><br><span class="line">m=lm(y~x,data=d);m</span><br></pre></td></tr></table></figure><p>输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Call:</span><br><span class="line">lm(formula = y ~ x, data = d)</span><br><span class="line"></span><br><span class="line">Coefficients:</span><br><span class="line">(Intercept)            x  </span><br><span class="line">   -140.364        1.159</span><br></pre></td></tr></table></figure></p><p>y估计=-140.364+1.159x<br>作回归直线<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plot(y~x,data=d)<span class="comment">#作散点图</span></span><br><span class="line">abline(m)<span class="comment">#添加回归线</span></span><br></pre></td></tr></table></figure></p><p>模型的方差分析（ANOVA)<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">anova(fm)</span><br></pre></td></tr></table></figure></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">summary(fm)<span class="comment">#回归系数t检验</span></span><br></pre></td></tr></table></figure><h1 id="广义线性模型"><a href="#广义线性模型" class="headerlink" title="广义线性模型"></a>广义线性模型</h1><p>Poisson分布族模型和拟Poisson分布族模型的使用方法为<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">glm(formula,family=poisson,data,<span class="keyword">...</span>)</span><br><span class="line">glm(formula,family=poisson(link=log),data,<span class="keyword">...</span>)</span><br></pre></td></tr></table></figure></p><p>(1)建立Poisson对数线性模型：<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d=read.table(<span class="string">"clipboard"</span>,header=<span class="literal">T</span>)</span><br><span class="line">log=glm(y~x1+x2,family=poisson,data=d)<span class="comment">#对数线性模型</span></span><br><span class="line">summary(log)<span class="comment">#检验结果</span></span><br></pre></td></tr></table></figure></p><p>广义线性模型glm()的用法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">glm(formula, family=gaussian, data, ...)</span><br></pre></td></tr></table></figure></p><p>formula为公式，即为要拟合的模型，famliy为分布族，包括正态分布（gaussian）、二项分布（binomial）、泊松分布（poission）和伽玛分布（gamma），分布族还可以通过选项link=来指定使用的连接函数，data为可选择的数据框。<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#(1)建立全变量logistic回归模型</span></span><br><span class="line">d=read.table(<span class="string">"clipboard"</span>,header=<span class="literal">T</span>)</span><br><span class="line">logit&lt;-glm(y~x1+x2+x3,family=binomial,data=d)<span class="comment">#Logistic模型</span></span><br><span class="line">summary(logit)<span class="comment">#Logistic模型结果</span></span><br><span class="line"><span class="comment">#(2)逐步筛选变量logistic回归模型</span></span><br><span class="line"><span class="comment">#逐步筛选法变量选择</span></span><br><span class="line">logit.step=step(logit)</span><br><span class="line"><span class="comment">#逐步筛选法变量选择结果</span></span><br><span class="line">summar(logit.step)</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d=read.table(&quot;clipboard&quot;,header=T)</span><br><span class="line">anova(lm(Y~factor(A),data=d))#完全随机设计方差分析</span><br></pre></td></tr></table></figure><h1 id="判别分析"><a href="#判别分析" class="headerlink" title="判别分析"></a>判别分析</h1><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#线性判别分析</span></span><br><span class="line">d=read_excel(<span class="string">'data.xlsx'</span>,<span class="string">'d'</span>)</span><br><span class="line">boxplot(x1~G,d)</span><br><span class="line">boxplot(x2~G,d)</span><br><span class="line">t.test(x1~G,d)</span><br><span class="line">t.test(x2~G,d)</span><br><span class="line">summary(glm(G-<span class="number">1</span>~x1+x2,family=binomial,d))<span class="comment">#Logistic模型分析</span></span><br></pre></td></tr></table></figure><p>线性判别分析函数lda的用法<br>lda(formula, data, …)<br>formula形如y~x1+x2+…的公式框架，data数据框<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">attach</span>(d)</span><br><span class="line">plot(x1,x2);text(x1,x2,G,adj=-<span class="number">0.5</span>)<span class="comment">#表示点所属类别G</span></span><br><span class="line"><span class="keyword">library</span>(MASS)</span><br><span class="line">ld=lda(G~x1+x2);ld</span><br><span class="line">lp=predict(ld)</span><br><span class="line">G1=lp$class</span><br><span class="line">data.frame(G,G1)</span><br><span class="line">tab1=table(G,G1);tab1</span><br><span class="line">sum(diag(prop.table(tab1)))</span><br></pre></td></tr></table></figure></p><p>……没有实践写不下去</p>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;left&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1570279473&amp;di=4d33479a18fb2e2b4de972424affd863&amp;imgtype=jpg&amp;er=1&amp;src=http%3A%2F%2Fwww.raincent.com%2Fuploadfile%2F2017%2F0928%2F20170928104357284.jpg&quot; width=&quot;300&quot; height=&quot;180&quot; style=&quot;float:right;&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;　　&lt;strong&gt;嘤嘤嘤还要学统计&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt; &lt;/div&gt;
    
    </summary>
    
      <category term="数据挖掘" scheme="https://hubojing.github.io/categories/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/"/>
    
    
      <category term="R语言" scheme="https://hubojing.github.io/tags/R%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>初涉Hadoop</title>
    <link href="https://hubojing.github.io/2019/09/24/%E5%88%9D%E6%B6%89Hadoop/"/>
    <id>https://hubojing.github.io/2019/09/24/初涉Hadoop/</id>
    <published>2019-09-24T10:45:27.000Z</published>
    <updated>2019-10-12T08:40:33.032Z</updated>
    
    <content type="html"><![CDATA[<div align="left"><br><img src="https://github.com/hubojing/BlogImages/blob/master/%E5%88%9D%E6%B6%89Hadoop%E2%80%94%E2%80%94%E5%8C%BA%E5%88%AB.png?raw=true" width="300" height="180" style="float:right;"><br><br><br>　　<strong>最基本的概念+简单实战。</strong><br><br><br> </div><a id="more"></a><p>最近看到一篇用Hadoop解决交通问题的论文，然而我还没有接触过……</p><h1 id="Hadoop是什么"><a href="#Hadoop是什么" class="headerlink" title="Hadoop是什么"></a>Hadoop是什么</h1><p>Hadoop是一个开源的大数据框架<br>Hadoop是一个分布式计算的解决方案<br>Hadoop=HDFS(分布式文件系统)+MapReduce(分布式计算)<br>HDFS：存储是大数据技术的基础<br>MapReduce编程模型：分布式计算是大数据应用的解决方案</p><h2 id="HDFS概念"><a href="#HDFS概念" class="headerlink" title="HDFS概念"></a>HDFS概念</h2><h3 id="数据块"><a href="#数据块" class="headerlink" title="数据块"></a>数据块</h3><p>默认大小为64MB，一般设置为128M，备份x3</p><h3 id="NameNode"><a href="#NameNode" class="headerlink" title="NameNode"></a>NameNode</h3><p>管理文件系统的命名空间，存放文件元数据<br>维护着文件系统的所有文件和目录，文件与数据块的映射<br>记录每个文件中各个块所在数据节点的信息</p><h3 id="DataNode"><a href="#DataNode" class="headerlink" title="DataNode"></a>DataNode</h3><p>存储并检索数据块<br>向NameNode更新所存储块的列表</p><h2 id="HDFS优缺点"><a href="#HDFS优缺点" class="headerlink" title="HDFS优缺点"></a>HDFS优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>适合大文件存储，支持TB、PB级的数据存储，并有副本策略<br>可以构建在廉价的机器上，并有一定的容错和恢复机制<br>支持流式数据访问，一次写入，多次读取最高效</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>不适合大量小文件存储<br>不适合并发写入，不支持文件随机修改<br>不支持随机读等低延时的访问方式</p><h1 id="Hadoop基础架构"><a href="#Hadoop基础架构" class="headerlink" title="Hadoop基础架构"></a>Hadoop基础架构</h1><h2 id="YARN概念"><a href="#YARN概念" class="headerlink" title="YARN概念"></a>YARN概念</h2><h3 id="ResourceManager"><a href="#ResourceManager" class="headerlink" title="ResourceManager"></a>ResourceManager</h3><p>分配和调度资源<br>启动并监控ApplicationMaster<br>监控NodeManager</p><h3 id="ApplicationMaster"><a href="#ApplicationMaster" class="headerlink" title="ApplicationMaster"></a>ApplicationMaster</h3><p>为MR类型的程序申请资源，并分配给内部任务<br>负责数据的切分<br>监控任务的执行及容错<br>NodeManager<br>管理单个节点的资源<br>处理来自ResourceManager的命令<br>处理来自ApplicationMaster的命令</p><h2 id="MapReduce编程模型"><a href="#MapReduce编程模型" class="headerlink" title="MapReduce编程模型"></a>MapReduce编程模型</h2><p>输入一个大文件，通过Split之后，将其分为多个分片<br>每个文件分片由单独的机器去处理，这就是Map方法<br>将各个机器计算的结果进行汇总并得到最终的结果，这就是Reduce方法</p><h2 id="1-0和2-0区别"><a href="#1-0和2-0区别" class="headerlink" title="1.0和2.0区别"></a>1.0和2.0区别</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/%E5%88%9D%E6%B6%89Hadoop%E2%80%94%E2%80%94%E5%8C%BA%E5%88%AB.png?raw=true" alt="区别" title="">                </div>                <div class="image-caption">区别</div>            </figure><h1 id="Hadoop生态圈"><a href="#Hadoop生态圈" class="headerlink" title="Hadoop生态圈"></a>Hadoop生态圈</h1><p>很多…</p><h2 id="HBase"><a href="#HBase" class="headerlink" title="HBase"></a>HBase</h2><p>高可靠，高性能，面向列，可伸缩，实时读写的分布式数据库<br>利用HDFS作为其文件存储系统，支持MR程序读取数据<br>存储非结构化和半结构化数据<br>RowKey:数据唯一标识，按字典排序<br>Column Family:列族，多个列的集合。最多不要超过3个<br>TimeStamp时间戳：支持多版本数据同时存在</p><h2 id="Spark"><a href="#Spark" class="headerlink" title="Spark"></a>Spark</h2><p>基于内存计算的大数据并行计算框架<br>Spark是MapReduce的替代方案，兼容HDFS, HIVE等数据源<br>优点：<br>基于内存计算的分布式计算框架<br>抽象出分布式内存存储数据结构 弹性分布式数据集RDD<br>基于事件驱动，通过线程池复用线程提高性能</p><h1 id="简单实战"><a href="#简单实战" class="headerlink" title="简单实战"></a>简单实战</h1><p>常用HDFS Shell命令<br>类Linux系统：ls, cat, mkdir, rm, chmod, chown等<br>HDFS文件交互：copyFromLocal, copyToLocal, get, put</p>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;left&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://github.com/hubojing/BlogImages/blob/master/%E5%88%9D%E6%B6%89Hadoop%E2%80%94%E2%80%94%E5%8C%BA%E5%88%AB.png?raw=true&quot; width=&quot;300&quot; height=&quot;180&quot; style=&quot;float:right;&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;　　&lt;strong&gt;最基本的概念+简单实战。&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt; &lt;/div&gt;
    
    </summary>
    
      <category term="数据挖掘" scheme="https://hubojing.github.io/categories/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/"/>
    
    
      <category term="Hadoop" scheme="https://hubojing.github.io/tags/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客进阶优化</title>
    <link href="https://hubojing.github.io/2019/09/14/hexo%E5%8D%9A%E5%AE%A2%E8%BF%9B%E9%98%B6%E4%BC%98%E5%8C%96/"/>
    <id>https://hubojing.github.io/2019/09/14/hexo博客进阶优化/</id>
    <published>2019-09-14T15:03:40.000Z</published>
    <updated>2019-09-14T07:28:39.000Z</updated>
    
    <content type="html"><![CDATA[<div align="left"><br><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1511116107294&di=a91ad5adc5431ecb1865be565f7b0e82&imgtype=0&src=http%3A%2F%2Fpic4.zhimg.com%2Fd4c1239e75c02e8482c22017a6c8d407_r.jpg" width="300" height="180" style="float:right;"><br>　　<br>　　　<br>　　<strong>Hexo优化的一些汇总整理。</strong><br>　　<br>　　<br> </div><a id="more"></a><h1 id="老记录"><a href="#老记录" class="headerlink" title="老记录"></a>老记录</h1><p><a href="https://hubojing.github.io/2015/11/10/hexo%E4%BC%98%E5%8C%96/">https://hubojing.github.io/2015/11/10/hexo%E4%BC%98%E5%8C%96/</a><br>原来写的，排版什么的不是很好看…</p><h2 id="一些重要参考"><a href="#一些重要参考" class="headerlink" title="一些重要参考"></a>一些重要参考</h2><ul><li>HEXO  <a href="https://hexo.io/" target="_blank" rel="noopener">https://hexo.io/</a></li><li>Hexo在github上构建免费的web应用   <a href="http://blog.fens.me/hexo-blog-github/" target="_blank" rel="noopener">http://blog.fens.me/hexo-blog-github/</a></li><li>Hexo你的博客  <a href="http://www.tuicool.com/articles/AfQnQjy/" target="_blank" rel="noopener">http://www.tuicool.com/articles/AfQnQjy/</a></li><li>不蒜子  <a href="http://ibruce.info/2015/04/04/busuanzi/" target="_blank" rel="noopener">http://ibruce.info/2015/04/04/busuanzi/</a></li><li>Markdown 编辑器语法指南  <a href="https://segmentfault.com/markdown/" target="_blank" rel="noopener">https://segmentfault.com/markdown/</a></li><li>Markdown入门  <a href="http://www.360doc.com/content/13/1119/13/3300331_330476656.shtml/" target="_blank" rel="noopener">http://www.360doc.com/content/13/1119/13/3300331_330476656.shtml/</a></li><li>GitHub for Windows 2.0使用教程  <a href="http://www.cnblogs.com/jiqing9006/p/3987702.html/" target="_blank" rel="noopener">http://www.cnblogs.com/jiqing9006/p/3987702.html/</a></li><li>Github使用技巧  higrid.net/hi/docs/github-cheat-sheet/</li><li>解决Hexo置顶问题  <a href="http://www.netcan666.com/2015/11/22/%E8%A7%A3%E5%86%B3Hexo%E7%BD%AE%E9%A1%B6%E9%97%AE%E9%A2%98/" target="_blank" rel="noopener">http://www.netcan666.com/2015/11/22/%E8%A7%A3%E5%86%B3Hexo%E7%BD%AE%E9%A1%B6%E9%97%AE%E9%A2%98/</a></li><li>如何向google提交sitemap（详细）  <a href="http://fionat.github.io/blog/2013/10/23/sitemap/" target="_blank" rel="noopener">http://fionat.github.io/blog/2013/10/23/sitemap/</a></li><li>用微信与Github搭建“微博”  <a href="https://joway.github.io/posts/Toy/2016-05-14-%E7%94%A8%E5%BE%AE%E4%BF%A1%E4%B8%8EGithub%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E5%BE%AE%E5%8D%9A.html/" target="_blank" rel="noopener">https://joway.github.io/posts/Toy/2016-05-14-%E7%94%A8%E5%BE%AE%E4%BF%A1%E4%B8%8EGithub%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E5%BE%AE%E5%8D%9A.html/</a></li><li>多说样式（UA浏览器标识、旋转头像）  <a href="http://moxfive.xyz/2015/09/29/duoshuo-style/#" target="_blank" rel="noopener">http://moxfive.xyz/2015/09/29/duoshuo-style/#</a></li><li>添加相册功能  <a href="http://www.tuicool.com/articles/fYZ7Zrj" target="_blank" rel="noopener">http://www.tuicool.com/articles/fYZ7Zrj</a></li><li>页面自动刷新与移动端调试  <a href="http://moxfive.xyz/2016/03/27/hexo-browsersync/" target="_blank" rel="noopener">http://moxfive.xyz/2016/03/27/hexo-browsersync/</a></li><li>chrome 谷歌浏览器报错DNS查找失败的解决办法 <a href="http://www.t522.com/suibi/238.html/" target="_blank" rel="noopener">http://www.t522.com/suibi/238.html/</a></li><li>用自己的页面做主页 <a href="https://jacklightchen.github.io/blog/2016/10/27/HexoOverview/" target="_blank" rel="noopener">https://jacklightchen.github.io/blog/2016/10/27/HexoOverview/</a></li><li>统计文章字数  <a href="https://github.com/willin/hexo-wordcount" target="_blank" rel="noopener">https://github.com/willin/hexo-wordcount</a></li></ul><h2 id="高级进阶"><a href="#高级进阶" class="headerlink" title="高级进阶"></a>高级进阶</h2><ul><li>Daocloud持续集成————Hexo博客自动发布系统  <a href="https://nullun.tk/ci/daocloud/Daocloud%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E2%80%94%E2%80%94%E2%80%94%E2%80%94Hexo%E5%8D%9A%E5%AE%A2%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F/#more/" target="_blank" rel="noopener">https://nullun.tk/ci/daocloud/Daocloud%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E2%80%94%E2%80%94%E2%80%94%E2%80%94Hexo%E5%8D%9A%E5%AE%A2%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F/#more/</a></li><li>使用 Termux 在手机上运行 linux 黑科技 <a href="http://www.oyohyee.com/post/Note/Termux.html/" target="_blank" rel="noopener">http://www.oyohyee.com/post/Note/Termux.html/</a></li><li>Hexo+Github实现相册功能 <a href="http://blog.csdn.net/u013082989/article/details/70162293/" target="_blank" rel="noopener">http://blog.csdn.net/u013082989/article/details/70162293/</a></li><li>Hexo+yilia主题实现文章目录和添加视频 <a href="http://blog.csdn.net/u013082989/article/details/70212008/" target="_blank" rel="noopener">http://blog.csdn.net/u013082989/article/details/70212008/</a></li><li>用 Hexo 做个人 Wiki 知识管理系统 <a href="https://www.v2ex.com/t/347176?p=1/" target="_blank" rel="noopener">https://www.v2ex.com/t/347176?p=1/</a></li><li>Hexo自定义页面的方法 <a href="http://www.cnblogs.com/refined-x/p/7160174.html/" target="_blank" rel="noopener">http://www.cnblogs.com/refined-x/p/7160174.html/</a></li><li>在 Hexo 博客中跳过渲染，创建自定义网页 <a href="http://www.jianshu.com/p/f89428fce8d5/" target="_blank" rel="noopener">http://www.jianshu.com/p/f89428fce8d5/</a></li><li>增加打赏功能  <a href="http://cighao.com/2016/02/23/add-donate-to-hexo/" target="_blank" rel="noopener">http://cighao.com/2016/02/23/add-donate-to-hexo/</a></li><li>hexo移植    <a href="http://nodlee.com/2015/06/07/how-to-porting-hexo/#more" target="_blank" rel="noopener">http://nodlee.com/2015/06/07/how-to-porting-hexo/#more</a></li></ul><h2 id="网页特效"><a href="#网页特效" class="headerlink" title="网页特效"></a>网页特效</h2><ul><li>鼠标点击特效 <a href="https://laod.cn/design/page/javascript-texiao.html" target="_blank" rel="noopener">https://laod.cn/design/page/javascript-texiao.html</a></li></ul><h1 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h1><p>node_modules/hexo-generator-index/lib/generator.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line"></span><br><span class="line">var pagination = require(&apos;hexo-pagination&apos;);</span><br><span class="line"></span><br><span class="line">module.exports = function(locals)&#123;</span><br><span class="line">  var config = this.config;</span><br><span class="line">  var posts = locals.posts;</span><br><span class="line"></span><br><span class="line">    posts.data = posts.data.sort(function(a, b) &#123;</span><br><span class="line">        if(a.top &amp;&amp; b.top) &#123; // 两篇文章top都有定义</span><br><span class="line">            if(a.top == b.top) return b.date - a.date; // 若top值一样则按照文章日期降序排</span><br><span class="line">            else return b.top - a.top; // 否则按照top值降序排</span><br><span class="line">        &#125;</span><br><span class="line">        else if(a.top &amp;&amp; !b.top) &#123; // 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）</span><br><span class="line">            return -1;</span><br><span class="line">        &#125;</span><br><span class="line">        else if(!a.top &amp;&amp; b.top) &#123;</span><br><span class="line">            return 1;</span><br><span class="line">        &#125;</span><br><span class="line">        else return b.date - a.date; // 都没定义按照文章日期降序排</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">  var paginationDir = config.pagination_dir || &apos;page&apos;;</span><br><span class="line"></span><br><span class="line">  return pagination(&apos;&apos;, posts, &#123;</span><br><span class="line">    perPage: config.index_generator.per_page,</span><br><span class="line">    layout: [&apos;index&apos;, &apos;archive&apos;],</span><br><span class="line">    format: paginationDir + &apos;/%d/&apos;,</span><br><span class="line">    data: &#123;</span><br><span class="line">      __index: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>按更新时间排序：改一下上面文章里的代码 a.date, b.date 分别改为 a.updated, b.updated<br>参考资料：<a href="http://www.netcan666.com/2015/11/22/解决Hexo置顶问题/" target="_blank" rel="noopener">http://www.netcan666.com/2015/11/22/解决Hexo置顶问题/</a></p><p>原始代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line"></span><br><span class="line">var pagination = require(&apos;hexo-pagination&apos;);</span><br><span class="line"></span><br><span class="line">module.exports = function(locals)&#123;</span><br><span class="line">  var config = this.config;</span><br><span class="line">  var posts = locals.posts.sort(&apos;-date&apos;);</span><br><span class="line">  var paginationDir = config.pagination_dir || &apos;page&apos;;</span><br><span class="line"></span><br><span class="line">  return pagination(&apos;&apos;, posts, &#123;</span><br><span class="line">    perPage: config.index_generator.per_page,</span><br><span class="line">    layout: [&apos;index&apos;, &apos;archive&apos;],</span><br><span class="line">    format: paginationDir + &apos;/%d/&apos;,</span><br><span class="line">    data: &#123;</span><br><span class="line">      __index: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;left&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1511116107294&amp;di=a91ad5adc5431ecb1865be565f7b0e82&amp;imgtype=0&amp;src=http%3A%2F%2Fpic4.zhimg.com%2Fd4c1239e75c02e8482c22017a6c8d407_r.jpg&quot; width=&quot;300&quot; height=&quot;180&quot; style=&quot;float:right;&quot;&gt;&lt;br&gt;　　&lt;br&gt;　　　&lt;br&gt;　　&lt;strong&gt;Hexo优化的一些汇总整理。&lt;/strong&gt;&lt;br&gt;　　&lt;br&gt;　　&lt;br&gt; &lt;/div&gt;
    
    </summary>
    
      <category term="博客" scheme="https://hubojing.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="Hexo" scheme="https://hubojing.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>SSD重装系统最简教程</title>
    <link href="https://hubojing.github.io/2019/09/12/SSD%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F%E6%9C%80%E7%AE%80%E6%95%99%E7%A8%8B/"/>
    <id>https://hubojing.github.io/2019/09/12/SSD重装系统最简教程/</id>
    <published>2019-09-12T05:59:01.000Z</published>
    <updated>2019-09-12T05:59:01.000Z</updated>
    
    <content type="html"><![CDATA[<div align="left"><br><img src="https://github.com/hubojing/BlogImages/blob/master/SSD重装系统最简教程——SSD.jpg?raw=true" width="300" height="180" style="float:right;"><br><br><br>　　<strong>懒人装机必备。（预计可以节约100元装机费）</strong><br><br><br> </div><a id="more"></a><h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>一直没看好心仪的笔记本，但为了接下来的学习任务，决定先把我古老的联想Y400改造了凑合用一段时间，刚好内存和SSD的价格都降下来了。换了8G内存，加了SSD。</p><h1 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/SSD重装系统最简教程——内存条.jpg?raw=true" alt="内存条" title="">                </div>                <div class="image-caption">内存条</div>            </figure><p>目的是能用就OK，所以越便宜越好……<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/SSD重装系统最简教程——SSD.jpg?raw=true" alt="SSD" title="">                </div>                <div class="image-caption">SSD</div>            </figure><br>SSD也有更便宜的，不过数据还是重要，买个适配好点的吧…（数据最终还是要存到硬盘的嘛…内存坏了的损失比SSD小，希望我没想错）<br>具体物理安装过程没什么好说的，就是拆机就完事了。</p><h1 id="重装系统"><a href="#重装系统" class="headerlink" title="重装系统"></a>重装系统</h1><p>真不建议迁移系统，感觉现在所谓的迁移系统都有很多的缺漏，不是真正意义上的迁移。我试了试傲梅分区助手的迁移功能，其实还是假迁移。还是重装最合适。</p><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>MSDN，我告诉你下载原版win10的iso文件。</p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p>一个很偷懒且硬核的方法：先暂时卸下机械硬盘，只安装SSD。然后直接点开下载的文件里的setup安装就好了。不过我没尝试，因为好不容易把后盖给盖上了，实在是不想拧螺丝了。<br>网上有很多U盘制作工具，但是不够简洁。而且还容易制作失败。（我用老毛桃制作就失败了…)<br>我觉得最简单的是用软碟通UltraISO制作U盘启动盘。所以先下载UltraISO，安装。</p><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><p>插入一个空8G以上U盘。<br>打开UltraISO，将下载好的iso文件导入，点击<code>启动</code>-<code>写入硬盘映像</code>。写入，完成。</p><h2 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h2><p>重启，屏幕亮起时按F1进入BIOS，将USB启动设置优先级到第一。保存。系统进入安装引导页。</p><h2 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h2><p>正常安装，记得将系统选择安装在SSD里。等待。</p><p>重装成功！</p><p>我看到有同学花100块去找人装系统，唉，这个钱花的好亏。（我只收50！<del>手动滑稽</del>）</p>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;left&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://github.com/hubojing/BlogImages/blob/master/SSD重装系统最简教程——SSD.jpg?raw=true&quot; width=&quot;300&quot; height=&quot;180&quot; style=&quot;float:right;&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;　　&lt;strong&gt;懒人装机必备。（预计可以节约100元装机费）&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt; &lt;/div&gt;
    
    </summary>
    
      <category term="数码" scheme="https://hubojing.github.io/categories/%E6%95%B0%E7%A0%81/"/>
    
    
      <category term="硬件" scheme="https://hubojing.github.io/tags/%E7%A1%AC%E4%BB%B6/"/>
    
      <category term="装机" scheme="https://hubojing.github.io/tags/%E8%A3%85%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Github+SSH就这么连</title>
    <link href="https://hubojing.github.io/2019/09/11/Github+SSH%E5%B0%B1%E8%BF%99%E4%B9%88%E8%BF%9E/"/>
    <id>https://hubojing.github.io/2019/09/11/Github+SSH就这么连/</id>
    <published>2019-09-11T13:06:02.000Z</published>
    <updated>2019-09-11T13:06:02.000Z</updated>
    
    <content type="html"><![CDATA[<div align="left"><br><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1568355520376&di=b5e9cb8cb9ab1438053528171c8ec33a&imgtype=0&src=http%3A%2F%2Fa1.jikexueyuan.com%2Fhome%2F201509%2F14%2Fab63%2F55f627e6b9bd3.jpg" width="300" height="180" style="float:right;"><br><br><br>　　<strong>这篇文章很短。</strong><br><br><br> </div><a id="more"></a><h1 id="官方说明"><a href="#官方说明" class="headerlink" title="官方说明"></a>官方说明</h1><p><a href="https://help.github.com/en/articles/connecting-to-github-with-ssh" target="_blank" rel="noopener">https://help.github.com/en/articles/connecting-to-github-with-ssh</a><br>不知道是我英语进步了还是咋的，感觉官网的文档写的特别清晰，阅读起来也特别清爽。</p><p>电脑重装了，反正又要添加SSH。我寻思着以前有记录就翻了翻，唉，刚写技术博那会儿的文章真是乱的不能看。干脆重新整理一下吧。</p><p>整个过程非常简单！<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -b 4096 -C <span class="string">"your_email@example.com"</span></span><br></pre></td></tr></table></figure></p><p>不停回车。（没设密码）</p><p>在<code>/c/Users/you/.ssh</code>文件夹中复制id_rsa.pub中的全部。</p><p>在Github的Setting中的<code>SSH and GPG keys</code>中新建SSH，并粘贴刚才的内容。</p><p>完成！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>检测一下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi hubojing! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure></p><p>成功！</p>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;left&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1568355520376&amp;di=b5e9cb8cb9ab1438053528171c8ec33a&amp;imgtype=0&amp;src=http%3A%2F%2Fa1.jikexueyuan.com%2Fhome%2F201509%2F14%2Fab63%2F55f627e6b9bd3.jpg&quot; width=&quot;300&quot; height=&quot;180&quot; style=&quot;float:right;&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;　　&lt;strong&gt;这篇文章很短。&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt; &lt;/div&gt;
    
    </summary>
    
      <category term="互联网" scheme="https://hubojing.github.io/categories/%E4%BA%92%E8%81%94%E7%BD%91/"/>
    
    
      <category term="Github" scheme="https://hubojing.github.io/tags/Github/"/>
    
      <category term="SSH" scheme="https://hubojing.github.io/tags/SSH/"/>
    
  </entry>
  
  <entry>
    <title>ChromeDevTools调试备忘</title>
    <link href="https://hubojing.github.io/2019/08/14/ChromeDevTools%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7%E8%B0%83%E8%AF%95%E6%8C%87%E5%8D%97/"/>
    <id>https://hubojing.github.io/2019/08/14/ChromeDevTools开发者工具调试指南/</id>
    <published>2019-08-14T07:22:21.000Z</published>
    <updated>2019-08-14T07:22:21.000Z</updated>
    
    <content type="html"><![CDATA[<div align="left"><br><img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=4249806454,3340336260&fm=26&gp=0.jpg" width="300" height="180" style="float:right;"><br><br><br>　　<strong>笔记备忘。</strong><br><br><br> </div><a id="more"></a><h1 id="打开Chrome开发者工具"><a href="#打开Chrome开发者工具" class="headerlink" title="打开Chrome开发者工具"></a>打开Chrome开发者工具</h1><ol><li>打开最近关闭的状态：Ctrl+Shift+I(Windows) 或 Cmd+Opt+I(Mac)</li><li>快速查看DOM或样式：Ctrl+Shift+C(Windows) 或 Command+Option+C(Mac)</li><li>快速进入Console查看log运行JavaScript:Ctrl+Shift+J(Windows) 或 Command+Option+J(Mac)</li><li>F12打开</li></ol><h1 id="在Console中访问节点"><a href="#在Console中访问节点" class="headerlink" title="在Console中访问节点"></a>在Console中访问节点</h1><ul><li>使用<code>document.querySelectAll</code>访问</li><li>使用<code>$0</code>快速访问选中的元素</li><li>拷贝 -&gt; JS Path</li></ul><p>在Elements页面按ESC键可以同时打开Console面板。</p><h1 id="DOM中断点调试"><a href="#DOM中断点调试" class="headerlink" title="DOM中断点调试"></a>DOM中断点调试</h1><ul><li>属性修改时打断点：break on -&gt; attribute modifications</li><li>节点删除时打断点：break on -&gt; node removal</li><li>子树修改时打断点：break on -&gt; subtree modifications</li></ul><h1 id="断点调试JS"><a href="#断点调试JS" class="headerlink" title="断点调试JS"></a>断点调试JS</h1><ul><li>console.log()</li><li>alert()</li><li>debugger</li><li>事件断点</li><li>鼠标选中</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;left&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=4249806454,3340336260&amp;fm=26&amp;gp=0.jpg&quot; width=&quot;300&quot; height=&quot;180&quot; style=&quot;float:right;&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;　　&lt;strong&gt;笔记备忘。&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt; &lt;/div&gt;
    
    </summary>
    
      <category term="软件开发" scheme="https://hubojing.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Web" scheme="https://hubojing.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>初涉Maven</title>
    <link href="https://hubojing.github.io/2019/08/10/%E5%88%9D%E6%B6%89Maven/"/>
    <id>https://hubojing.github.io/2019/08/10/初涉Maven/</id>
    <published>2019-08-10T08:26:08.000Z</published>
    <updated>2019-08-10T08:26:08.000Z</updated>
    
    <content type="html"><![CDATA[<div align="left"><br><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1566053618&di=1c2188a5925b739efac2428e79001e35&imgtype=jpg&er=1&src=http%3A%2F%2Fi1.wp.com%2Fdevops.com%2Fwp-content%2Fuploads%2F2015%2F11%2FMaven_logo.svg_.png" width="300" height="180" style="float:right;"><br><br><br>　　<strong>笔记。</strong><br><br><br> </div><a id="more"></a><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>官网下载安装包，解压。</p><p>bin目录包含mvn的运行脚本<br>boot目录包含一个类加载器的框架<br>conf是配置文件目录</p><p>配置环境变量<code>M2_HOME</code><br>变量值：<code>E:\maven\apache-maven-3.6.1</code></p><p>Path中添加<code>%M2_HOME%\bin</code></p><p>cmd输入<code>mvn -v</code></p><p>输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Maven home: E:\maven\apache-maven-3.6.1\bin\..</span><br><span class="line">Java version: 1.8.0_201, vendor: Oracle Corporation, runtime: E:\JDK\jre</span><br><span class="line">Default locale: zh_CN, platform encoding: GBK</span><br><span class="line">OS name: &quot;windows 10&quot;, version: &quot;10.0&quot;, arch: &quot;amd64&quot;, family: &quot;windows&quot;</span><br></pre></td></tr></table></figure></p><p>即安装成功。</p><h1 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">src</span><br><span class="line">    -main</span><br><span class="line">        -java</span><br><span class="line">            -package</span><br><span class="line">    -test</span><br><span class="line">        -java</span><br><span class="line">            -package</span><br><span class="line">    resources</span><br></pre></td></tr></table></figure><p>新建结构E:\maven\code\maven01\src\main\java\com\jinger\maven01\model<br>在这里新建HelloWorld.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jinger.maven01.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Hello World!"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>新建结构E:\maven\code\maven01\src\test\java\com\jinger\maven01\model<br>在这里新建HelloWorldTest.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jinger.maven01.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.*;</span><br><span class="line"><span class="keyword">import</span> org.junit.Assert.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldTest</span></span>&#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">Assert.assertEquals(<span class="string">"Hello World!"</span>,<span class="keyword">new</span> HelloWorld().sayHello());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在E:\maven\code\maven01新建pom.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.jinger.maven01<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven01-model<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>groupId的值是项目包名<br>artifactId的值是模块名</p><p>cmd里<code>mvn compile</code>编译，第一次安装会自动下载相关依赖。</p><p><code>mvn test</code>测试，显示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">-------------------------------------------------------</span><br><span class="line"> T E S T S</span><br><span class="line">-------------------------------------------------------</span><br><span class="line">Running com.jinger.maven01.model.HelloWorldTest</span><br><span class="line">Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.039 sec</span><br><span class="line"></span><br><span class="line">Results :</span><br><span class="line"></span><br><span class="line">Tests run: 1, Failures: 0, Errors: 0, Skipped: 0</span><br><span class="line"></span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] BUILD SUCCESS</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Total time:  2.068 s</span><br><span class="line">[INFO] Finished at: 2019-07-28T17:26:39+08:00</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br></pre></td></tr></table></figure></p><p>跟目录下生成了target文件夹</p><p><code>mvn package</code>打包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[INFO] Building jar: E:\maven\code\maven01\target\maven01-model-0.0.1SNAPSHOT.jar</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] BUILD SUCCESS</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Total time:  01:46 min</span><br><span class="line">[INFO] Finished at: 2019-07-28T17:29:43+08:00</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>生成了jar包。</p><h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><p>mvn -v 查看maven版本<br>    compile 编译<br>    test 测试<br>    package 打包</p><pre><code>clean 删除targetinstall 安装jar包到本地仓库中</code></pre><p>新建结构E:\maven\code\maven02\src\main\java\com\jinger\maven02\util<br>在这里新建Speak.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jinger.maven02.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.jinger.maven01.model.HelloWorld;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Speak</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">sayHi</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> HelloWorld().sayHello();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>新建结构E:\maven\code\maven02\src\test\java\com\jinger\maven02\util<br>在这里新建SpeakTest.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jinger.maven02.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.*;</span><br><span class="line"><span class="keyword">import</span> org.junit.Assert.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpeakTest</span></span>&#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">Assert.assertEquals(<span class="string">"Hello World!"</span>,<span class="keyword">new</span> Speak().sayHi());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>mvn compile</code>编译</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">错误：[ERROR] /E:/maven/code/maven02/src/main/java/com/jinger/maven02/util/Speak.java:[3,32] 程序包com.jinger.maven01.model不存在</span><br></pre></td></tr></table></figure><p>进入maven01文件夹执行<code>mvn install</code>发送到本地仓库中<br>在pow.xml加入依赖项<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.jinger.maven01<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven01-model<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>完整pom.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.jinger.maven02<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven02-model02<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.jinger.maven01<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven01-model<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="自动创建目录骨架"><a href="#自动创建目录骨架" class="headerlink" title="自动创建目录骨架"></a>自动创建目录骨架</h1><p>archetype插件<br>创建目录的两种方式：</p><ol><li><code>mvn archetype:generate</code><br>选1389  Choose org.apache.maven.archetypes:maven-archetype-quickstart version 再选最新版</li></ol><p>Confirm properties configuration:<br>groupId: com.jinger.maven03<br>artifactId: maven03-service<br>version: 1.0.0SNAPSHOT<br>package: com.jinger.maven03.service</p><ol start="2"><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mvn archetype:generate -DgroupId=组织名, 公司网址的反写+项目名</span><br><span class="line">-DartifactId=项目名-模块名</span><br><span class="line">-Dversion=版本号</span><br><span class="line">-Dpackage=代码所存在的包名</span><br></pre></td></tr></table></figure></li></ol><h1 id="坐标和仓库"><a href="#坐标和仓库" class="headerlink" title="坐标和仓库"></a>坐标和仓库</h1><p>构件通过坐标作为其唯一标识</p><p>修改镜像仓库位置：<br>E:\maven\apache-maven-3.6.1\conf<br>打开settings.xml<br>146行增加<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven.net.cn<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>central mirror in China<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.net.cn/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这个源好像不太行，换成阿里云的可以<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span> *</span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>修改默认本地仓库位置<br>49行增加<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>E:/maven/repo<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>将该settings.xml复制到repo文件夹下。</p><h1 id="在Eclipse中的使用"><a href="#在Eclipse中的使用" class="headerlink" title="在Eclipse中的使用"></a>在Eclipse中的使用</h1><p>新版Eclipse自带Maven插件。<br>新建New-Other-Maven Project，选择quickstart模板。<br>Group Id:com.jinger.hi<br>Artifact Id:hi</p><p>建成后，对pom.xml右键，Run As-2 Maven build …<br>在Goals中填入compile</p><p>再在Goals中填入package<br>jar包构建成功</p><h1 id="Maven生命周期和插件"><a href="#Maven生命周期和插件" class="headerlink" title="Maven生命周期和插件"></a>Maven生命周期和插件</h1><p>完整的项目构建过程包括：<br>清理、编译、测试、打包、集成测试、验证、部署</p><p>maven生命周期：<br>clean 清理项目<br>default 构建项目<br>site 生成项目站点</p><h2 id="clean清理项目"><a href="#clean清理项目" class="headerlink" title="clean清理项目"></a>clean清理项目</h2><p>pre-clean 执行清理前的工作<br>clean 清理上一次构建生成的所有文件<br>post-clean 执行清理后的文件</p><h2 id="default-构建项目（最核心）"><a href="#default-构建项目（最核心）" class="headerlink" title="default 构建项目（最核心）"></a>default 构建项目（最核心）</h2><p>compile test package install</p><h2 id="site-生成项目站点"><a href="#site-生成项目站点" class="headerlink" title="site 生成项目站点"></a>site 生成项目站点</h2><p>pre-site 在生成项目站点前要完成的工作<br>site 生成项目的站点文档<br>post-site 在生成项目站点后要完成的工作<br>site-deploy 发布生成的站点到服务器上</p><p>举例<br>在pom.xml新增<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-source-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar-no-fork<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>run as - maven build …<br><code>clean package</code></p><h1 id="pom-xml常用元素"><a href="#pom-xml常用元素" class="headerlink" title="pom.xml常用元素"></a>pom.xml常用元素</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">pom.xml：maven项目的核心管理文件，用于项目描述、组织管理、依赖管理、构建信息的管理，Pom中包含了许多的标签。</span><br><span class="line">Pom.xml的常用元素：</span><br><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span>是pom.xml的根元素，包含了pom的一些约束信息。</span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>是一个固定的版本，也是必须的元素，指定了当前pom的版本。</span><br><span class="line">坐标的信息由以下标签组成：</span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>主项目标识，公司网址+项目名组成<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">注意：maven的项目和实际的项目不是一一对应关系，maven项目体现的是模块化的概念，因此一个实际项目往往会划分成很多的模块。</span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>一个模块的标识，项目名+模块名进行标识<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>第一个0标识大版本号，第二个0表示分支版本号，第三个0表示小版本号，一般形式可以写为0.0.1snapshot，snapshot快照、alpha内部测试、beta公测、Release稳定、GA版本正式发布<span class="tag">&lt;<span class="name">version</span>&gt;</span>。</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>maven项目打包的方式，默认打包是jar，、其他类型war、zip、pom等<span class="tag">&lt;<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">其他标签：</span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>项目的描述名，一般是在产生对象文档时候才会使用<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>项目的地址<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>项目的描述<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">developers</span>&gt;</span>开发人员的列表<span class="tag">&lt;/<span class="name">developers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">licenses</span>&gt;</span>许可证的信息，比如经常用到的开源框架，它都会有一些许可证的信息<span class="tag">&lt;/<span class="name">licenses</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">organization</span>&gt;</span>组织信息<span class="tag">&lt;/<span class="name">organization</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span>依赖列表</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    依赖项(可以包含多个)</span><br><span class="line">    依赖项用坐标确定依赖的位置</span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>类型<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>依赖的范围（比如上面写的junit的测试范围是test，只在测试的依赖范围内有用，在主代码中引用junit这个类，它就会报错）<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>设置依赖是否可选(默认是false，子项目默认是false时，子项目默认是继承的，如果为true，子项目必须显示的引入该依赖)<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                排除依赖的传递列表(可以排除多个依赖，比如Ajar包依赖Bjar包，Bjar包又依赖Cjar包，C对于A来说就是传递依赖，如果A不想依赖C，就使用该标签)</span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span><span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagementy</span>&gt;</span>依赖的管理<span class="tag">&lt;/<span class="name">dependencyManagementy</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span>依赖的管理,也可以通过<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span>声明依赖列表,通过<span class="tag">&lt;<span class="name">dependency</span>&gt;</span>包含多个依赖，但是它并不会被运行，也就是说它不会被引入到实际的依赖当中，该标签一般主要用于定义在父模块中，供子模块继承用的。比如之前多个maven项目中，都使用到junit，我们就可以抽象出一个父类的模块，然后在父类模块中对junit进行一个定义，其他子模块直接继承该父模块即可。</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    插件列表</span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span>用于子模块对父模块的pom的继承<span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span>指定多个模块一起编译<span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="scope"><a href="#scope" class="headerlink" title="scope"></a>scope</h3><p>三种classpath：</p><ol><li>编译</li><li>测试</li><li>运行</li></ol><p>compile:默认的范围，编译测试运行都有效<br>provided:在编译和测试时有效<br>runtime:在测试和运行时有效<br>test:只在测试时有效<br>system:与本机系统相关联，可移植性差<br>import:导入的范围，它只使用在dependencyManagement中，表示从其它的pom中导入dependency的配置</p><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><p>依赖的传递：<br>多个项目依次依赖，A&lt;-B&lt;-C，后面的引入前面的项目坐标<br>要把前面的项目编译、打包、安装后，后面的项目才能运行build</p><p>短路冲突：<br>1、短路优先<br>A-&gt;B-&gt;C-&gt;X(jar)<br>A-&gt;D-&gt;X(jar)</p><p>先解析下面的</p><p>2、先声明优先<br>如果路径长度相同，则谁先声明，先解析谁</p><h1 id="聚合和继承"><a href="#聚合和继承" class="headerlink" title="聚合和继承"></a>聚合和继承</h1><ol><li><p>项目的继承<br>在父类项目中使用dependencyManagement对依赖进行管理，但是并不会使用依赖，子类需要使用parent标签，来引用父类中的依赖，一般可以将版本号在父类中进行声明，子类无需声明版本号，这样可以保证子类和父类版本号一致。</p></li><li><p>项目的聚合<br>   将packaging打包方式改为pom，使用modules标签，引入其他项目</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>../A<span class="tag">&lt;/<span class="name">module</span>&gt;</span>       </span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>../B<span class="tag">&lt;/<span class="name">module</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>../C<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="构建web项目"><a href="#构建web项目" class="headerlink" title="构建web项目"></a>构建web项目</h1><p>新建项目，模板选择webapp。<br>GroupId: com.jinger.webdemo<br>Artifact Id:webdemo</p><p>建成后，在Navigator中新建<code>src/main/java</code>和<code>src/test/java`</code>src/test/resources`文件夹</p><p>在Project Explorer中对项目右键<code>Build Path</code>-<code>Configure Build Path</code>-<code>Source</code>，确保Output folder是webdemo/target/classes</p><p>项目属性-Project Facets<br>（没有这一项请下载输入<a href="http://download.eclipse.org/releases/oxygen" target="_blank" rel="noopener">http://download.eclipse.org/releases/oxygen</a> ，选择Web, XML, Java EE and OSGi Enterprise Development 安装即可。）<br>勾选Dynamic Web Module<br>最终发布产品时不需要测试代码，项目属性-Deployment Assemnly，remove相关测试文件。</p><p>在pom.xml的<build>下添加<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mortbay.jetty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jetty-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.1.16.v20140903<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure></build></p><p>run as build <code>jetty:run</code><br>浏览器输入<a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a><br>显示Hello World!</p><p>在打包成功后使用jetty:run来运行jetty服务</p><p><version>标签下<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">goal</span>&gt;</span>run<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br></pre></td></tr></table></figure></version></p><p>run as build <code>clean package</code><br>浏览器输入<a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a><br>显示Hello World!</p><p>使用tomcat同理。</p>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;left&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1566053618&amp;di=1c2188a5925b739efac2428e79001e35&amp;imgtype=jpg&amp;er=1&amp;src=http%3A%2F%2Fi1.wp.com%2Fdevops.com%2Fwp-content%2Fuploads%2F2015%2F11%2FMaven_logo.svg_.png&quot; width=&quot;300&quot; height=&quot;180&quot; style=&quot;float:right;&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;　　&lt;strong&gt;笔记。&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt; &lt;/div&gt;
    
    </summary>
    
      <category term="软件开发" scheme="https://hubojing.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Java" scheme="https://hubojing.github.io/tags/Java/"/>
    
      <category term="Maven" scheme="https://hubojing.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>测手速软件APMShow开发——佟年送给韩商言的礼物</title>
    <link href="https://hubojing.github.io/2019/07/22/%E6%B5%8B%E6%89%8B%E9%80%9F%E8%BD%AF%E4%BB%B6APMShow%E5%BC%80%E5%8F%91%E2%80%94%E2%80%94%E4%BD%9F%E5%B9%B4%E9%80%81%E7%BB%99%E9%9F%A9%E5%95%86%E8%A8%80%E7%9A%84%E7%A4%BC%E7%89%A9/"/>
    <id>https://hubojing.github.io/2019/07/22/测手速软件APMShow开发——佟年送给韩商言的礼物/</id>
    <published>2019-07-22T06:26:45.000Z</published>
    <updated>2019-07-22T13:17:26.000Z</updated>
    
    <content type="html"><![CDATA[<div align="left"><br><img src="http://img3.duitang.com/uploads/item/201608/08/20160808121716_RfcQj.jpeg" width="300" height="180" style="float:right;"><br><br>　　<strong>Electron开发</strong><br>　　<strong>追剧写代码啧啧啧</strong><br>　　<br><br> </div><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>　　最近看了一部剧，可以说是很甜了……<br>　　<del>傻白甜</del>女主角佟年99年计算机专业研二（ε=(´ο｀*)))唉，其实人家肤白貌美智商高碾压众人让人悲伤<br>　　（ACM亚军呜呜呜呜呜…）<br>　　还可爱！</p><p>　　男主韩商言本来设定是顶级电竞选手，后来改成了CTF比赛顶级选手。虽然改的很生硬，但也算是成功科普了CTF。（还是得吐槽，打CTF的人怎么可能不知道计算机专业的东西……）</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1565458984773&di=52ad109e973a29ddebc894ca91bcb49f&imgtype=0&src=http%3A%2F%2Fpic1.win4000.com%2Fpic%2Fc%2F0a%2F157d3f7b7a_250_350.jpg" alt="二次元韩商言" title="">                </div>                <div class="image-caption">二次元韩商言</div>            </figure><blockquote><p>CTF(Capture The Flag)，夺旗赛。CTF是一种流行的信息安全竞赛形式，其英文名可直译为“夺得Flag”，也可意译为“夺旗赛”。其大致流程是，参赛团队之间通过进行攻防对抗、程序分析等形式，率先从主办方给出的比赛环境中得到一串具有一定格式的字符串或其他内容，并将其提交给主办方，从而夺得分数。为了方便称呼，我们把这样的内容称之为“Flag”。</p></blockquote><p>　　这是多么酷炫的比赛啊。剧里所有的家长们却都嫌弃男主不务正业天天玩电脑？？？</p><p>　　写的一手好代码的佟年，送给Gun神的第一件礼物竟然是——<br>　　熬夜写了一个晚上的测手速的软件……<br>　　？<br>　　散发着工科硬核味道的礼物还真是<del>可爱</del>一言难尽哦</p><p>　　不禁使我想起了本科毕业时，本来我也为朋友们准备了毕业礼物的。当时兴致勃勃打算给朋友们每人写一个app……<br>　　然而由于时间都在工作上，<del>加上当时开发速度太慢了，</del>后来拖久了感觉失去了毕业礼物的时效性，就不了了之了……</p><p>　　那么，我要说的是什么<br>　　……<br>　　我要说，这个测手速的软件呢，佟年提到的时候我觉得应该挺简单的，所以我也做了一个，顺便把kk俱乐部里原来那种听音测试也加了进去，娱乐一下哈哈哈哈</p><h1 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h1><p>　　框架：Electron</p><p>　　语言：Html、CSS、JS</p><h1 id="Electron开发"><a href="#Electron开发" class="headerlink" title="Electron开发"></a>Electron开发</h1><h2 id="安装与配置"><a href="#安装与配置" class="headerlink" title="安装与配置"></a>安装与配置</h2><p>　　新建app文件夹。<br>　　初始化<code>npm init</code><br>　　安装Electron<code>npm install electron --save-dev</code></p><h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><p>　　Electron安好了<br>　　再就HTML CSS JS慢慢写呗</p><h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><p><code>npm install electron-packager -g</code></p><p>　　package.json添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;package&quot;: &quot;electron-packager . APMShow --platform=win32 --arch=x64 --out=./out --asar --app-version=0.0.1 --electron-version=5.0.7 --overwrite --ignore=node_modules&quot;</span><br></pre></td></tr></table></figure></p><p>　　执行<code>npm run package</code>打包。</p><h2 id="Electron小笔记"><a href="#Electron小笔记" class="headerlink" title="Electron小笔记"></a>Electron小笔记</h2><h3 id="开启调试工具"><a href="#开启调试工具" class="headerlink" title="开启调试工具"></a>开启调试工具</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">win.webContents.openDevTools()</span><br></pre></td></tr></table></figure><h3 id="锁定窗口大小"><a href="#锁定窗口大小" class="headerlink" title="锁定窗口大小"></a>锁定窗口大小</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">win = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">       width: <span class="number">650</span>,</span><br><span class="line">       height: <span class="number">990</span>,</span><br><span class="line">       resizable: <span class="literal">false</span>,</span><br><span class="line">       webPreferences: &#123;</span><br><span class="line">           nodeIntegration: <span class="literal">true</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure><p>　　<code>resizable: false</code>是重点。</p><h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/测手速软件APMShow开发——APP首页.png?raw=true" alt="首页" title="">                </div>                <div class="image-caption">首页</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/测手速软件APMShow开发——限时测速.png?raw=true" alt="限时测速" title="">                </div>                <div class="image-caption">限时测速</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/测手速软件APMShow开发——倒计时.png?raw=true" alt="倒计时" title="">                </div>                <div class="image-caption">倒计时</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/测手速软件APMShow开发——听音测速.png?raw=true" alt="听音测速" title="">                </div>                <div class="image-caption">听音测速</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/测手速软件APMShow开发——色变测速.png?raw=true" alt="色变测速" title="">                </div>                <div class="image-caption">色变测速</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/hubojing/BlogImages/blob/master/测手速软件APMShow开发——结果.png?raw=true" alt="成绩" title="">                </div>                <div class="image-caption">成绩</div>            </figure><p>　　再加个排行榜？</p><h1 id="软件下载"><a href="#软件下载" class="headerlink" title="软件下载"></a>软件下载</h1><p>　　点开文件夹里的exe程序直接运行即可。（也许哪天想给它加个安装程序也未可知…）<br>　　链接：<a href="https://pan.baidu.com/s/1MfuyH7QAHjZT311888t4Og" target="_blank" rel="noopener">https://pan.baidu.com/s/1MfuyH7QAHjZT311888t4Og</a><br>　　提取码：vbz9 </p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>　　<a href="https://github.com/hubojing/APMShow" target="_blank" rel="noopener">https://github.com/hubojing/APMShow</a></p><h1 id="后语"><a href="#后语" class="headerlink" title="后语"></a>后语</h1><p>　　纯属娱乐~~</p><p>　　听说最近韩商言要分手，要不佟年看看可怜的吴白吧……<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://wx1.sinaimg.cn/bmiddle/b54296afgy1g56ksrs7szj20u00u0agy.jpg" alt="表情包" title="">                </div>                <div class="image-caption">表情包</div>            </figure></p>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;left&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://img3.duitang.com/uploads/item/201608/08/20160808121716_RfcQj.jpeg&quot; width=&quot;300&quot; height=&quot;180&quot; style=&quot;float:right;&quot;&gt;&lt;br&gt;&lt;br&gt;　　&lt;strong&gt;Electron开发&lt;/strong&gt;&lt;br&gt;　　&lt;strong&gt;追剧写代码啧啧啧&lt;/strong&gt;&lt;br&gt;　　&lt;br&gt;&lt;br&gt; &lt;/div&gt;
    
    </summary>
    
      <category term="软件开发" scheme="https://hubojing.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Electron" scheme="https://hubojing.github.io/tags/Electron/"/>
    
  </entry>
  
  <entry>
    <title>推荐那些事儿</title>
    <link href="https://hubojing.github.io/2019/07/17/LBSN/"/>
    <id>https://hubojing.github.io/2019/07/17/LBSN/</id>
    <published>2019-07-17T06:35:46.000Z</published>
    <updated>2019-12-27T13:34:20.023Z</updated>
    
    <content type="html"><![CDATA[<div align="left"><br><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1565459219422&di=24d422892e8989d6bd18a2a93aae8230&imgtype=0&src=http%3A%2F%2Fpic.51yuansu.com%2Fpic3%2Fcover%2F03%2F05%2F94%2F5b2c9f2655ac0_610.jpg" width="300" height="180" style="float:right;"><br><br><br>　　<strong>记得比较乱，自用。</strong><br><br><br> </div><a id="more"></a><h1 id="POI推荐——2019-11-10"><a href="#POI推荐——2019-11-10" class="headerlink" title="POI推荐——2019.11.10"></a>POI推荐——2019.11.10</h1><p>兴趣点预测是预测用户将要访问的兴趣点(其中包含已经访问过的兴趣点) ，兴趣点推荐是将用户没有访问过的兴趣点推荐给用户。<br>including next POI recommendation, timeaware POI recommendation and out-of-town POI recommendation.</p><p>Matrix Factorization (MF), Context Embedding (CE) and Pairwise Ranking (PR)<br>MF based methods such as GeoMF and RankGeoFM exhibit superior performance on POI recommendation. </p><p>根据check-in行为加入了社交因素（又可分为朋友、评论、图片）、地理因素（空间聚类现象而导致的地理影响、幂律分布、核密度估计）<br>朋友：社交关系中的朋友，位置上的朋友和邻居层面的朋友、用户信任关系<br>时序 位置变化的序列性</p><p>马尔科夫链(Markov chain)<br>个性化马尔科夫链(Factorizing Personalized Markov Chain, FPMC)<br>张量分解(Tensor Factorization, TF)<br>RNN(Recurrent Neural Networks<br>长短时记忆循环神经网络(Long-Short Memory recurrent neural networks, LSTM)<br>经典推荐算法：<br>概率矩阵分解模型（Probabilistic Matrix Factorization, PMF）<br>SoRec(Social Recommendation using probabilistic matrix factorization)<br>TrustMF(Social Collaborative Filtering by Trust)<br>TrustSVD(Social Collaborative Filtering by Trust with SVD)</p><p>PMF 利用用户对 POI 的历史评分数据；SoＲec 利用用户社交关系和兴趣点的历史评分数据；Trust MF、Trust SVD 利用用户信任关系和 POI 的历史评分数据。<br>POI-LSTM模型（[1]    王立, 张谧. 基于LSTM的POI个性化推荐框架[J]. 计算机系统应用, 2018,27(12):56-61.）<br>单纯的 LSTM 模型只能对用户的行为序列进行建模, 将用户访问过的地点信息输入<br>到网络中, 只能捕捉到用户的访问地点兴趣信息, 不加入用户的历史评论信息就不能精细描述用户的兴趣变化, 同时也不能接受用户好友关系对于用户选择的影<br>响.</p><p>狄利克雷分配(Latent<br>Dirichlet  Allocation，LDA)主题模型</p><h1 id="LBSN基于位置的社交网络——2019-07-21"><a href="#LBSN基于位置的社交网络——2019-07-21" class="headerlink" title="LBSN基于位置的社交网络——2019.07.21"></a>LBSN基于位置的社交网络——2019.07.21</h1><p>签到(check-in)：用户上传自身位置到社交网站的行为。<br>每一个签到的位置称为一个兴趣点POI(Point of Interest)。</p><p>对签到信息聚类，对用户历史轨迹进行机器学习，可预测用户未来的轨迹路线。<br>传统研究模型采用k-means或k-medoids聚类方法将数据划分为k个簇集，通过计算对象之间的相似度进行聚类。</p><p>传统在线社交网络(OSN, Online Social Network)。<br>LBS(Location Based Service),基于位置的服务。<br>LBSN(Location-based Social Network)，基于位置的社会网络。<br>对于不同的LBSN网络，不同的推荐系统使用了不同的推荐算法，常见的推荐算法包括：协同过滤算法、基于内容的推荐算法、基于位置的推荐算法等。</p><h1 id="协同过滤算法-collaborative-filtering-CF"><a href="#协同过滤算法-collaborative-filtering-CF" class="headerlink" title="协同过滤算法(collaborative filtering, CF)"></a>协同过滤算法(collaborative filtering, CF)</h1><h2 id="基于Memory-based-基于记忆-基于Content-based基于内容-基于邻域"><a href="#基于Memory-based-基于记忆-基于Content-based基于内容-基于邻域" class="headerlink" title="基于Memory-based(基于记忆)/基于Content-based基于内容/基于邻域"></a>基于Memory-based(基于记忆)/基于Content-based基于内容/基于邻域</h2><p>又可分为Item-based推荐算法和User-based推荐算法，计算用户和用户之间的相似度(User-based)，商品和商品之间的相似度(Item-based)<br>Item-based推荐算法</p><ul><li>输入item-user矩阵</li><li>求item-item相似度 （不同相似度度量：person系数、曼哈顿距离、余弦值、欧几里得距离）</li><li>根据相似度求评分</li></ul><p>User-based推荐算法</p><ul><li>输入item-user矩阵</li><li>求user-user相似度（不同相似度度量：person系数、曼哈顿距离、余弦值、欧几里得距离）</li><li>根据相似度求评分</li></ul><h2 id="基于Model-based-基于模型"><a href="#基于Model-based-基于模型" class="headerlink" title="基于Model-based(基于模型)"></a>基于Model-based(基于模型)</h2><p>分解模型算法：如奇异值分解(Singular Value Decomposition)模型算法<br>基于矩阵分解的协同过滤算法（简称矩阵分解推荐方法）<br>矩阵分解(Matrix Factorization, MF)算法：它将用户–兴趣点矩阵分解成两个或者多个低维矩阵的乘积实现维数的规约,  用低维空间数据研究高维数据的性质,主要包括正则矩阵分解、非负矩阵分解和概率矩阵分解等方法。<br>该方法仅仅利用评分信息，将用户对物品的评分信息用矩阵的形式进行表示; 然后将评分矩阵分解为低维的用户特征矩阵和物品特征矩阵，利用用户与物品的向量内积来表示用户对物品的喜好程度，进而构建出基于矩阵分解的推荐方法。然而，由于评分矩阵的高稀疏和不均匀分布等特点，导致仅仅利用评分信息进行推荐带来的推荐性能低、冷启动等问题。</p><p>基于图模型的推荐算法：如贝叶斯网络(Bayesian Network)模型推荐算法<br>决策树(Decision Tree)模型推荐算法<br>图聚类(Graph Clustering)模型推荐算法</p><p>CF面临的问题：数据稀疏</p><h3 id="基于关联规则的推荐算法"><a href="#基于关联规则的推荐算法" class="headerlink" title="基于关联规则的推荐算法"></a>基于关联规则的推荐算法</h3><ol><li>Apriori算法</li><li>FPGrowth算法</li></ol><h3 id="聚类"><a href="#聚类" class="headerlink" title="聚类"></a>聚类</h3><p>K-Means等</p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ol><li>贝叶斯分类器</li><li>逻辑回归</li><li>KNN</li></ol><h3 id="回归"><a href="#回归" class="headerlink" title="回归"></a>回归</h3><h3 id="隐语义"><a href="#隐语义" class="headerlink" title="隐语义"></a>隐语义</h3><p>SVD<br>SVD++<br>TrustSVD(加入社会化信任机制)</p><h2 id="神经网络"><a href="#神经网络" class="headerlink" title="神经网络"></a>神经网络</h2><h2 id="基于混合的推荐算法"><a href="#基于混合的推荐算法" class="headerlink" title="基于混合的推荐算法"></a>基于混合的推荐算法</h2><p>常用混合思路：加权、特征组合、层叠、变换等</p><h1 id="基于位置的推荐算法"><a href="#基于位置的推荐算法" class="headerlink" title="基于位置的推荐算法"></a>基于位置的推荐算法</h1><h1 id="LBSN用户行为预测"><a href="#LBSN用户行为预测" class="headerlink" title="LBSN用户行为预测"></a>LBSN用户行为预测</h1><h2 id="基于用户个人的数据"><a href="#基于用户个人的数据" class="headerlink" title="基于用户个人的数据"></a>基于用户个人的数据</h2><p>只关注用户的历史移动轨迹来预测用户下一个位置。</p><h2 id="基于所有用户产生的数据"><a href="#基于所有用户产生的数据" class="headerlink" title="基于所有用户产生的数据"></a>基于所有用户产生的数据</h2><p>采用概率分布模型的方法预测下一个位置。</p><h2 id="基于前两种数据的结合"><a href="#基于前两种数据的结合" class="headerlink" title="基于前两种数据的结合"></a>基于前两种数据的结合</h2><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>罗维佳.基于LBSN的个性化推荐技术研究 2016</p>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;left&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1565459219422&amp;di=24d422892e8989d6bd18a2a93aae8230&amp;imgtype=0&amp;src=http%3A%2F%2Fpic.51yuansu.com%2Fpic3%2Fcover%2F03%2F05%2F94%2F5b2c9f2655ac0_610.jpg&quot; width=&quot;300&quot; height=&quot;180&quot; style=&quot;float:right;&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;　　&lt;strong&gt;记得比较乱，自用。&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt; &lt;/div&gt;
    
    </summary>
    
      <category term="数据挖掘" scheme="https://hubojing.github.io/categories/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/"/>
    
    
      <category term="LBSN" scheme="https://hubojing.github.io/tags/LBSN/"/>
    
      <category term="POI" scheme="https://hubojing.github.io/tags/POI/"/>
    
      <category term="推荐系统" scheme="https://hubojing.github.io/tags/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>微言笔记</title>
    <link href="https://hubojing.github.io/2019/07/14/%E5%BE%AE%E8%A8%80%E7%AC%94%E8%AE%B0/"/>
    <id>https://hubojing.github.io/2019/07/14/微言笔记/</id>
    <published>2019-07-14T04:11:34.000Z</published>
    <updated>2019-07-14T04:19:04.000Z</updated>
    
    <content type="html"><![CDATA[<div align="left"><br><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1563088003944&di=a15683d50ab076b5b7d9383c24ce7d80&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201710%2F11%2F20171011122118_mavCw.jpeg" width="300" height="180" style="float:right;"><br><br><br>　　<strong>来自微言板块（自言自语）的临时笔记汇总。</strong><br><br><br> </div><a id="more"></a><p>程序员是软件食物链的最后一环。架构师吃掉需求，设计师吃掉架构，而程序员则消化设计。</p><p>问题定义-&gt;需求-&gt;架构-&gt;构建-&gt;系统测试-&gt;将来的改进</p><p>一个程序中的设计层次：软件系统-&gt;分解为子系统和包-&gt;分解为包中的类-&gt;分解为类中的数据和子程序-&gt;子程序内部</p><p>问题“这个类需要隐藏些什么？”正切中了接口设计的核心。要养成“我该隐藏些什么？”的习惯。</p><p>好的抽象：类的接口应该展现一致的抽象层次；要理解类所实现的抽象是什么；提供成对的服务；把不相关的信息转移到其他类中；尽可能让接口可编程，而不是表达语义；谨防在修改时破坏接口的抽象；不要添加与接口抽象不一致的公用成员；同时考虑抽象性和内聚性。</p><p>好的封装：尽可能地限制类和成员的可访问性；不要公开暴露成员数据；避免把私用的实现细节放入类的接口中；不要对类的使用者做出任何假设；避免使用友元类；不要因为一个子程序里仅使用公用子程序，就把它归入公开接口；让阅读代码比编写代码更方便；要警惕从语义上破坏封装性；留意过于紧密的耦合关系。</p><p>封装：把数据声明为private，不允许外界随意存取，只能通过特定的接口来操作。继承：成员函数有一个隐藏参数，名为this指针。虚函数与多态：如果预期派生类有可能重新定义某一个成员函数，就在基类中把比函数设为virtual。纯虚函数不需定义其实际操作，它的存在只是为了在派生类中被重新定义（在函数声明之后加上“＝0”即可）。虚函数派生下去仍为虚函数，而且可以省略virtual关键词。</p><p>static成员变量不属于对象的一部分，而是类的的一部分，所以程序可以在还没有诞生任何对象时处理这种成员变量，但首先必须初始化它。不要把static成员变量的初始化操作安排在类的构造函数中，因为构造函数可能一再被调用，而变量的初值却只应设定一次。也不要把初始化操作安排在头文件中，因为它可能会被载入许多地方，因此也就可能被执行许多次。应该在应用程序文件中，类以外的任何位置设定其初值。例如在main之中，或全局函数中，或任何函数之外。</p><p>所谓”Unwinding”：C++按顺序析构，但若发生异常情况(exception)，且程序设计了异常情况处理程序(exception handling)，控制权就会“直接跳”到你所设定的处理程序去。此时堆栈中的C++对象有没有机会被析构，要视编译器而定。若编译器支持unwinding功能，则会在异常情况发生时，将堆栈中的所有对象都析构掉。</p><p>C指针：<br>在C语言里，只有当你在赋值语句的参数前面加了星号（*），才能把该参数从子程序中传回去。<br>在内存分配中使用sizeof()确定变量的大小。由于sizeof()是在编译期间计算的，因此不会带来性能上的损失。</p><p><em>p  p是指针，</em>p是对象</p><p>在Java中，a==b判断的是a和b是否引用了同一个对象，而a.equals(b)判断的是这两个对象是否具有相同的值。一般来说，Java应用程序里应该使用像a.equals(b)这样的表达式，而不要用a==b。</p><p>如果一个错误无法重现，这通常会是一个初始化错误，或者是一个同时间有关的问题，或者是悬空指针(dangling-pointer)问题。如果某个求和结果时对时错，很有可能是参与计算的某个变量未能正确地初始化——可能正好在大多数情况它是从0开始。如果这个问题诡异且变幻莫测，并且又在使用指针，那么几乎可以肯定是代码中有未初始化的指针，或者用了所指向的内存区域已经被释放的指针。</p><p>windows文件结束符Ctrl+Z，UNIX（包括Mac OS X）是Ctrl+D。</p><p>“编辑-编译-调试”（edit-compile-debug）周期</p><p>计算机以比特序列存储数据，每个比特非0即1。大多数计算机以2的整数次幂个比特作为块来处理内存，可寻址的最小内存块称为“字节（byte）”，存储的基本单元称为“字（word）”，它通常由几个字节组成。在C++中，一个字节要至少能容纳机器基本字符集中的字符。大多数机器的字节由8比特构成，字则由32或64比特构成，也就是4或8字节。大多数计算机将内存中的每个字节与一个数字（被称为“地址（address）”）关联起来。</p><p>当我们赋给无符号类型一个超出它表示范围的值时，结果是初始值对无符号类型表示数值总数取模后的余数。例如，8比特大小的unsigned char可以表示0至255区间内的值，如果赋了一个区间以外的值，则实际的结果是该值对256取模后所得的余数。因此，把-1赋给8比特大小的unsigned char所得的结果是255。<br>当我们赋给带符号类型一个超出它表示范围的值时，结果是未定义的（undefined）。此时，程序可能继续工作、可能崩溃，也可能生成垃圾数据。</p><p>如果想声明一个变量而非定义它，就在变量名前添加关键字extern，而且不要显式地初始化变量。<br>C++是一种静态类型（statically typed）语言，其含义是在编译阶段检查类型。</p><p>int i=42;<br>int ＆r＝i;//＆紧随类型名出现，因此是声明的一部分，r是一个引用<br>int <em>p;//</em>紧随类型名出现，因此是声明的一部分，p是一个指针<br>p＝＆i;//＆出现在表达式中，是一个取地址符<br><em>p＝i;//</em>出现在表达式中，是一个解引用符<br>int ＆r2＝<em>p;//＆是声明的一部分，</em>是一个解引用符<br>在声明语句中，＆和*用于组成复合类型；在表达式中，它们的角色又转变成运算符。</p><p>int <em>p1＝nullptr;//等价于int </em>p1＝0;<br>在新标准下，现在的C++程序最好使用nullptr，同时尽量避免使用NULL。</p><p>指向指针的引用<br>引用本身不是一个对象，因此不能定义指向引用的指针。但指针是对象，所以存在对指针的引用:<br>int i＝42;<br>int <em>p;//p是一个int型指针<br>int </em>＆r=p;//r是一个对指针p的引用<br>r=＆i;//r引用了一个指针，因此给r赋值＆i就是令p指向i<br>*r=0;//解引用r得到i，也就是p指向的对象，将i的值改为0</p><p>如果想在多个文件之间共享const对象，必须在变量的定义之前添加extern关键字。</p><p>select SalesPersonID,OrderDate,Max(TotalDue) as MaximumTotalSales<br>from [Sales].[SalesOrderHeader]<br>where SalesPersonID is not null and OrderDate &gt;=’2007/1/1’<br>group by SalesPersonID,OrderDate<br>having Max(TotalDue)&gt;150000<br>order by OrderDate desc</p><p>“A computer program is said to learn from experience E with respect to some task T and some performance measure P, if its performance on T, as measured by P, improves with experience E.”</p><p>建议把较大的数组放在main函数外（局部变量放在堆栈段）。栈溢出不一定是递归调用太多，也可能是局部变量太大。只要总大小超过了允许的范围，就会产生栈溢出。</p><p>计算机图形学：结构特征数据–&gt;图像信号<br>计算机视觉：图像信号—&gt;结构特征数据<br>数字图像处理：图像信号—&gt;图像信号</p><p>JS中如何输出空格:<br>1.document.write(“  “+”1”+”    “+”23”);<br>2.document.write(“”+” 1 2 3 “+””);<br>“white-space:pre;”样式表示”空白会被浏览器保留”</p><p>JavaScript为HTML赋予行为，通过ECMAScript标准，利用BOM对象来操作浏览器窗口，浏览器导航对象，屏幕分辨率，浏览器历史，cookie等，利用DOM操作HTML（核心）。</p>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;left&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1563088003944&amp;di=a15683d50ab076b5b7d9383c24ce7d80&amp;imgtype=0&amp;src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201710%2F11%2F20171011122118_mavCw.jpeg&quot; width=&quot;300&quot; height=&quot;180&quot; style=&quot;float:right;&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;　　&lt;strong&gt;来自微言板块（自言自语）的临时笔记汇总。&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt; &lt;/div&gt;
    
    </summary>
    
      <category term="互联网" scheme="https://hubojing.github.io/categories/%E4%BA%92%E8%81%94%E7%BD%91/"/>
    
    
      <category term="笔记" scheme="https://hubojing.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>图</title>
    <link href="https://hubojing.github.io/2019/06/22/%E5%9B%BE/"/>
    <id>https://hubojing.github.io/2019/06/22/图/</id>
    <published>2019-06-22T07:12:35.000Z</published>
    <updated>2019-06-23T10:44:46.000Z</updated>
    
    <content type="html"><![CDATA[<div align="left"><br><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1550075379443&di=51f53328008b4821ce8f839ac9186c0c&imgtype=0&src=http%3A%2F%2Fhiphotos.baidu.com%2Fdoc%2Fpic%2Fitem%2Fb17eca8065380cd7e40f7c6ba844ad3459828127.jpg" width="300" height="180" style="float:right;"><br><br><br>　　<strong>图、 prim 和 kruskal</strong><br><br><br> </div><a id="more"></a><h1 id="数据结构笔记目录"><a href="#数据结构笔记目录" class="headerlink" title="数据结构笔记目录"></a>数据结构笔记目录</h1><p>栈 <a href="https://hubojing.github.io/2017/11/14/%E6%A0%88/">https://hubojing.github.io/2017/11/14/%E6%A0%88/</a><br>队列 <a href="https://hubojing.github.io/2017/11/12/%E9%98%9F%E5%88%97/">https://hubojing.github.io/2017/11/12/%E9%98%9F%E5%88%97/</a><br>线性表    <a href="https://hubojing.github.io/2019/06/12/%E7%BA%BF%E6%80%A7%E8%A1%A8/">https://hubojing.github.io/2019/06/12/%E7%BA%BF%E6%80%A7%E8%A1%A8/</a><br>树 <a href="https://hubojing.github.io/2017/07/23/%E6%A0%91/">https://hubojing.github.io/2017/07/23/%E6%A0%91/</a></p><h1 id="图的基本操作和遍历"><a href="#图的基本操作和遍历" class="headerlink" title="图的基本操作和遍历"></a>图的基本操作和遍历</h1><h2 id="Node-h"><a href="#Node-h" class="headerlink" title="Node.h"></a>Node.h</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> NODE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NODE_H</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Node(<span class="keyword">char</span> data = <span class="number">0</span>);</span><br><span class="line"><span class="keyword">char</span> m_cData;</span><br><span class="line"><span class="keyword">bool</span> m_bIsVisited;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="Node-cpp"><a href="#Node-cpp" class="headerlink" title="Node.cpp"></a>Node.cpp</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Node.h"</span></span></span><br><span class="line"></span><br><span class="line">Node::Node(<span class="keyword">char</span> data)</span><br><span class="line">&#123;</span><br><span class="line">m_cData = data;</span><br><span class="line">m_bIsVisited = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CMap-h"><a href="#CMap-h" class="headerlink" title="CMap.h"></a>CMap.h</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"Node.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CMap</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">CMap(<span class="keyword">int</span> capacity);</span><br><span class="line">~CMap();</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">addNode</span><span class="params">(Node *pNode)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resetNode</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">setValueToMatrixForDirectedGraph</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> col, <span class="keyword">int</span> val = <span class="number">1</span>)</span></span>;<span class="comment">//为有向图设置邻接矩阵</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">setValueToMatrixForUndirectedGraph</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> col, <span class="keyword">int</span> val = <span class="number">1</span>)</span></span>;<span class="comment">//为无向图设置邻接矩阵</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printMatrix</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">depthFirstTraverse</span><span class="params">(<span class="keyword">int</span> nodeIndex)</span></span>;<span class="comment">//深度优先遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">breadthFirstTraverse</span><span class="params">(<span class="keyword">int</span> nodeIndex)</span></span>;<span class="comment">//广义优先遍历</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">getValueFromMatrix</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> col, <span class="keyword">int</span> &amp;val)</span></span>;<span class="comment">//从矩阵中获取权值</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">breadthFirstTraverseImpl</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; preVec)</span></span>;<span class="comment">//广度优先遍历实现函数</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> m_iCapacity;<span class="comment">//最多可容纳的顶点数</span></span><br><span class="line"><span class="keyword">int</span> m_iNodeCount;<span class="comment">//已添加的顶点个数</span></span><br><span class="line">Node *m_pNodeArray;<span class="comment">//存放顶点数组</span></span><br><span class="line"><span class="keyword">int</span> *m_pMatrix;<span class="comment">//存放邻接矩阵</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="CMap-cpp"><a href="#CMap-cpp" class="headerlink" title="CMap.cpp"></a>CMap.cpp</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"CMap.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line">CMap::CMap(<span class="keyword">int</span> capacity)</span><br><span class="line">&#123;</span><br><span class="line">m_iCapacity = capacity;</span><br><span class="line">m_iNodeCount = <span class="number">0</span>;</span><br><span class="line">m_pNodeArray = <span class="keyword">new</span> Node[m_iCapacity];</span><br><span class="line">m_pMatrix = <span class="keyword">new</span> <span class="keyword">int</span>[m_iCapacity * m_iCapacity];</span><br><span class="line"><span class="built_in">memset</span>(m_pMatrix, <span class="number">0</span>, m_iCapacity*m_iCapacity * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"><span class="comment">// for (int i = 0; i &lt; m_iCapacity*m_iCapacity; ++i)</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">// m_pMatrix[i] = 0;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CMap::~CMap()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span>[]m_pNodeArray;</span><br><span class="line"><span class="keyword">delete</span>[]m_pMatrix;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> CMap::addNode(Node *pNode)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (pNode == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">m_pNodeArray[m_iNodeCount].m_cData = pNode-&gt;m_cData;</span><br><span class="line">m_iNodeCount++;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CMap::resetNode()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m_iNodeCount; ++i)</span><br><span class="line">&#123;</span><br><span class="line">m_pNodeArray[i].m_bIsVisited = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> CMap::setValueToMatrixForDirectedGraph(<span class="keyword">int</span> row, <span class="keyword">int</span> col, <span class="keyword">int</span> val)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (row &lt; <span class="number">0</span> || row &gt;= m_iCapacity)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (col &lt; <span class="number">0</span> || col &gt;= m_iCapacity)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">m_pMatrix[row * m_iCapacity + col] = val;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> CMap::setValueToMatrixForUndirectedGraph(<span class="keyword">int</span> row, <span class="keyword">int</span> col, <span class="keyword">int</span> val)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (row &lt; <span class="number">0</span> || row &gt;= m_iCapacity)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (col &lt; <span class="number">0</span> || col &gt;= m_iCapacity)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">m_pMatrix[row * m_iCapacity + col] = val;</span><br><span class="line">m_pMatrix[col * m_iCapacity + row] = val;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CMap::printMatrix()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m_iCapacity; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m_iCapacity; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; m_pMatrix[i * m_iCapacity + j] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> CMap::getValueFromMatrix(<span class="keyword">int</span> row, <span class="keyword">int</span> col, <span class="keyword">int</span> &amp;val)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (row &lt; <span class="number">0</span> || row &gt;= m_iCapacity)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (col &lt; <span class="number">0</span> || col &gt;= m_iCapacity)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">val = m_pMatrix[row * m_iCapacity + col];</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CMap::depthFirstTraverse(<span class="keyword">int</span> nodeIndex)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> value = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; m_pNodeArray[nodeIndex].m_cData &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">m_pNodeArray[nodeIndex].m_bIsVisited = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过邻接矩阵判断是否与其他顶点相连</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m_iCapacity; ++i)</span><br><span class="line">&#123;</span><br><span class="line">getValueFromMatrix(nodeIndex, i, value);</span><br><span class="line"><span class="keyword">if</span> (value == <span class="number">1</span>)<span class="comment">//判断有弧连接其他顶点</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//再判断该点是否被访问过</span></span><br><span class="line"><span class="keyword">if</span> (m_pNodeArray[i].m_bIsVisited)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">depthFirstTraverse(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CMap::breadthFirstTraverse(<span class="keyword">int</span> nodeIndex)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; m_pNodeArray[nodeIndex].m_cData &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">m_pNodeArray[nodeIndex].m_bIsVisited = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; curVec;</span><br><span class="line">curVec.push_back(nodeIndex);</span><br><span class="line"></span><br><span class="line">breadthFirstTraverseImpl(curVec);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CMap::breadthFirstTraverseImpl(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; preVec)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> value = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; curVec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; (<span class="keyword">int</span>)i &lt; preVec.size(); ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m_iCapacity; ++j)</span><br><span class="line">&#123;</span><br><span class="line">getValueFromMatrix(preVec[i], j, value);</span><br><span class="line"><span class="keyword">if</span> (value != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (m_pNodeArray[j].m_bIsVisited)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; m_pNodeArray[j].m_cData &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">m_pNodeArray[j].m_bIsVisited = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">curVec.push_back(j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (curVec.size() == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">breadthFirstTraverseImpl(curVec);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="demo-cpp"><a href="#demo-cpp" class="headerlink" title="demo.cpp"></a>demo.cpp</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"CMap.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">A</span></span><br><span class="line"><span class="comment">  /   \</span></span><br><span class="line"><span class="comment"> B     D</span></span><br><span class="line"><span class="comment">/ \   / \</span></span><br><span class="line"><span class="comment">   C - F G - H</span></span><br><span class="line"><span class="comment">\ /</span></span><br><span class="line"><span class="comment"> E</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CMap *pMap = <span class="keyword">new</span> CMap(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">Node *pNodeA = <span class="keyword">new</span> Node(<span class="string">'A'</span>);</span><br><span class="line">Node *pNodeB = <span class="keyword">new</span> Node(<span class="string">'B'</span>);</span><br><span class="line">Node *pNodeC = <span class="keyword">new</span> Node(<span class="string">'C'</span>);</span><br><span class="line">Node *pNodeD = <span class="keyword">new</span> Node(<span class="string">'D'</span>);</span><br><span class="line">Node *pNodeE = <span class="keyword">new</span> Node(<span class="string">'E'</span>);</span><br><span class="line">Node *pNodeF = <span class="keyword">new</span> Node(<span class="string">'F'</span>);</span><br><span class="line">Node *pNodeG = <span class="keyword">new</span> Node(<span class="string">'G'</span>);</span><br><span class="line">Node *pNodeH = <span class="keyword">new</span> Node(<span class="string">'H'</span>);</span><br><span class="line"></span><br><span class="line">pMap-&gt;addNode(pNodeA);</span><br><span class="line">pMap-&gt;addNode(pNodeB);</span><br><span class="line">pMap-&gt;addNode(pNodeC);</span><br><span class="line">pMap-&gt;addNode(pNodeD);</span><br><span class="line">pMap-&gt;addNode(pNodeE);</span><br><span class="line">pMap-&gt;addNode(pNodeF);</span><br><span class="line">pMap-&gt;addNode(pNodeG);</span><br><span class="line">pMap-&gt;addNode(pNodeH);</span><br><span class="line"></span><br><span class="line">pMap-&gt;setValueToMatrixForUndirectedGraph(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">pMap-&gt;setValueToMatrixForUndirectedGraph(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">pMap-&gt;setValueToMatrixForUndirectedGraph(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">pMap-&gt;setValueToMatrixForUndirectedGraph(<span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line">pMap-&gt;setValueToMatrixForUndirectedGraph(<span class="number">3</span>, <span class="number">6</span>);</span><br><span class="line">pMap-&gt;setValueToMatrixForUndirectedGraph(<span class="number">3</span>, <span class="number">7</span>);</span><br><span class="line">pMap-&gt;setValueToMatrixForUndirectedGraph(<span class="number">6</span>, <span class="number">7</span>);</span><br><span class="line">pMap-&gt;setValueToMatrixForUndirectedGraph(<span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line">pMap-&gt;setValueToMatrixForUndirectedGraph(<span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">pMap-&gt;printMatrix();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">pMap-&gt;depthFirstTraverse(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">pMap-&gt;resetNode();</span><br><span class="line">pMap-&gt;breadthFirstTraverse(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">0 1 0 1 0 0 0 0</span><br><span class="line">1 0 1 0 0 1 0 0</span><br><span class="line">0 1 0 0 1 0 0 0</span><br><span class="line">1 0 0 0 0 0 1 1</span><br><span class="line">0 0 1 0 0 1 0 0</span><br><span class="line">0 1 0 0 1 0 0 0</span><br><span class="line">0 0 0 1 0 0 0 1</span><br><span class="line">0 0 0 1 0 0 1 0</span><br><span class="line"></span><br><span class="line">A B C E F D G H</span><br><span class="line">A B D C F G H E</span><br></pre></td></tr></table></figure></p><h1 id="最小生成树算法"><a href="#最小生成树算法" class="headerlink" title="最小生成树算法"></a>最小生成树算法</h1><h2 id="普利姆算法"><a href="#普利姆算法" class="headerlink" title="普利姆算法"></a>普利姆算法</h2><h3 id="Edge-h"><a href="#Edge-h" class="headerlink" title="Edge.h"></a>Edge.h</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> EDGE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EDGE_H</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Edge(<span class="keyword">int</span> nodeIndexA = <span class="number">0</span>, <span class="keyword">int</span> nodeIndexB = <span class="number">0</span>, <span class="keyword">int</span> weightValue = <span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> m_iNodeIndexA;</span><br><span class="line"><span class="keyword">int</span> m_iNodeIndexB;</span><br><span class="line"><span class="keyword">int</span> m_iWeightValue;</span><br><span class="line"><span class="keyword">bool</span> m_bSelected;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="Edge-cpp"><a href="#Edge-cpp" class="headerlink" title="Edge.cpp"></a>Edge.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Edge.h"</span></span></span><br><span class="line"></span><br><span class="line">Edge::Edge(<span class="keyword">int</span> nodeIndexA, <span class="keyword">int</span> nodeIndexB, <span class="keyword">int</span> weightValue)</span><br><span class="line">&#123;</span><br><span class="line">m_iNodeIndexA = nodeIndexA;</span><br><span class="line">m_iNodeIndexB = nodeIndexB;</span><br><span class="line">m_iWeightValue = weightValue;</span><br><span class="line">m_bSelected = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Node-h-1"><a href="#Node-h-1" class="headerlink" title="Node.h"></a>Node.h</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> NODE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NODE_H</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Node(<span class="keyword">char</span> data = <span class="number">0</span>);</span><br><span class="line"><span class="keyword">char</span> m_cData;</span><br><span class="line"><span class="keyword">bool</span> m_bIsVisited;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="Node-cpp-1"><a href="#Node-cpp-1" class="headerlink" title="Node.cpp"></a>Node.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Node.h"</span></span></span><br><span class="line"></span><br><span class="line">Node::Node(<span class="keyword">char</span> data)</span><br><span class="line">&#123;</span><br><span class="line">m_cData = data;</span><br><span class="line">m_bIsVisited = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CMap-h-1"><a href="#CMap-h-1" class="headerlink" title="CMap.h"></a>CMap.h</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"Node.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Edge.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CMap</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">CMap(<span class="keyword">int</span> capacity);</span><br><span class="line">~CMap();</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">addNode</span><span class="params">(Node *pNode)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resetNode</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">setValueToMatrixForDirectedGraph</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> col, <span class="keyword">int</span> val = <span class="number">1</span>)</span></span>;<span class="comment">//为有向图设置邻接矩阵</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">setValueToMatrixForUndirectedGraph</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> col, <span class="keyword">int</span> val = <span class="number">1</span>)</span></span>;<span class="comment">//为无向图设置邻接矩阵</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printMatrix</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">depthFirstTraverse</span><span class="params">(<span class="keyword">int</span> nodeIndex)</span></span>;<span class="comment">//深度优先遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">breadthFirstTraverse</span><span class="params">(<span class="keyword">int</span> nodeIndex)</span></span>;<span class="comment">//广义优先遍历</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">primTree</span><span class="params">(<span class="keyword">int</span> nodeIndex)</span></span>;<span class="comment">//普里姆生成树</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">getValueFromMatrix</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> col, <span class="keyword">int</span> &amp;val)</span></span>;<span class="comment">//从矩阵中获取权值</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">breadthFirstTraverseImpl</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; preVec)</span></span>;<span class="comment">//广度优先遍历实现函数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getMinEdge</span><span class="params">(<span class="built_in">vector</span>&lt;Edge&gt; edgeVec)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> m_iCapacity;<span class="comment">//最多可容纳的顶点数</span></span><br><span class="line"><span class="keyword">int</span> m_iNodeCount;<span class="comment">//已添加的顶点个数</span></span><br><span class="line">Node *m_pNodeArray;<span class="comment">//存放顶点数组</span></span><br><span class="line"><span class="keyword">int</span> *m_pMatrix;<span class="comment">//存放邻接矩阵</span></span><br><span class="line"></span><br><span class="line">Edge *m_pEdge;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="CMap-cpp-1"><a href="#CMap-cpp-1" class="headerlink" title="CMap.cpp"></a>CMap.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"CMap.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line">CMap::CMap(<span class="keyword">int</span> capacity)</span><br><span class="line">&#123;</span><br><span class="line">m_iCapacity = capacity;</span><br><span class="line">m_iNodeCount = <span class="number">0</span>;</span><br><span class="line">m_pNodeArray = <span class="keyword">new</span> Node[m_iCapacity];</span><br><span class="line">m_pMatrix = <span class="keyword">new</span> <span class="keyword">int</span>[m_iCapacity * m_iCapacity];</span><br><span class="line"><span class="built_in">memset</span>(m_pMatrix, <span class="number">0</span>, m_iCapacity*m_iCapacity * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"><span class="comment">// for (int i = 0; i &lt; m_iCapacity*m_iCapacity; ++i)</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">// m_pMatrix[i] = 0;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">m_pEdge = <span class="keyword">new</span> Edge[m_iCapacity - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CMap::~CMap()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span>[]m_pNodeArray;</span><br><span class="line"><span class="keyword">delete</span>[]m_pMatrix;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> CMap::addNode(Node *pNode)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (pNode == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">m_pNodeArray[m_iNodeCount].m_cData = pNode-&gt;m_cData;</span><br><span class="line">m_iNodeCount++;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CMap::resetNode()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m_iNodeCount; ++i)</span><br><span class="line">&#123;</span><br><span class="line">m_pNodeArray[i].m_bIsVisited = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> CMap::setValueToMatrixForDirectedGraph(<span class="keyword">int</span> row, <span class="keyword">int</span> col, <span class="keyword">int</span> val)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (row &lt; <span class="number">0</span> || row &gt;= m_iCapacity)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (col &lt; <span class="number">0</span> || col &gt;= m_iCapacity)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">m_pMatrix[row * m_iCapacity + col] = val;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> CMap::setValueToMatrixForUndirectedGraph(<span class="keyword">int</span> row, <span class="keyword">int</span> col, <span class="keyword">int</span> val)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (row &lt; <span class="number">0</span> || row &gt;= m_iCapacity)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (col &lt; <span class="number">0</span> || col &gt;= m_iCapacity)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">m_pMatrix[row * m_iCapacity + col] = val;</span><br><span class="line">m_pMatrix[col * m_iCapacity + row] = val;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CMap::printMatrix()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m_iCapacity; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m_iCapacity; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; m_pMatrix[i * m_iCapacity + j] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> CMap::getValueFromMatrix(<span class="keyword">int</span> row, <span class="keyword">int</span> col, <span class="keyword">int</span> &amp;val)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (row &lt; <span class="number">0</span> || row &gt;= m_iCapacity)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (col &lt; <span class="number">0</span> || col &gt;= m_iCapacity)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">val = m_pMatrix[row * m_iCapacity + col];</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CMap::depthFirstTraverse(<span class="keyword">int</span> nodeIndex)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> value = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; m_pNodeArray[nodeIndex].m_cData &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">m_pNodeArray[nodeIndex].m_bIsVisited = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过邻接矩阵判断是否与其他顶点相连</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m_iCapacity; ++i)</span><br><span class="line">&#123;</span><br><span class="line">getValueFromMatrix(nodeIndex, i, value);</span><br><span class="line"><span class="keyword">if</span> (value == <span class="number">1</span>)<span class="comment">//判断有弧连接其他顶点</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//再判断该点是否被访问过</span></span><br><span class="line"><span class="keyword">if</span> (m_pNodeArray[i].m_bIsVisited)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">depthFirstTraverse(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CMap::breadthFirstTraverse(<span class="keyword">int</span> nodeIndex)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; m_pNodeArray[nodeIndex].m_cData &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">m_pNodeArray[nodeIndex].m_bIsVisited = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; curVec;</span><br><span class="line">curVec.push_back(nodeIndex);</span><br><span class="line"></span><br><span class="line">breadthFirstTraverseImpl(curVec);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CMap::breadthFirstTraverseImpl(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; preVec)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> value = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; curVec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; (<span class="keyword">int</span>)i &lt; preVec.size(); ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m_iCapacity; ++j)</span><br><span class="line">&#123;</span><br><span class="line">getValueFromMatrix(preVec[i], j, value);</span><br><span class="line"><span class="keyword">if</span> (value != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (m_pNodeArray[j].m_bIsVisited)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; m_pNodeArray[j].m_cData &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">m_pNodeArray[j].m_bIsVisited = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">curVec.push_back(j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (curVec.size() == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">breadthFirstTraverseImpl(curVec);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CMap::primTree(<span class="keyword">int</span> nodeIndex)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> value = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> edgeCount = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nodeVec;</span><br><span class="line"><span class="built_in">vector</span>&lt;Edge&gt; edgeVec;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; m_pNodeArray[nodeIndex].m_cData &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">nodeVec.push_back(nodeIndex);</span><br><span class="line">m_pNodeArray[nodeIndex].m_bIsVisited = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (edgeCount &lt; m_iCapacity - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> temp = nodeVec.back();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m_iCapacity; ++i)</span><br><span class="line">&#123;</span><br><span class="line">getValueFromMatrix(temp, i, value);</span><br><span class="line"><span class="keyword">if</span> (value != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (m_pNodeArray[i].m_bIsVisited)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">Edge edge(temp, i, value);</span><br><span class="line">edgeVec.push_back(edge);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从可选边集合中找出最小的边</span></span><br><span class="line"><span class="keyword">int</span> edgeIndex = getMinEdge(edgeVec);</span><br><span class="line">edgeVec[edgeIndex].m_bSelected = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; edgeVec[edgeIndex].m_iNodeIndexA &lt;&lt; <span class="string">"---"</span> &lt;&lt; edgeVec[edgeIndex].m_iNodeIndexB &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; edgeVec[edgeIndex].m_iWeightValue &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">m_pEdge[edgeCount] = edgeVec[edgeIndex];</span><br><span class="line">edgeCount++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> nextNodeIndex = edgeVec[edgeIndex].m_iNodeIndexB;</span><br><span class="line"></span><br><span class="line">nodeVec.push_back(nextNodeIndex);</span><br><span class="line"></span><br><span class="line">m_pNodeArray[nextNodeIndex].m_bIsVisited = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; m_pNodeArray[nextNodeIndex].m_cData &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> CMap::getMinEdge(<span class="built_in">vector</span>&lt;Edge&gt; edgeVec)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> minWeight = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> edgeIndex = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (; i &lt; edgeVec.size(); ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!edgeVec[i].m_bSelected)</span><br><span class="line">&#123;</span><br><span class="line">minWeight = edgeVec[i].m_iWeightValue;</span><br><span class="line">edgeIndex = i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (minWeight == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (; i &lt; edgeVec.size(); ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (edgeVec[i].m_bSelected)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (minWeight &gt; edgeVec[i].m_iWeightValue)</span><br><span class="line">&#123;</span><br><span class="line">minWeight = edgeVec[i].m_iWeightValue;</span><br><span class="line">edgeIndex = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> edgeIndex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="demo-cpp-1"><a href="#demo-cpp-1" class="headerlink" title="demo.cpp"></a>demo.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"CMap.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">A</span></span><br><span class="line"><span class="comment">  /   \</span></span><br><span class="line"><span class="comment"> B     D</span></span><br><span class="line"><span class="comment">/ \   / \</span></span><br><span class="line"><span class="comment">   C - F G - H</span></span><br><span class="line"><span class="comment">\ /</span></span><br><span class="line"><span class="comment"> E</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*算法例子：</span></span><br><span class="line"><span class="comment">A</span></span><br><span class="line"><span class="comment">  / | \</span></span><br><span class="line"><span class="comment">B - F - E</span></span><br><span class="line"><span class="comment"> \ / \ /</span></span><br><span class="line"><span class="comment">  C - D</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  权值：</span></span><br><span class="line"><span class="comment">  A-B 6A-E 5 A-F 1</span></span><br><span class="line"><span class="comment">  B-C 3 B-F 2</span></span><br><span class="line"><span class="comment">  C-F 8 C-D 7</span></span><br><span class="line"><span class="comment">  D-F 4 D-E 2</span></span><br><span class="line"><span class="comment">  E-F 9</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CMap *pMap = <span class="keyword">new</span> CMap(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">Node *pNodeA = <span class="keyword">new</span> Node(<span class="string">'A'</span>);</span><br><span class="line">Node *pNodeB = <span class="keyword">new</span> Node(<span class="string">'B'</span>);</span><br><span class="line">Node *pNodeC = <span class="keyword">new</span> Node(<span class="string">'C'</span>);</span><br><span class="line">Node *pNodeD = <span class="keyword">new</span> Node(<span class="string">'D'</span>);</span><br><span class="line">Node *pNodeE = <span class="keyword">new</span> Node(<span class="string">'E'</span>);</span><br><span class="line">Node *pNodeF = <span class="keyword">new</span> Node(<span class="string">'F'</span>);</span><br><span class="line"></span><br><span class="line">pMap-&gt;addNode(pNodeA);</span><br><span class="line">pMap-&gt;addNode(pNodeB);</span><br><span class="line">pMap-&gt;addNode(pNodeC);</span><br><span class="line">pMap-&gt;addNode(pNodeD);</span><br><span class="line">pMap-&gt;addNode(pNodeE);</span><br><span class="line">pMap-&gt;addNode(pNodeF);</span><br><span class="line"></span><br><span class="line">pMap-&gt;setValueToMatrixForUndirectedGraph(<span class="number">0</span>, <span class="number">1</span>, <span class="number">6</span>);</span><br><span class="line">pMap-&gt;setValueToMatrixForUndirectedGraph(<span class="number">0</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">pMap-&gt;setValueToMatrixForUndirectedGraph(<span class="number">0</span>, <span class="number">5</span>, <span class="number">1</span>);</span><br><span class="line">pMap-&gt;setValueToMatrixForUndirectedGraph(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">pMap-&gt;setValueToMatrixForUndirectedGraph(<span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>);</span><br><span class="line">pMap-&gt;setValueToMatrixForUndirectedGraph(<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>);</span><br><span class="line">pMap-&gt;setValueToMatrixForUndirectedGraph(<span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>);</span><br><span class="line">pMap-&gt;setValueToMatrixForUndirectedGraph(<span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>);</span><br><span class="line">pMap-&gt;setValueToMatrixForUndirectedGraph(<span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>);</span><br><span class="line">pMap-&gt;setValueToMatrixForUndirectedGraph(<span class="number">4</span>, <span class="number">5</span>, <span class="number">9</span>);</span><br><span class="line"></span><br><span class="line">pMap-&gt;primTree(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">A</span><br><span class="line">0---5 1</span><br><span class="line">F</span><br><span class="line">5---1 2</span><br><span class="line">B</span><br><span class="line">1---2 3</span><br><span class="line">C</span><br><span class="line">5---3 4</span><br><span class="line">D</span><br><span class="line">3---4 2</span><br><span class="line">E</span><br></pre></td></tr></table></figure></p><h2 id="克鲁斯卡尔算法"><a href="#克鲁斯卡尔算法" class="headerlink" title="克鲁斯卡尔算法"></a>克鲁斯卡尔算法</h2><h3 id="Node-h-2"><a href="#Node-h-2" class="headerlink" title="Node.h"></a>Node.h</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> NODE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NODE_H</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Node(<span class="keyword">char</span> data = <span class="number">0</span>);</span><br><span class="line"><span class="keyword">char</span> m_cData;</span><br><span class="line"><span class="keyword">bool</span> m_bIsVisited;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="Node-cpp-2"><a href="#Node-cpp-2" class="headerlink" title="Node.cpp"></a>Node.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Node.h"</span></span></span><br><span class="line"></span><br><span class="line">Node::Node(<span class="keyword">char</span> data)</span><br><span class="line">&#123;</span><br><span class="line">m_cData = data;</span><br><span class="line">m_bIsVisited = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Edge-h-1"><a href="#Edge-h-1" class="headerlink" title="Edge.h"></a>Edge.h</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> EDGE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EDGE_H</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Edge(<span class="keyword">int</span> nodeIndexA = <span class="number">0</span>, <span class="keyword">int</span> nodeIndexB = <span class="number">0</span>, <span class="keyword">int</span> weightValue = <span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> m_iNodeIndexA;</span><br><span class="line"><span class="keyword">int</span> m_iNodeIndexB;</span><br><span class="line"><span class="keyword">int</span> m_iWeightValue;</span><br><span class="line"><span class="keyword">bool</span> m_bSelected;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="Edge-cpp-1"><a href="#Edge-cpp-1" class="headerlink" title="Edge.cpp"></a>Edge.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Edge.h"</span></span></span><br><span class="line"></span><br><span class="line">Edge::Edge(<span class="keyword">int</span> nodeIndexA, <span class="keyword">int</span> nodeIndexB, <span class="keyword">int</span> weightValue)</span><br><span class="line">&#123;</span><br><span class="line">m_iNodeIndexA = nodeIndexA;</span><br><span class="line">m_iNodeIndexB = nodeIndexB;</span><br><span class="line">m_iWeightValue = weightValue;</span><br><span class="line">m_bSelected = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CMap-h-2"><a href="#CMap-h-2" class="headerlink" title="CMap.h"></a>CMap.h</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"Node.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Edge.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CMap</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">CMap(<span class="keyword">int</span> capacity);</span><br><span class="line">~CMap();</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">addNode</span><span class="params">(Node *pNode)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resetNode</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">setValueToMatrixForDirectedGraph</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> col, <span class="keyword">int</span> val = <span class="number">1</span>)</span></span>;<span class="comment">//为有向图设置邻接矩阵</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">setValueToMatrixForUndirectedGraph</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> col, <span class="keyword">int</span> val = <span class="number">1</span>)</span></span>;<span class="comment">//为无向图设置邻接矩阵</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printMatrix</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">depthFirstTraverse</span><span class="params">(<span class="keyword">int</span> nodeIndex)</span></span>;<span class="comment">//深度优先遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">breadthFirstTraverse</span><span class="params">(<span class="keyword">int</span> nodeIndex)</span></span>;<span class="comment">//广义优先遍历</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">primTree</span><span class="params">(<span class="keyword">int</span> nodeIndex)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">kruskalTree</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">getValueFromMatrix</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> col, <span class="keyword">int</span> &amp;val)</span></span>;<span class="comment">//从矩阵中获取权值</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">breadthFirstTraverseImpl</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; preVec)</span></span>;<span class="comment">//广度优先遍历实现函数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getMinEdge</span><span class="params">(<span class="built_in">vector</span>&lt;Edge&gt; edgeVec)</span></span>;<span class="comment">//获取最小边</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isInSet</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nodeSet, <span class="keyword">int</span> target)</span></span>;<span class="comment">//判断顶点是否在点集合中</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergeNodeSet</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nodeSetA, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nodeSetB)</span></span>;<span class="comment">//合并两个顶点集合</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> m_iCapacity;<span class="comment">//最多可容纳的顶点数</span></span><br><span class="line"><span class="keyword">int</span> m_iNodeCount;<span class="comment">//已添加的顶点个数</span></span><br><span class="line">Node *m_pNodeArray;<span class="comment">//存放顶点数组</span></span><br><span class="line"><span class="keyword">int</span> *m_pMatrix;<span class="comment">//存放邻接矩阵</span></span><br><span class="line"></span><br><span class="line">Edge *m_pEdge;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="CMap-cpp-2"><a href="#CMap-cpp-2" class="headerlink" title="CMap.cpp"></a>CMap.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"CMap.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line">CMap::CMap(<span class="keyword">int</span> capacity)</span><br><span class="line">&#123;</span><br><span class="line">m_iCapacity = capacity;</span><br><span class="line">m_iNodeCount = <span class="number">0</span>;</span><br><span class="line">m_pNodeArray = <span class="keyword">new</span> Node[m_iCapacity];</span><br><span class="line">m_pMatrix = <span class="keyword">new</span> <span class="keyword">int</span>[m_iCapacity * m_iCapacity];</span><br><span class="line"><span class="built_in">memset</span>(m_pMatrix, <span class="number">0</span>, m_iCapacity*m_iCapacity * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"><span class="comment">// for (int i = 0; i &lt; m_iCapacity*m_iCapacity; ++i)</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">// m_pMatrix[i] = 0;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">m_pEdge = <span class="keyword">new</span> Edge[m_iCapacity - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CMap::~CMap()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span>[]m_pNodeArray;</span><br><span class="line"><span class="keyword">delete</span>[]m_pMatrix;</span><br><span class="line"><span class="keyword">delete</span>[]m_pEdge;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> CMap::addNode(Node *pNode)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (pNode == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">m_pNodeArray[m_iNodeCount].m_cData = pNode-&gt;m_cData;</span><br><span class="line">m_iNodeCount++;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CMap::resetNode()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m_iNodeCount; ++i)</span><br><span class="line">&#123;</span><br><span class="line">m_pNodeArray[i].m_bIsVisited = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> CMap::setValueToMatrixForDirectedGraph(<span class="keyword">int</span> row, <span class="keyword">int</span> col, <span class="keyword">int</span> val)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (row &lt; <span class="number">0</span> || row &gt;= m_iCapacity)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (col &lt; <span class="number">0</span> || col &gt;= m_iCapacity)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">m_pMatrix[row * m_iCapacity + col] = val;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> CMap::setValueToMatrixForUndirectedGraph(<span class="keyword">int</span> row, <span class="keyword">int</span> col, <span class="keyword">int</span> val)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (row &lt; <span class="number">0</span> || row &gt;= m_iCapacity)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (col &lt; <span class="number">0</span> || col &gt;= m_iCapacity)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">m_pMatrix[row * m_iCapacity + col] = val;</span><br><span class="line">m_pMatrix[col * m_iCapacity + row] = val;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CMap::printMatrix()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m_iCapacity; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m_iCapacity; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; m_pMatrix[i * m_iCapacity + j] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> CMap::getValueFromMatrix(<span class="keyword">int</span> row, <span class="keyword">int</span> col, <span class="keyword">int</span> &amp;val)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (row &lt; <span class="number">0</span> || row &gt;= m_iCapacity)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (col &lt; <span class="number">0</span> || col &gt;= m_iCapacity)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">val = m_pMatrix[row * m_iCapacity + col];</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CMap::depthFirstTraverse(<span class="keyword">int</span> nodeIndex)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> value = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; m_pNodeArray[nodeIndex].m_cData &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">m_pNodeArray[nodeIndex].m_bIsVisited = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过邻接矩阵判断是否与其他顶点相连</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m_iCapacity; ++i)</span><br><span class="line">&#123;</span><br><span class="line">getValueFromMatrix(nodeIndex, i, value);</span><br><span class="line"><span class="keyword">if</span> (value == <span class="number">1</span>)<span class="comment">//判断有弧连接其他顶点</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//再判断该点是否被访问过</span></span><br><span class="line"><span class="keyword">if</span> (m_pNodeArray[i].m_bIsVisited)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">depthFirstTraverse(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CMap::breadthFirstTraverse(<span class="keyword">int</span> nodeIndex)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; m_pNodeArray[nodeIndex].m_cData &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">m_pNodeArray[nodeIndex].m_bIsVisited = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; curVec;</span><br><span class="line">curVec.push_back(nodeIndex);</span><br><span class="line"></span><br><span class="line">breadthFirstTraverseImpl(curVec);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CMap::breadthFirstTraverseImpl(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; preVec)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> value = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; curVec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; (<span class="keyword">int</span>)i &lt; preVec.size(); ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m_iCapacity; ++j)</span><br><span class="line">&#123;</span><br><span class="line">getValueFromMatrix(preVec[i], j, value);</span><br><span class="line"><span class="keyword">if</span> (value != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (m_pNodeArray[j].m_bIsVisited)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; m_pNodeArray[j].m_cData &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">m_pNodeArray[j].m_bIsVisited = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">curVec.push_back(j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (curVec.size() == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">breadthFirstTraverseImpl(curVec);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CMap::primTree(<span class="keyword">int</span> nodeIndex)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> value = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> edgeCount = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nodeVec;</span><br><span class="line"><span class="built_in">vector</span>&lt;Edge&gt; edgeVec;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; m_pNodeArray[nodeIndex].m_cData &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">nodeVec.push_back(nodeIndex);</span><br><span class="line">m_pNodeArray[nodeIndex].m_bIsVisited = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (edgeCount &lt; m_iCapacity - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> temp = nodeVec.back();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m_iCapacity; ++i)</span><br><span class="line">&#123;</span><br><span class="line">getValueFromMatrix(temp, i, value);</span><br><span class="line"><span class="keyword">if</span> (value != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (m_pNodeArray[i].m_bIsVisited)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">Edge edge(temp, i, value);</span><br><span class="line">edgeVec.push_back(edge);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从可选边集合中找出最小的边</span></span><br><span class="line"><span class="keyword">int</span> edgeIndex = getMinEdge(edgeVec);</span><br><span class="line">edgeVec[edgeIndex].m_bSelected = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; edgeVec[edgeIndex].m_iNodeIndexA &lt;&lt; <span class="string">"---"</span> &lt;&lt; edgeVec[edgeIndex].m_iNodeIndexB &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; edgeVec[edgeIndex].m_iWeightValue &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">m_pEdge[edgeCount] = edgeVec[edgeIndex];</span><br><span class="line">edgeCount++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> nextNodeIndex = edgeVec[edgeIndex].m_iNodeIndexB;</span><br><span class="line"></span><br><span class="line">nodeVec.push_back(nextNodeIndex);</span><br><span class="line"></span><br><span class="line">m_pNodeArray[nextNodeIndex].m_bIsVisited = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; m_pNodeArray[nextNodeIndex].m_cData &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> CMap::getMinEdge(<span class="built_in">vector</span>&lt;Edge&gt; edgeVec)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> minWeight = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> edgeIndex = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (; i &lt; edgeVec.size(); ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!edgeVec[i].m_bSelected)</span><br><span class="line">&#123;</span><br><span class="line">minWeight = edgeVec[i].m_iWeightValue;</span><br><span class="line">edgeIndex = i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (minWeight == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (; i &lt; edgeVec.size(); ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (edgeVec[i].m_bSelected)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (minWeight &gt; edgeVec[i].m_iWeightValue)</span><br><span class="line">&#123;</span><br><span class="line">minWeight = edgeVec[i].m_iWeightValue;</span><br><span class="line">edgeIndex = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> edgeIndex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CMap::kruskalTree()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> value = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> edgeCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义存放结点集合的数组</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; nodeSets;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//第一步：取出所有边</span></span><br><span class="line"><span class="built_in">vector</span>&lt;Edge&gt; edgeVec;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m_iCapacity; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; m_iCapacity; ++j)</span><br><span class="line">&#123;</span><br><span class="line">getValueFromMatrix(i, j, value);</span><br><span class="line"><span class="keyword">if</span> (value != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">Edge <span class="title">edge</span><span class="params">(i, j, value)</span></span>;</span><br><span class="line">edgeVec.push_back(edge);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1.找到算法结束条件</span></span><br><span class="line"><span class="keyword">while</span> (edgeCount &lt; m_iCapacity - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//2.从边集合中找到最小边</span></span><br><span class="line"><span class="keyword">int</span> minEdgeIndex = getMinEdge(edgeVec);</span><br><span class="line">edgeVec[minEdgeIndex].m_bSelected = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">//3.找出最小边连接的点</span></span><br><span class="line"><span class="keyword">int</span> nodeAIndex = edgeVec[minEdgeIndex].m_iNodeIndexA;</span><br><span class="line"><span class="keyword">int</span> nodeBIndex = edgeVec[minEdgeIndex].m_iNodeIndexB;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> nodeAIsInSet = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">bool</span> nodeBIsInSet = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> nodeAInSetLabel = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> nodeBInSetLabel = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.找出点所在的点集合</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nodeSets.size(); ++i)</span><br><span class="line">&#123;</span><br><span class="line">nodeAIsInSet = isInSet(nodeSets[i], nodeAIndex);</span><br><span class="line"><span class="keyword">if</span> (nodeAIsInSet)</span><br><span class="line">&#123;</span><br><span class="line">nodeAIsInSet = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nodeSets.size(); ++i)</span><br><span class="line">&#123;</span><br><span class="line">nodeBIsInSet = isInSet(nodeSets[i], nodeBIndex);</span><br><span class="line"><span class="keyword">if</span> (nodeBIsInSet)</span><br><span class="line">&#123;</span><br><span class="line">nodeBIsInSet = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//5.根据点所在集合的不同做出不同处理</span></span><br><span class="line"><span class="keyword">if</span> (nodeAInSetLabel == <span class="number">-1</span> &amp;&amp; nodeBInSetLabel == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line">vec.push_back(nodeAIndex);</span><br><span class="line">vec.push_back(nodeBIndex);</span><br><span class="line">nodeSets.push_back(vec);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (nodeAInSetLabel == <span class="number">-1</span> &amp;&amp; nodeBInSetLabel != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">nodeSets[nodeBInSetLabel].push_back(nodeAIndex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (nodeAInSetLabel != <span class="number">-1</span> &amp;&amp; nodeBInSetLabel == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">nodeSets[nodeBInSetLabel].push_back(nodeBIndex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (nodeAInSetLabel != <span class="number">-1</span> &amp;&amp; nodeBInSetLabel != <span class="number">-1</span> &amp;&amp; nodeAInSetLabel != nodeBInSetLabel)</span><br><span class="line">&#123;</span><br><span class="line">mergeNodeSet(nodeSets[nodeAInSetLabel], nodeSets[nodeBInSetLabel]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="keyword">int</span>)nodeSets.size() - <span class="number">1</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">nodeSets[i] = nodeSets[i + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (nodeAInSetLabel != <span class="number">-1</span> &amp;&amp; nodeBInSetLabel != <span class="number">-1</span> &amp;&amp; nodeAInSetLabel == nodeBInSetLabel)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">m_pEdge[edgeCount] = edgeVec[minEdgeIndex];</span><br><span class="line">edgeCount++;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; edgeVec[minEdgeIndex].m_iNodeIndexA &lt;&lt; <span class="string">"---"</span> &lt;&lt; edgeVec[minEdgeIndex].m_iNodeIndexB &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; edgeVec[minEdgeIndex].m_iWeightValue &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> CMap::isInSet(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nodeSet, <span class="keyword">int</span> target)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nodeSet.size(); ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (nodeSet[i] == target)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CMap::mergeNodeSet(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nodeSetA, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nodeSetB)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nodeSetB.size(); ++i)</span><br><span class="line">&#123;</span><br><span class="line">nodeSetA.push_back(nodeSetB[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="demo-cpp-2"><a href="#demo-cpp-2" class="headerlink" title="demo.cpp"></a>demo.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"CMap.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">A</span></span><br><span class="line"><span class="comment">  /   \</span></span><br><span class="line"><span class="comment"> B     D</span></span><br><span class="line"><span class="comment">/ \   / \</span></span><br><span class="line"><span class="comment">   C - F G - H</span></span><br><span class="line"><span class="comment">\ /</span></span><br><span class="line"><span class="comment"> E</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*算法例子：</span></span><br><span class="line"><span class="comment">A</span></span><br><span class="line"><span class="comment">  / | \</span></span><br><span class="line"><span class="comment">B - F - E</span></span><br><span class="line"><span class="comment"> \ / \ /</span></span><br><span class="line"><span class="comment">  C - D</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  权值：</span></span><br><span class="line"><span class="comment">  A-B 6A-E 5 A-F 1</span></span><br><span class="line"><span class="comment">  B-C 3 B-F 2</span></span><br><span class="line"><span class="comment">  C-F 8 C-D 7</span></span><br><span class="line"><span class="comment">  D-F 4 D-E 2</span></span><br><span class="line"><span class="comment">  E-F 9</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CMap *pMap = <span class="keyword">new</span> CMap(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">Node *pNodeA = <span class="keyword">new</span> Node(<span class="string">'A'</span>);</span><br><span class="line">Node *pNodeB = <span class="keyword">new</span> Node(<span class="string">'B'</span>);</span><br><span class="line">Node *pNodeC = <span class="keyword">new</span> Node(<span class="string">'C'</span>);</span><br><span class="line">Node *pNodeD = <span class="keyword">new</span> Node(<span class="string">'D'</span>);</span><br><span class="line">Node *pNodeE = <span class="keyword">new</span> Node(<span class="string">'E'</span>);</span><br><span class="line">Node *pNodeF = <span class="keyword">new</span> Node(<span class="string">'F'</span>);</span><br><span class="line"></span><br><span class="line">pMap-&gt;addNode(pNodeA);</span><br><span class="line">pMap-&gt;addNode(pNodeB);</span><br><span class="line">pMap-&gt;addNode(pNodeC);</span><br><span class="line">pMap-&gt;addNode(pNodeD);</span><br><span class="line">pMap-&gt;addNode(pNodeE);</span><br><span class="line">pMap-&gt;addNode(pNodeF);</span><br><span class="line"></span><br><span class="line">pMap-&gt;setValueToMatrixForUndirectedGraph(<span class="number">0</span>, <span class="number">1</span>, <span class="number">6</span>);</span><br><span class="line">pMap-&gt;setValueToMatrixForUndirectedGraph(<span class="number">0</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">pMap-&gt;setValueToMatrixForUndirectedGraph(<span class="number">0</span>, <span class="number">5</span>, <span class="number">1</span>);</span><br><span class="line">pMap-&gt;setValueToMatrixForUndirectedGraph(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">pMap-&gt;setValueToMatrixForUndirectedGraph(<span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>);</span><br><span class="line">pMap-&gt;setValueToMatrixForUndirectedGraph(<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>);</span><br><span class="line">pMap-&gt;setValueToMatrixForUndirectedGraph(<span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>);</span><br><span class="line">pMap-&gt;setValueToMatrixForUndirectedGraph(<span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>);</span><br><span class="line">pMap-&gt;setValueToMatrixForUndirectedGraph(<span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>);</span><br><span class="line">pMap-&gt;setValueToMatrixForUndirectedGraph(<span class="number">4</span>, <span class="number">5</span>, <span class="number">9</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// pMap-&gt;primTree(0);</span></span><br><span class="line">pMap-&gt;kruskalTree();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0---5 1</span><br><span class="line">1---5 2</span><br><span class="line">3---4 2</span><br><span class="line">1---2 3</span><br><span class="line">3---5 4</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;left&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1550075379443&amp;di=51f53328008b4821ce8f839ac9186c0c&amp;imgtype=0&amp;src=http%3A%2F%2Fhiphotos.baidu.com%2Fdoc%2Fpic%2Fitem%2Fb17eca8065380cd7e40f7c6ba844ad3459828127.jpg&quot; width=&quot;300&quot; height=&quot;180&quot; style=&quot;float:right;&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;　　&lt;strong&gt;图、 prim 和 kruskal&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt; &lt;/div&gt;
    
    </summary>
    
      <category term="编程语言" scheme="https://hubojing.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="CPP" scheme="https://hubojing.github.io/tags/CPP/"/>
    
      <category term="数据结构" scheme="https://hubojing.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>线性表</title>
    <link href="https://hubojing.github.io/2019/06/12/%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    <id>https://hubojing.github.io/2019/06/12/线性表/</id>
    <published>2019-06-12T04:17:40.000Z</published>
    <updated>2019-06-19T09:20:59.000Z</updated>
    
    <content type="html"><![CDATA[<div align="left"><br><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1550075379443&di=51f53328008b4821ce8f839ac9186c0c&imgtype=0&src=http%3A%2F%2Fhiphotos.baidu.com%2Fdoc%2Fpic%2Fitem%2Fb17eca8065380cd7e40f7c6ba844ad3459828127.jpg" width="300" height="180" style="float:right;"><br><br><br>　　<strong>线性表（顺序表和链式表）。</strong><br>　　<strong>补之前的系列</strong><br><br><br> </div><a id="more"></a><h1 id="数据结构系列"><a href="#数据结构系列" class="headerlink" title="数据结构系列"></a>数据结构系列</h1><p>栈 <a href="https://hubojing.github.io/2017/11/14/%E6%A0%88/">https://hubojing.github.io/2017/11/14/%E6%A0%88/</a><br>队列 <a href="https://hubojing.github.io/2017/11/12/%E9%98%9F%E5%88%97/">https://hubojing.github.io/2017/11/12/%E9%98%9F%E5%88%97/</a><br>树 <a href="https://hubojing.github.io/2017/07/23/%E6%A0%91/">https://hubojing.github.io/2017/07/23/%E6%A0%91/</a></p><h1 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h1><h2 id="List-h"><a href="#List-h" class="headerlink" title="List.h"></a>List.h</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> LIST_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LIST_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Coordinate.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">List</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">List(<span class="keyword">int</span> size);</span><br><span class="line">~List();</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ClearList</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListEmpty</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ListLength</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">GetElem</span><span class="params">(<span class="keyword">int</span> i, Coordinate *e)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LocateElem</span><span class="params">(Coordinate *e)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">PriorElem</span><span class="params">(Coordinate *currentElem, Coordinate *preElem)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">NextElem</span><span class="params">(Coordinate *currentElem, Coordinate *nextElem)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListTraverse</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListInsert</span><span class="params">(<span class="keyword">int</span> i, Coordinate *e)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListDelete</span><span class="params">(<span class="keyword">int</span> i, Coordinate *e)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Coordinate *m_pList;</span><br><span class="line"><span class="keyword">int</span> m_iSize;</span><br><span class="line"><span class="keyword">int</span> m_iLength;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="List-cpp"><a href="#List-cpp" class="headerlink" title="List.cpp"></a>List.cpp</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//线性表--顺序表</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"List.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line">List::List(<span class="keyword">int</span> size)</span><br><span class="line">&#123;</span><br><span class="line">m_iSize = size;</span><br><span class="line">m_pList = <span class="keyword">new</span> Coordinate[m_iSize];</span><br><span class="line">m_iLength = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">List::~List()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span>[]m_pList;</span><br><span class="line">m_pList = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> List::ClearList()</span><br><span class="line">&#123;</span><br><span class="line">m_iLength = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> List::ListEmpty()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (m_iLength == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> List::ListLength()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> m_iLength;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> List::GetElem(<span class="keyword">int</span> i, Coordinate *e)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= m_iSize)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">*e = m_pList[i];</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> List::LocateElem(Coordinate *e)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m_iLength; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (m_pList[i] == *e)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> List::PriorElem(Coordinate *currentElem, Coordinate *preElem)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> temp = LocateElem(currentElem);</span><br><span class="line"><span class="keyword">if</span> (temp == <span class="number">-1</span> || temp == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">*preElem = m_pList[temp - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> List::NextElem(Coordinate *currentElem, Coordinate *nextElem)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> temp = LocateElem(currentElem);</span><br><span class="line"><span class="keyword">if</span> (temp == <span class="number">-1</span> || temp == m_iLength - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">*nextElem = m_pList[temp + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> List::ListTraverse()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m_iLength; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; m_pList[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">// m_pList[i].printCoordinate();</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> List::ListInsert(<span class="keyword">int</span> i, Coordinate *e)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i&lt;<span class="number">0</span> || i&gt;m_iLength)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = m_iLength - <span class="number">1</span>; k &gt;= i; --k)</span><br><span class="line">&#123;</span><br><span class="line">m_pList[k + <span class="number">1</span>] = m_pList[k];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">m_pList[i] = *e;</span><br><span class="line"></span><br><span class="line">m_iLength++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> List::ListDelete(<span class="keyword">int</span> i, Coordinate *e)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= m_iLength)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">*e = m_pList[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = i + <span class="number">1</span>; k &lt; m_iLength; ++k)</span><br><span class="line">&#123;</span><br><span class="line">m_pList[k - <span class="number">1</span>] = m_pList[k];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">m_iLength--;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Coordinate-h"><a href="#Coordinate-h" class="headerlink" title="Coordinate.h"></a>Coordinate.h</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> COORDINATE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> COORDINATE_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Coordinate</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">friend</span> ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;out, Coordinate &amp;coor);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Coordinate(<span class="keyword">int</span> x = <span class="number">0</span>, <span class="keyword">int</span> y = <span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printCoordinate</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>==(Coordinate &amp;coor);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> m_iX;</span><br><span class="line"><span class="keyword">int</span> m_iY;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="Coordinate-cpp"><a href="#Coordinate-cpp" class="headerlink" title="Coordinate.cpp"></a>Coordinate.cpp</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Coordinate.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line">Coordinate::Coordinate(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span><br><span class="line">&#123;</span><br><span class="line">m_iX = x;</span><br><span class="line">m_iY = y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Coordinate::printCoordinate()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"("</span> &lt;&lt; m_iX &lt;&lt; <span class="string">","</span> &lt;&lt; m_iY &lt;&lt; <span class="string">")"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;out, Coordinate &amp;coor)</span><br><span class="line">&#123;</span><br><span class="line">out &lt;&lt; <span class="string">"("</span> &lt;&lt; coor.m_iX &lt;&lt; <span class="string">","</span> &lt;&lt; coor.m_iY &lt;&lt; <span class="string">")"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> Coordinate::<span class="keyword">operator</span>==(Coordinate &amp;coor)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_iX == coor.m_iX &amp;&amp; <span class="keyword">this</span>-&gt;m_iY == coor.m_iY)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="demo-cpp"><a href="#demo-cpp" class="headerlink" title="demo.cpp"></a>demo.cpp</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"List.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Coordinate <span class="title">e1</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line"><span class="function">Coordinate <span class="title">e2</span><span class="params">(<span class="number">3</span>, <span class="number">4</span>)</span></span>;</span><br><span class="line"><span class="function">Coordinate <span class="title">e3</span><span class="params">(<span class="number">5</span>, <span class="number">6</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">List *<span class="built_in">list</span> = <span class="keyword">new</span> List(<span class="number">10</span>);</span><br><span class="line"><span class="built_in">list</span>-&gt;ListInsert(<span class="number">0</span>, &amp;e1);</span><br><span class="line"><span class="built_in">list</span>-&gt;ListInsert(<span class="number">1</span>, &amp;e2);</span><br><span class="line"><span class="built_in">list</span>-&gt;ListInsert(<span class="number">2</span>, &amp;e3);</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>-&gt;ListTraverse();</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"长度：%d\n"</span>, <span class="built_in">list</span>-&gt;ListLength());</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(1,2)</span><br><span class="line"></span><br><span class="line">(3,4)</span><br><span class="line"></span><br><span class="line">(5,6)</span><br><span class="line"></span><br><span class="line">长度：3</span><br></pre></td></tr></table></figure></p><h1 id="链式表"><a href="#链式表" class="headerlink" title="链式表"></a>链式表</h1><h2 id="Node-h"><a href="#Node-h" class="headerlink" title="Node.h"></a>Node.h</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> NODE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NODE_H</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> data;</span><br><span class="line">Node *next;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printNode</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="Node-cpp"><a href="#Node-cpp" class="headerlink" title="Node.cpp"></a>Node.cpp</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Node.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Node::printNode()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; data &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="List-h-1"><a href="#List-h-1" class="headerlink" title="List.h"></a>List.h</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> LIST_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LIST_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"Node.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">List</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">List();</span><br><span class="line">~List();</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ClearList</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListEmpty</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ListLength</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">GetElem</span><span class="params">(<span class="keyword">int</span> i, Node *pNode)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LocateElem</span><span class="params">(Node *pNode)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">PriorElem</span><span class="params">(Node *pCurrentNode, Node *pPreNode)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">NextElem</span><span class="params">(Node *pCurrentNode, Node *pNextNode)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListTraverse</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListInsert</span><span class="params">(<span class="keyword">int</span> i, Node *pNode)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListDelete</span><span class="params">(<span class="keyword">int</span> i, Node *pNode)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListInsertHead</span><span class="params">(Node *pNode)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListInsertTail</span><span class="params">(Node *pNode)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Node *m_pList;</span><br><span class="line"><span class="keyword">int</span> m_iLength;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="List-cpp-1"><a href="#List-cpp-1" class="headerlink" title="List.cpp"></a>List.cpp</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//线性表--顺序表</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"List.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line">List::List()</span><br><span class="line">&#123;</span><br><span class="line">m_pList = <span class="keyword">new</span> Node;</span><br><span class="line">m_pList-&gt;data = <span class="number">0</span>;</span><br><span class="line">m_pList-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">m_iLength = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">List::~List()</span><br><span class="line">&#123;</span><br><span class="line">ClearList();</span><br><span class="line"><span class="keyword">delete</span> m_pList;</span><br><span class="line">m_pList = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> List::ListInsertHead(Node *pNode)</span><br><span class="line">&#123;</span><br><span class="line">Node *newNode = <span class="keyword">new</span> Node;</span><br><span class="line"><span class="keyword">if</span> (newNode == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">newNode-&gt;data = pNode-&gt;data;</span><br><span class="line">newNode-&gt;next = m_pList-&gt;next;</span><br><span class="line">m_pList-&gt;next = newNode;</span><br><span class="line">m_iLength++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> List::ListInsertTail(Node *pNode)</span><br><span class="line">&#123;</span><br><span class="line">Node *currentNode = m_pList;</span><br><span class="line"><span class="keyword">while</span> (currentNode-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">currentNode = currentNode-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">Node *newNode = <span class="keyword">new</span> Node;</span><br><span class="line"><span class="keyword">if</span> (newNode == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">newNode-&gt;data = pNode-&gt;data;</span><br><span class="line">newNode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">currentNode-&gt;next = newNode;</span><br><span class="line">m_iLength++;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> List::ListInsert(<span class="keyword">int</span> i, Node* pNode)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i&lt;<span class="number">0</span> || i&gt;m_iLength)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">Node *currentNode = m_pList;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; i; ++k)</span><br><span class="line">&#123;</span><br><span class="line">currentNode = currentNode-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">Node *newNode = <span class="keyword">new</span> Node;</span><br><span class="line"><span class="keyword">if</span> (newNode == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">newNode-&gt;data = pNode-&gt;data;</span><br><span class="line">newNode-&gt;next = currentNode-&gt;next;</span><br><span class="line">currentNode-&gt;next = newNode;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> List::ListDelete(<span class="keyword">int</span> i, Node *pNode)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= m_iLength)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">Node *currentNode = m_pList;</span><br><span class="line">Node *currentNodeBefore = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= i; ++k)</span><br><span class="line">&#123;</span><br><span class="line">currentNodeBefore = currentNode;</span><br><span class="line">currentNode = currentNode-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">currentNodeBefore-&gt;next = currentNode-&gt;next;</span><br><span class="line">pNode-&gt;data = currentNode-&gt;data;</span><br><span class="line"><span class="keyword">delete</span> currentNode;</span><br><span class="line">currentNode = <span class="literal">NULL</span>;</span><br><span class="line">m_iLength--;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> List::ClearList()</span><br><span class="line">&#123;</span><br><span class="line">Node *currentNode = m_pList-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (currentNode != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">Node *temp = currentNode-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> currentNode;</span><br><span class="line">currentNode = temp;</span><br><span class="line">&#125;</span><br><span class="line">m_pList-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">m_iLength = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> List::ListEmpty()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (m_iLength == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> List::ListLength()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> m_iLength;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> List::GetElem(<span class="keyword">int</span> i, Node *pNode)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= m_iLength)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">Node *currentNode = m_pList;</span><br><span class="line">Node *currentNodeBefore = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= i; ++k)</span><br><span class="line">&#123;</span><br><span class="line">currentNodeBefore = currentNode;</span><br><span class="line">currentNode = currentNode-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pNode-&gt;data = currentNode-&gt;data;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> List::LocateElem(Node *pNode)</span><br><span class="line">&#123;</span><br><span class="line">Node *currentNode = m_pList;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (currentNode-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">currentNode = currentNode-&gt;next;</span><br><span class="line"><span class="keyword">if</span> (currentNode-&gt;data == pNode-&gt;data)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> List::PriorElem(Node *pCurrentNode, Node *pPreNode)</span><br><span class="line">&#123;</span><br><span class="line">Node *currentNode = m_pList;</span><br><span class="line">Node *tempNode = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">while</span> (currentNode-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">tempNode = currentNode;</span><br><span class="line">currentNode = currentNode-&gt;next;</span><br><span class="line"><span class="keyword">if</span> (currentNode-&gt;data == pCurrentNode-&gt;data)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (tempNode == m_pList)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">pPreNode-&gt;data = tempNode-&gt;data;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> List::NextElem(Node *pCurrentNode, Node *pNextNode)</span><br><span class="line">&#123;</span><br><span class="line">Node *currentNode = m_pList;</span><br><span class="line"><span class="keyword">while</span> (currentNode-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">currentNode = currentNode-&gt;next;</span><br><span class="line"><span class="keyword">if</span> (currentNode-&gt;data == pCurrentNode-&gt;data)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (currentNode-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pNextNode-&gt;data = currentNode-&gt;next-&gt;data;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> List::ListTraverse()</span><br><span class="line">&#123;</span><br><span class="line">Node *currentNode = m_pList;</span><br><span class="line"><span class="keyword">while</span> (currentNode-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">currentNode = currentNode-&gt;next;</span><br><span class="line">currentNode-&gt;printNode();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="demo-cpp-1"><a href="#demo-cpp-1" class="headerlink" title="demo.cpp"></a>demo.cpp</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"List.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">List *pList = <span class="keyword">new</span> List();</span><br><span class="line">Node node1;</span><br><span class="line">node1.data = <span class="number">1</span>;</span><br><span class="line">Node node2;</span><br><span class="line">node2.data = <span class="number">2</span>;</span><br><span class="line">Node node3;</span><br><span class="line">node3.data = <span class="number">3</span>;</span><br><span class="line">Node node4;</span><br><span class="line">node4.data = <span class="number">4</span>;</span><br><span class="line">Node node5;</span><br><span class="line">node5.data = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// pList-&gt;ListInsertHead(&amp;node1);</span></span><br><span class="line"><span class="comment">// pList-&gt;ListInsertHead(&amp;node2);</span></span><br><span class="line"><span class="comment">// pList-&gt;ListInsertHead(&amp;node3);</span></span><br><span class="line"><span class="comment">// pList-&gt;ListInsertHead(&amp;node4);</span></span><br><span class="line"></span><br><span class="line">pList-&gt;ListInsertTail(&amp;node1);</span><br><span class="line">pList-&gt;ListInsertTail(&amp;node2);</span><br><span class="line">pList-&gt;ListInsertTail(&amp;node3);</span><br><span class="line">pList-&gt;ListInsertTail(&amp;node4);</span><br><span class="line"></span><br><span class="line">pList-&gt;ListInsert(<span class="number">1</span>, &amp;node5);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Node temp;</span></span><br><span class="line"><span class="comment">// pList-&gt;ListDelete(1, &amp;temp);</span></span><br><span class="line"><span class="comment">// cout &lt;&lt; "temp = " &lt;&lt; temp.data &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line">pList-&gt;ListTraverse();</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> pList;</span><br><span class="line">pList = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="链表应用之通讯录"><a href="#链表应用之通讯录" class="headerlink" title="链表应用之通讯录"></a>链表应用之通讯录</h1><h2 id="Person-h"><a href="#Person-h" class="headerlink" title="Person.h"></a>Person.h</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> PERSON_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PERSON_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">friend</span> ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;out, Person &amp;person);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="built_in">string</span> phone;</span><br><span class="line">Person &amp;<span class="keyword">operator</span>=(Person &amp;person);</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>==(Person &amp;person);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="Person-cpp"><a href="#Person-cpp" class="headerlink" title="Person.cpp"></a>Person.cpp</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Person.h"</span></span></span><br><span class="line"></span><br><span class="line">ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;out, Person &amp;person)</span><br><span class="line">&#123;</span><br><span class="line">out &lt;&lt; person.name &lt;&lt; <span class="string">"----"</span> &lt;&lt; person.phone &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person &amp;Person::<span class="keyword">operator</span>=(Person &amp;person)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;name = person.name;</span><br><span class="line"><span class="keyword">this</span>-&gt;phone = person.phone;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> Person::<span class="keyword">operator</span>==(Person &amp;person)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;name == person.name &amp;&amp; <span class="keyword">this</span>-&gt;phone==person.phone)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Node-h-1"><a href="#Node-h-1" class="headerlink" title="Node.h"></a>Node.h</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> NODE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NODE_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Person.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person data;</span><br><span class="line">Node *next;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printNode</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="Node-cpp-1"><a href="#Node-cpp-1" class="headerlink" title="Node.cpp"></a>Node.cpp</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Node.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Node::printNode()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; data &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="List-h-2"><a href="#List-h-2" class="headerlink" title="List.h"></a>List.h</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> LIST_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LIST_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"Node.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">List</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">List();</span><br><span class="line">~List();</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ClearList</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListEmpty</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ListLength</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">GetElem</span><span class="params">(<span class="keyword">int</span> i, Node *pNode)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LocateElem</span><span class="params">(Node *pNode)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">PriorElem</span><span class="params">(Node *pCurrentNode, Node *pPreNode)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">NextElem</span><span class="params">(Node *pCurrentNode, Node *pNextNode)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListTraverse</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListInsert</span><span class="params">(<span class="keyword">int</span> i, Node *pNode)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListDelete</span><span class="params">(<span class="keyword">int</span> i, Node *pNode)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListInsertHead</span><span class="params">(Node *pNode)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListInsertTail</span><span class="params">(Node *pNode)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Node *m_pList;</span><br><span class="line"><span class="keyword">int</span> m_iLength;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="List-cpp-2"><a href="#List-cpp-2" class="headerlink" title="List.cpp"></a>List.cpp</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//线性表--顺序表</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"List.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line">List::List()</span><br><span class="line">&#123;</span><br><span class="line">m_pList = <span class="keyword">new</span> Node;</span><br><span class="line"><span class="comment">// m_pList-&gt;data = 0;</span></span><br><span class="line">m_pList-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">m_iLength = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">List::~List()</span><br><span class="line">&#123;</span><br><span class="line">ClearList();</span><br><span class="line"><span class="keyword">delete</span> m_pList;</span><br><span class="line">m_pList = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> List::ListInsertHead(Node *pNode)</span><br><span class="line">&#123;</span><br><span class="line">Node *newNode = <span class="keyword">new</span> Node;</span><br><span class="line"><span class="keyword">if</span> (newNode == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">newNode-&gt;data = pNode-&gt;data;</span><br><span class="line">newNode-&gt;next = m_pList-&gt;next;</span><br><span class="line">m_pList-&gt;next = newNode;</span><br><span class="line">m_iLength++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> List::ListInsertTail(Node *pNode)</span><br><span class="line">&#123;</span><br><span class="line">Node *currentNode = m_pList;</span><br><span class="line"><span class="keyword">while</span> (currentNode-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">currentNode = currentNode-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">Node *newNode = <span class="keyword">new</span> Node;</span><br><span class="line"><span class="keyword">if</span> (newNode == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">newNode-&gt;data = pNode-&gt;data;</span><br><span class="line">newNode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">currentNode-&gt;next = newNode;</span><br><span class="line">m_iLength++;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> List::ListInsert(<span class="keyword">int</span> i, Node* pNode)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i&lt;<span class="number">0</span> || i&gt;m_iLength)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">Node *currentNode = m_pList;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; i; ++k)</span><br><span class="line">&#123;</span><br><span class="line">currentNode = currentNode-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">Node *newNode = <span class="keyword">new</span> Node;</span><br><span class="line"><span class="keyword">if</span> (newNode == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">newNode-&gt;data = pNode-&gt;data;</span><br><span class="line">newNode-&gt;next = currentNode-&gt;next;</span><br><span class="line">currentNode-&gt;next = newNode;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> List::ListDelete(<span class="keyword">int</span> i, Node *pNode)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= m_iLength)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">Node *currentNode = m_pList;</span><br><span class="line">Node *currentNodeBefore = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= i; ++k)</span><br><span class="line">&#123;</span><br><span class="line">currentNodeBefore = currentNode;</span><br><span class="line">currentNode = currentNode-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">currentNodeBefore-&gt;next = currentNode-&gt;next;</span><br><span class="line">pNode-&gt;data = currentNode-&gt;data;</span><br><span class="line"><span class="keyword">delete</span> currentNode;</span><br><span class="line">currentNode = <span class="literal">NULL</span>;</span><br><span class="line">m_iLength--;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> List::ClearList()</span><br><span class="line">&#123;</span><br><span class="line">Node *currentNode = m_pList-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (currentNode != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">Node *temp = currentNode-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> currentNode;</span><br><span class="line">currentNode = temp;</span><br><span class="line">&#125;</span><br><span class="line">m_pList-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">m_iLength = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> List::ListEmpty()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (m_iLength == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> List::ListLength()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> m_iLength;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> List::GetElem(<span class="keyword">int</span> i, Node *pNode)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= m_iLength)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">Node *currentNode = m_pList;</span><br><span class="line">Node *currentNodeBefore = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= i; ++k)</span><br><span class="line">&#123;</span><br><span class="line">currentNodeBefore = currentNode;</span><br><span class="line">currentNode = currentNode-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pNode-&gt;data = currentNode-&gt;data;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> List::LocateElem(Node *pNode)</span><br><span class="line">&#123;</span><br><span class="line">Node *currentNode = m_pList;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (currentNode-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">currentNode = currentNode-&gt;next;</span><br><span class="line"><span class="keyword">if</span> (currentNode-&gt;data == pNode-&gt;data)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> List::PriorElem(Node *pCurrentNode, Node *pPreNode)</span><br><span class="line">&#123;</span><br><span class="line">Node *currentNode = m_pList;</span><br><span class="line">Node *tempNode = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">while</span> (currentNode-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">tempNode = currentNode;</span><br><span class="line">currentNode = currentNode-&gt;next;</span><br><span class="line"><span class="keyword">if</span> (currentNode-&gt;data == pCurrentNode-&gt;data)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (tempNode == m_pList)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">pPreNode-&gt;data = tempNode-&gt;data;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> List::NextElem(Node *pCurrentNode, Node *pNextNode)</span><br><span class="line">&#123;</span><br><span class="line">Node *currentNode = m_pList;</span><br><span class="line"><span class="keyword">while</span> (currentNode-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">currentNode = currentNode-&gt;next;</span><br><span class="line"><span class="keyword">if</span> (currentNode-&gt;data == pCurrentNode-&gt;data)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (currentNode-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pNextNode-&gt;data = currentNode-&gt;next-&gt;data;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> List::ListTraverse()</span><br><span class="line">&#123;</span><br><span class="line">Node *currentNode = m_pList;</span><br><span class="line"><span class="keyword">while</span> (currentNode-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">currentNode = currentNode-&gt;next;</span><br><span class="line">currentNode-&gt;printNode();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="demo-cpp-2"><a href="#demo-cpp-2" class="headerlink" title="demo.cpp"></a>demo.cpp</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"List.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">menu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"功能菜单"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"1.新建联系人"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"2.删除联系人"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"3.浏览通讯录"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"4.退出通讯录"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> order = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; order;</span><br><span class="line"><span class="keyword">return</span> order;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createPerson</span><span class="params">(List *pList)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Node node;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入姓名："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; node.data.name;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入电话："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; node.data.phone;</span><br><span class="line">pList-&gt;ListInsertTail(&amp;node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deletePerson</span><span class="params">(List *pList)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Node node;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入姓名："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; node.data.name;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入电话："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; node.data.phone;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">num = pList-&gt;LocateElem(&amp;node);</span><br><span class="line">pList-&gt;ListDelete(num, &amp;node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">List *pList = <span class="keyword">new</span> List();</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> userOrder = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (userOrder != <span class="number">4</span>)</span><br><span class="line">&#123;</span><br><span class="line">userOrder = menu();</span><br><span class="line"><span class="keyword">switch</span> (userOrder)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"用户指令---&gt;新建联系人："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">createPerson(pList);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"用户指令---&gt;删除联系人："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入被删除者姓名："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">deletePerson(pList);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"用户指令---&gt;浏览通讯录："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">pList-&gt;ListTraverse();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"用户指令---&gt;退出通讯录："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span> pList;</span><br><span class="line">pList = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;left&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1550075379443&amp;di=51f53328008b4821ce8f839ac9186c0c&amp;imgtype=0&amp;src=http%3A%2F%2Fhiphotos.baidu.com%2Fdoc%2Fpic%2Fitem%2Fb17eca8065380cd7e40f7c6ba844ad3459828127.jpg&quot; width=&quot;300&quot; height=&quot;180&quot; style=&quot;float:right;&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;　　&lt;strong&gt;线性表（顺序表和链式表）。&lt;/strong&gt;&lt;br&gt;　　&lt;strong&gt;补之前的系列&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt; &lt;/div&gt;
    
    </summary>
    
      <category term="编程语言" scheme="https://hubojing.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="CPP" scheme="https://hubojing.github.io/tags/CPP/"/>
    
      <category term="数据结构" scheme="https://hubojing.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>浅谈面向接口编程</title>
    <link href="https://hubojing.github.io/2019/06/11/%E6%B5%85%E8%B0%88%E9%9D%A2%E5%90%91%E6%8E%A5%E5%8F%A3%E7%BC%96%E7%A8%8B/"/>
    <id>https://hubojing.github.io/2019/06/11/浅谈面向接口编程/</id>
    <published>2019-06-11T08:52:13.000Z</published>
    <updated>2019-06-11T14:10:34.000Z</updated>
    
    <content type="html"><![CDATA[<div align="left"><br><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1560271954691&di=bc0217f3ed0bb15433fc257bc850e091&imgtype=0&src=http%3A%2F%2Fpic.baike.soso.com%2Fugc%2Fbaikepic2%2F20126%2F20170917153020-370301936_png_864_479_719568.jpg%2F0" width="300" height="180" style="float:right;"><br><br><br>　　<strong>聊一聊面向接口编程。</strong><br><br><br> </div><a id="more"></a><p>　　最近看Go语言的资料，看到interface类型，突然想起来以前面试的时候面试官问过我是否了解C++接口编程。当时对于这个问题，我脑袋里只有类？抽象类？这样模糊的答案。Bug产出者的我好像经常把接口当类和函数在写。现在再看这个问题，包括对面向对象，似乎明白了些。</p><h1 id="从王者荣耀说开去"><a href="#从王者荣耀说开去" class="headerlink" title="从王者荣耀说开去"></a>从王者荣耀说开去</h1><p>　　比如玩王者荣耀，里面有各种英雄。比如智商250的鲁班七号，他会跑，攻击。<br>　　<code>面向过程</code>的思维就是先定义一个结构体，里面有英雄的静态信息，比如名字、性别等等。“跑”、“攻击”这些动作让它发生，很简单啊，写一个run()和attack()的函数就好了。这时优秀的思维活跃的大佬们想，这个动作是鲁班本身就能发出的啊，不是我外界赋予的，这不够科学。<br>　　于是<code>面向对象</code>诞生了。<br>　　干脆写一个名为“LubanSeven”的类，把run()和attack()放入类里。<br>　　此时对面迎来的敌人是扁鹊。<br>　　他也会跑，攻击。于是还有一个名为“BianQue”的类，同样地，有run()和attack()两个方法。</p><p>　　但是，这似乎很浪费代码。除了名字不同，他们的方法一样啊。<br>　　优秀的思维活跃的大佬们说，要改。这样吧，鲁班七号是英雄，扁鹊也是英雄。干脆写个英雄的基类吧。鲁班七号类和扁鹊类继承它不就好了嘛!<br>　　于是有了英雄类，类里有两个方法run()和attack()。</p><p>　　英雄总归是要推塔的。于是还有一个防御塔类，防御塔也不是省油的灯，你靠近它它也会攻击的。所以里面也有个attack()方法。</p><p>　　同是攻击，但英雄不会承认自己的攻击和防御塔的攻击是一回事。<br>　　可是无聊的看客说，管它是什么，反正就是攻击就完事了，对方会掉血。<br>　　那……这个攻击能不能放一块说？英雄表示拒绝（我又不是个塔），防御塔也闪光表示不服（<del>我…又不是个人？</del>）。<br>　　这时优秀的思维活跃的大佬们又说话了。<br>　　得了得了，我给你们写个接口吧。这个接口就叫做攻击，你们都可以用。<br>　　甚至，水晶都可以用。</p><p>　　这样一来，好像是更抽象了有没有？<br>　　把不同类别的事物的相同特性摘出来，就是<code>接口</code>。使用者可以忽略细节。就像人会吃，猪也会吃。干脆接口就叫吃，下次有个猫来了，也可以调用。</p><p>　　例子讲完。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>　　C++貌似是没有接口这个狭义的语法概念的，但是我们依然可以写出类似于java里的interface这样的设计概念（使用纯虚函数）。</p><p>　　<code>面向过程编程(Procedure Oriented Programming, POP)</code>对应的是<code>面向对象编程(Object Oriented Programming, OOP)</code>，<code>面向接口编程(Interface Oriented Programming, IOP)</code>对应的是<code>面向实现编程(Realize Oriented Programming, ROP)</code>。<br>　　<code>面向过程编程</code>把世界分为数据结构和函数，追求过程一步步实现，<code>面向对象编程</code>把世界分为对象和方法。<br>　　<code>面向实现编程</code>和<code>面向接口编程</code>都是基于面向对象编程来谈的。<br>　　<code>面向实现编程</code>就是在自身类中实例化该类，直接调用相应方法。耦合度高。<br>　　<code>面向接口编程</code>主要是为了将定义和实现分开，提高了代码的解耦度，复用性强，便于扩展，能够更好的维护。<br>　　所有的思想本质都是模拟现实。</p><p>　　之前分不清<code>抽象类</code>和<code>接口</code>的区别，但现在觉得抽象类是广义的用法，而其中针对某些特定功能实现的抽象类就可以称之为接口，或者说接口更侧重于定义规则。比如高考学生类、考研学生类它们的抽象类是学生类，而其中一个接口是“考试”。</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://www.cnblogs.com/moveofgod/archive/2013/05/08/3066325.html" target="_blank" rel="noopener">https://www.cnblogs.com/moveofgod/archive/2013/05/08/3066325.html</a><br><a href="https://blog.csdn.net/u013400743/article/details/51252003" target="_blank" rel="noopener">https://blog.csdn.net/u013400743/article/details/51252003</a><br><a href="https://blog.csdn.net/qq_35923749/article/details/78422977" target="_blank" rel="noopener">https://blog.csdn.net/qq_35923749/article/details/78422977</a></p>]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;left&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1560271954691&amp;di=bc0217f3ed0bb15433fc257bc850e091&amp;imgtype=0&amp;src=http%3A%2F%2Fpic.baike.soso.com%2Fugc%2Fbaikepic2%2F20126%2F20170917153020-370301936_png_864_479_719568.jpg%2F0&quot; width=&quot;300&quot; height=&quot;180&quot; style=&quot;float:right;&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;　　&lt;strong&gt;聊一聊面向接口编程。&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt; &lt;/div&gt;
    
    </summary>
    
      <category term="互联网" scheme="https://hubojing.github.io/categories/%E4%BA%92%E8%81%94%E7%BD%91/"/>
    
    
      <category term="Java" scheme="https://hubojing.github.io/tags/Java/"/>
    
      <category term="CPP" scheme="https://hubojing.github.io/tags/CPP/"/>
    
  </entry>
  
</feed>
