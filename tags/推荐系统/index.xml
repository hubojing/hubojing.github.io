<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>推荐系统 on 靖待</title>
        <link>https://hubojing.github.io/tags/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/</link>
        <description>Recent content in 推荐系统 on 靖待</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>靖待</copyright>
        <lastBuildDate>Sat, 30 Nov 2019 18:45:33 +0000</lastBuildDate><atom:link href="https://hubojing.github.io/tags/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>《推荐系统实践》笔记</title>
        <link>https://hubojing.github.io/leqnlq9y/</link>
        <pubDate>Sat, 30 Nov 2019 18:45:33 +0000</pubDate>
        
        <guid>https://hubojing.github.io/leqnlq9y/</guid>
        <description>&lt;div align=&#34;left&#34;&gt;
&lt;img src=&#34;https://hubojing.github.io/images/《推荐系统实践》笔记——推荐系统实践.jpg&#34; width=&#34;300&#34; height=&#34;180&#34; style=&#34;float:right;&#34;/&gt;
&lt;p&gt;　　&lt;strong&gt;to be continued&lt;/strong&gt;&lt;/p&gt;
 &lt;/div&gt;
&lt;h1 id=&#34;第1章-好的推荐系统&#34;&gt;第1章 好的推荐系统
&lt;/h1&gt;&lt;h2 id=&#34;什么是推荐系统&#34;&gt;什么是推荐系统
&lt;/h2&gt;&lt;p&gt;　　推荐系统的基本任务是联系用户和物品，解决信息过载的问题。&lt;br&gt;
　　社会化推荐(social recommendation)：向朋友咨询&lt;br&gt;
　　基于内容的推荐(content-based filtering)：寻找和自己之前喜欢的物品相似的物品&lt;br&gt;
　　基于协同过滤(collaborative filtering)：找到和自己历史兴趣相似的用户所喜欢的物品&lt;/p&gt;
&lt;h2 id=&#34;推荐系统评测&#34;&gt;推荐系统评测
&lt;/h2&gt;&lt;h3 id=&#34;实验方法&#34;&gt;实验方法
&lt;/h3&gt;&lt;p&gt;　　离线实验（offline experiment）、用户调查（user study）、在线实验（online experiment）&lt;br&gt;
　　离线实验步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过日志系统获得用户行为数据，并按照一定格式生成一个标准的数据集;&lt;/li&gt;
&lt;li&gt;将数据集按照一定的规则分成训练集和测试集;&lt;/li&gt;
&lt;li&gt;在训练集上训练用户兴趣模型，在测试集上进行预测;&lt;/li&gt;
&lt;li&gt;通过事先定义的离线指标评测算法在测试集上的预测结果。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;　　在线实验：AB测试&lt;br&gt;
　　AB测试是一种很常用的在线评测算法的实验方法。它通过一定的规则将用户随机分成几组，并对不同组的用户采用不同的算法，然后通过统计不同组用户的各种不同的评测指标比较不同算法，比如可以统计不同组用户的点击率，通过点击率比较不同算法的性能。&lt;/p&gt;
&lt;h3 id=&#34;评测指标&#34;&gt;评测指标
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;用户满意度&lt;/li&gt;
&lt;li&gt;预测准确度
　　评分预测：均方根误差RMSE和平均绝对误差（MAE）
　　TopN推荐：准确率（precision）和召回率（recall）&lt;/li&gt;
&lt;li&gt;覆盖率（coverage）
　　信息熵和基尼系数（Gini Index）&lt;/li&gt;
&lt;li&gt;多样性&lt;/li&gt;
&lt;li&gt;新颖性&lt;/li&gt;
&lt;li&gt;惊喜度&lt;/li&gt;
&lt;li&gt;信任度&lt;/li&gt;
&lt;li&gt;实时性&lt;/li&gt;
&lt;li&gt;健壮性&lt;/li&gt;
&lt;li&gt;商业目标&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;评测维度&#34;&gt;评测维度
&lt;/h3&gt;&lt;p&gt;　　用户维度
　　物品维度
　　时间维度&lt;/p&gt;
&lt;h1 id=&#34;第2章-利用用户行为数据&#34;&gt;第2章 利用用户行为数据
&lt;/h1&gt;&lt;p&gt;　　基于用户行为分析的推荐算法是个性化推荐系统的重要算法，学术界一般将这种类型的算法称为协同过滤算法。&lt;br&gt;
　　按反馈的明确性分，显式反馈（explicit feedback）和隐式反馈（implicit feedback）&lt;br&gt;
　　按反馈的方向分，正反馈（用户的行为倾向于指用户喜欢该物品）和负反馈（用户的行为倾向于指用户不喜欢该物品）&lt;br&gt;
　　有代表性的数据集：&lt;br&gt;
　　无上下文信息的隐性反馈数据集：每一条行为记录仅仅包含用户ID和物品ID。&lt;br&gt;
　　无上下文信息的显性反馈数据集：每一条记录包含用户ID、物品ID和用户对物品的评分。&lt;br&gt;
　　有上下文信息的隐性反馈数据集：每一条记录包含用户ID、物品ID和用户对物品产生行为的时间戳。&lt;br&gt;
　　有上下文信息的显性反馈数据集：每一条记录包含用户ID、物品ID、用户对物品的评分和评分行为发生的时间戳。&lt;/p&gt;
&lt;h2 id=&#34;用户活跃度和物品流行度的分布&#34;&gt;用户活跃度和物品流行度的分布
&lt;/h2&gt;$$f(x)=αx^k$$$$f_i(k)=a_ik^{β_i}$$$$f_u(k)=a_uk^{β_u}$$&lt;p&gt;
　　物品的流行度指对物品产生过行为的用户总数。
　　用户的活跃度为用户产生过行为的物品总数。&lt;/p&gt;
&lt;h2 id=&#34;用户活跃度和物品流行度的关系&#34;&gt;用户活跃度和物品流行度的关系
&lt;/h2&gt;&lt;p&gt;　　仅仅基于用户行为数据设计的推荐算法一般称为协同过滤算法。
　　基于邻域的方法（neighborhood-based）：基于用户的协同过滤算法（推荐和用户兴趣相似的其他用户喜欢的物品）、基于物品的协同过滤算法（推荐和他之前喜欢的物品相似的物品）
　　隐语义模型（latent factor model）
　　基于图的随机游走算法（random walk on graph）&lt;/p&gt;
&lt;h2 id=&#34;基于邻域的算法&#34;&gt;基于邻域的算法
&lt;/h2&gt;&lt;h3 id=&#34;基于用户的协同过滤算法&#34;&gt;基于用户的协同过滤算法
&lt;/h3&gt;&lt;h4 id=&#34;基础算法&#34;&gt;基础算法
&lt;/h4&gt;&lt;p&gt;　　步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;找到和目标用户兴趣相似的用户集合。&lt;/li&gt;
&lt;li&gt;找到这个集合中的用户喜欢的，且目标用户没有听说过的物品推荐给目标用户。
　　步骤1关键是计算两个用户的兴趣相似度。
　　利用行为的相似度计算兴趣相似度。Jaccard公式计算用户u和用户v的兴趣相似度。
$$w_{uv}=\frac{|{N(u)∩N(v)}|}{|{N(u)∪N(v)}|}$$
　　或者通过余弦相似度
$$w_{uv}=\frac{|{N(u)∩N(v)}}{|\sqrt{|{N(u)||N(v)}|}}$$
　　N(u)表示用户u曾经有过正反馈的物品集合，N(v)为用户曾经有过正反馈的物品集合。&lt;br&gt;
　　时间复杂度：O(|U|*|U|)
　　用户数很大时耗时，并且很多时候|N(u)∩N(v)|=0。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;改进算法&#34;&gt;改进算法
&lt;/h4&gt;$$w_uv = \frac{\sum i\epsilon N(u)∩N(v)\frac{1}{log1+|N(i)|}}{\sqrt{|N(u)||N(v)|}}$$&lt;p&gt;
　　该公式通过$\frac{1}{log1+|N(i)|}$惩罚了用户u和用户v共同兴趣列表中热门物品对他们相似度的影响。&lt;/p&gt;
&lt;h3 id=&#34;基于物品的协同过滤算法&#34;&gt;基于物品的协同过滤算法
&lt;/h3&gt;&lt;p&gt;　　ItemCF算法并不利用物品的内容属性计算物品之间的相似度，它主要通过分析用户的行为记录计算物品之间的相似度。该算法认为，物品A和物品B具有很大的相似度是因为喜欢物品A的用户大都也喜欢物品B。&lt;br&gt;
　　步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;计算物品之间的相似度&lt;/li&gt;
&lt;li&gt;根据物品的相似度和用户的历史行为给用户生成推荐列表
$$w_{ij}=\frac{|N(i)∩N(j)|}{|N(i)|}$$
　　|N(i)|是喜欢物品i的用户数，分子|N(i)∩N(j)|是同时喜欢物品i和物品j的用户数。
　　公式可理解为喜欢物品i的用户中有多少比例的用户也喜欢物品j。&lt;/li&gt;
&lt;/ol&gt;
$$w_{ij}=\frac{|N(i)∩N(j)|}{\sqrt{|N(i)||N(j)|}}$$&lt;p&gt;
　　该公式惩罚了物品j的权重，因此减轻了热门物品和很多物品相似的可能性。&lt;/p&gt;
&lt;p&gt;　　从定义可看出，在协同过滤中两个物品产生相似度是因为它们共同被很多用户喜欢，即每个用户都可以通过他们的历史兴趣列表给物品贡献相似度。&lt;/p&gt;
&lt;h4 id=&#34;用户活跃度对物品相似度的影响&#34;&gt;用户活跃度对物品相似度的影响
&lt;/h4&gt;$$w_uv = \frac{\sum u\epsilon N(i)∩N(j)\frac{1}{log1+|N(u)|}}{\sqrt{|N(i)||N(j)|}}$$&lt;ul&gt;
&lt;li&gt;物品相似度的归一化
$$w_{ij} = \frac{w_{ij}}{max w_{ij}}$$&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;usercf和itemcf对比&#34;&gt;UserCF和ItemCF对比
&lt;/h3&gt;&lt;p&gt;　　UserCF的推荐结果着重于反映和用户兴趣相似的小群体的热点，而ItemCF的推荐结果着重于维系用户的历史兴趣。换句话说，UserCF的推荐更社会化，反映了用户所在的小型兴趣群体中物品的热门程度，而ItemCF的推荐更加个性化，反映了用户自己的兴趣传承。&lt;/p&gt;
&lt;p&gt;　　UserCF使用场景：新闻推荐
　　ItemCF使用场景：图书、电子商务、电影网站&lt;/p&gt;
&lt;p&gt;　　在实际的互联网中，用户数目往往非常庞大，而在图书、电子商务网站中，物品的数目则是比较少的。此外，物品的相似度相对于用户的兴趣一般比较稳定，因此使用ItemCF是比较好的选择。当然，新闻网站是个例外，在那儿，物品的相似度变化很快，物品数目庞大，相反用户兴趣则相对固定（都是喜欢看热门的），所以新闻网站的个性化推荐使用UserCF算法的更多。&lt;/p&gt;
&lt;h2 id=&#34;隐语义模型&#34;&gt;隐语义模型
&lt;/h2&gt;&lt;h3 id=&#34;基础算法-1&#34;&gt;基础算法
&lt;/h3&gt;&lt;p&gt;　　思想：通过隐含特征（latent factor）联系用户兴趣和物品。
　　基于兴趣分类的方法大概需解决三个问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如何给物品进行分类？&lt;/li&gt;
&lt;li&gt;如何确定用户对哪些类的物品感兴趣，以及感兴趣的程度？&lt;/li&gt;
&lt;li&gt;对于一个给定的类，选择哪些属于这个类的物品推荐给用户，以及如何确定这些物品在一个类中的权重？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;　　隐含语义分析技术采取基于用户行为统计的自动聚类。
　　隐含语义分析技术从诞生到今天产生了很多著名模型和方法：pLSA、LDA、隐含类别模型（latent class model）、隐含主题模型（latent topic model）、矩阵分解（matrix factorization）。&lt;/p&gt;
&lt;h4 id=&#34;lfm&#34;&gt;LFM
&lt;/h4&gt;$$Preference(u,i) = r_{ui} = p_u^Tq_i = \sum_{f=1}^Fp_{u,k}q_{i,k}$$&lt;p&gt;
　　$p_{u,k}$和$q_{i,k}$是模型参数，$p_{u,k}$度量了用户u的兴趣和第k个隐类的关系，而$q_{i,k}$度量了第k个隐类和物品i之间的关系。&lt;br&gt;
　　这两个参数是从数据集中计算出来的。要计算这两个参数，需要一个训练集，对于每个用户u，训练集里都包含了用户u喜欢的物品和不感兴趣的物品，通过学习这个数据集，就可以获得上面的模型参数。&lt;/p&gt;
&lt;p&gt;　　推荐系统的用户行为分为显性反馈和隐性反馈。 LFM在显性反馈数据(也就是评分数据)上解决评分预测问题并达到了很好的精度。
隐性反馈数据集：只有正样本（用户喜欢什么物品），没有负样本（用户对什么物品不感兴趣）。
在隐性反馈数据集上应用LFM解决TopN推荐的第一个关键问题就是如何给每个用户生成负样本。&lt;/p&gt;
&lt;p&gt;生成负样本方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于一个用户，用他所有没有过行为的物品作为负样本。//负样本太多，正负样本数目相差悬殊，计算复杂度很高，结果精度差。&lt;/li&gt;
&lt;li&gt;对于一个用户，从他没有过行为的物品中均匀采样出一些物品作为负样本。&lt;/li&gt;
&lt;li&gt;对于一个用户，从他没有过行为的物品中采样出一些物品作为负样本，但采样时，保证每个用户的正负样本数目相当。&lt;/li&gt;
&lt;li&gt;对于一个用户，从他没有过行为的物品中采样出一些物品作为负样本，但采样时，偏重采样不热门的物品。
第三种好于第二种，第二种好于第四种。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对负样本采样时应遵循以下原则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对每个用户，要保证正负样本的平衡（数目相似）。&lt;/li&gt;
&lt;li&gt;对每个用户采样负样本时，要选取那些很热门，而用户却没有行为的物品。
一般认为，很热门而用户却没有行为更加代表用户对这个物品不感兴趣。因为对于冷门的物品，用户可能是没发现这个物品，所以谈不上是否感兴趣。
LFM模型在实际使用中有一个困难：它很难实现实时的推荐。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;lfm和基于领域的方法比较&#34;&gt;LFM和基于领域的方法比较
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;理论基础
LFM具有比较好的理论基础，它是一种学习方法，通过优化一个设定的指标建立最优的模型。基于邻域的方法更多的是一种基于统计的方法，并没有学习过程。&lt;/li&gt;
&lt;li&gt;离线计算的空间复杂度
用户相关表，则需要O(M*M)的空间，而对于物品相关表，则需要O(N*N)的空间。
LFM在建模过程中，如果是F个隐类，那么它需要的存储空间是O(F*(M+N))，这在M和N很大时可以很好地节省离线计算的内存。&lt;/li&gt;
&lt;li&gt;离线计算的时间复杂度
假设有M个用户、 N个物品、 K条用户对物品的行为记录。UserCF计算用户相关表的时间复杂度是O(N * (K/N)^2)，而ItemCF计算物品相关表的时间复杂度是O(M*(K/M)^2)。而对于LFM，如果用F个隐类，迭代S次，那么它的计算复杂度是O(K * F * S)。总体上没有质的差别。&lt;/li&gt;
&lt;li&gt;在线实时推荐
UserCF、ItemCF可，LFM不可。&lt;/li&gt;
&lt;li&gt;推荐解释
ItemCF解释很好，LFM无法解释。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;基于图的模型graph-based-model&#34;&gt;基于图的模型（graph-based model）
&lt;/h2&gt;&lt;h3 id=&#34;用户行为数据的二分图表示&#34;&gt;用户行为数据的二分图表示
&lt;/h3&gt;&lt;p&gt;很多研究者把基于邻域的模型也称为基于图的模型，因为基于邻域的模型可看做基于图的模型的简单形式。
二元组（u, i）表示用户u对物品i产生过行为。令G（V, E）表示用户物品二分图，其中$V = V_U∪V_1$由用户顶点集合$V_U$和物品顶点集合$V_1$组成。对于数据集中每一个二元组（u, i），图中都有一套对应的边e（$v_u$, $v_i$），其中$v_u\epsilon V_U$是用户u对应的顶点，$v_i\epsilon V_1$是物品i对应的顶点。
&lt;img src=&#34;https://hubojing.github.io/images/%e3%80%8a%e6%8e%a8%e8%8d%90%e7%b3%bb%e7%bb%9f%e5%ae%9e%e8%b7%b5%e3%80%8b%e7%ac%94%e8%ae%b0%e2%80%94%e2%80%94%e4%ba%8c%e5%88%86%e5%9b%be.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;用户物品二分图模型&#34;
	
	
&gt;
图中是一个简单的用户物品二分图模型，其中圆形节点代表用户，方形节点代表物品，圆形节点和方形节点之间的边代表用户对物品的行为。比如图中用户节点A和物品节点a、 b、 d相连，说明用户A对物品a、 b、 d产生过行为。&lt;/p&gt;
&lt;h3 id=&#34;基于图的推荐算法graph-based-model&#34;&gt;基于图的推荐算法（graph-based model）
&lt;/h3&gt;&lt;p&gt;可把基于领域的模型看做基于图的模型的简单形式。
相关性高的一对顶点一般具有如下特征：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;两个顶点之间有很多路径相连&lt;/li&gt;
&lt;li&gt;连接两个顶点之间的路径长度都比较短&lt;/li&gt;
&lt;li&gt;连接两个顶点之间的路径不会经过出度比较大的顶点&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;基于随机游走的personalrank算法&#34;&gt;基于随机游走的PersonalRank算法
&lt;/h4&gt;&lt;p&gt;假设要给用户u进行个性化推荐，可以从用户u对应的节点vu开始在用户物品二分图上进行随机游走。游走到任何一个节点时，首先按照概率α决定是继续游走，还是停止这次游走并从vu节点开始重新游走。如果决定继续游走，那么就从当前节点指向的节点中按照均匀分布随机选择一个节点作为游走下次经过的节点。这样，经过很多次随机游走后，每个物品节点被访问到的概率会收敛到一个数。最终的推荐列表中物品的权重就是物品节点的访问概率。&lt;/p&gt;
&lt;p&gt;缺点：复杂度高，耗时&lt;/p&gt;
&lt;h1 id=&#34;第三章-冷启动问题&#34;&gt;第三章 冷启动问题
&lt;/h1&gt;&lt;p&gt;冷启动问题（cold start）分三类：
用户冷启动（新用户到来）、物品冷启动（新物品到来）、系统冷启动（新开发网站，没有用户和用户行为，只有物品信息）
解决方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;提供非个性化推荐：比如热门排行榜&lt;/li&gt;
&lt;li&gt;利用用户注册时提供的年龄、性别等数据做粗粒度的个性化&lt;/li&gt;
&lt;li&gt;利用用户社交网络账号（需用户授权），导入用户好友信息，给用户推荐好友喜欢的物品&lt;/li&gt;
&lt;li&gt;要求用户登录时对物品进行反馈，收集兴趣信息从而推荐和物品相似的物品&lt;/li&gt;
&lt;li&gt;新加入的物品利用内容信息，将它们推荐给喜欢过相似物品的用户&lt;/li&gt;
&lt;li&gt;系统冷启动引入专家知识&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;用户注册信息分3种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;人口统计学信息：年龄、性别、职业、民族、学历和居住地&lt;/li&gt;
&lt;li&gt;用户兴趣描述&lt;/li&gt;
&lt;li&gt;其它网站导入用户站外行为数据&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;基于人口统计学特征的推荐系统其典型代表是Bruce Krulwich开发的Lifestyle Finder。&lt;/p&gt;
&lt;p&gt;基于注册信息的个性化推荐流程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;获取用户的注册信息；&lt;/li&gt;
&lt;li&gt;根据用户的注册信息对用户分类；&lt;/li&gt;
&lt;li&gt;给用户推荐他所属分类中用户喜欢的物品。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;有两个推荐系统数据集包含了人口统计学信息，BookCrossing数据集和Last.fm数据集。
BookCrossing数据集包含用户对图书的行为信息，包含3个文件。
BX-Users.csv，包含用户的ID、位置和年龄。
BX-Books.csv，包含图书的ISBN、标题、作者、发表年代、出版社和缩略。
BX-Book-Ratings.csv，包含用户对图书的评分信息。&lt;/p&gt;
&lt;p&gt;ItemCF算法存在严重的冷启动问题。&lt;/p&gt;
$$d_i = {(e_1, w_1),(e_2,w_2),...}$$&lt;p&gt;
其中$e_i$是关键词，$w_i$是关键词权重。
若物品是文本，可用信息检索领域著名的TF-IDF公式计算词的权重：&lt;/p&gt;
&lt;p&gt;&amp;hellip;先让我更新一下友链&lt;/p&gt;</description>
        </item>
        <item>
        <title>推荐那些事儿</title>
        <link>https://hubojing.github.io/b9shtjnk/</link>
        <pubDate>Wed, 17 Jul 2019 14:35:46 +0000</pubDate>
        
        <guid>https://hubojing.github.io/b9shtjnk/</guid>
        <description>&lt;div align=&#34;left&#34;&gt;
&lt;img src=&#34;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1565459219422&amp;di=24d422892e8989d6bd18a2a93aae8230&amp;imgtype=0&amp;src=http%3A%2F%2Fpic.51yuansu.com%2Fpic3%2Fcover%2F03%2F05%2F94%2F5b2c9f2655ac0_610.jpg&#34; width=&#34;300&#34; height=&#34;180&#34; style=&#34;float:right;&#34;/&gt;
&lt;p&gt;　　&lt;strong&gt;记得比较乱，自用。&lt;/strong&gt;&lt;/p&gt;
 &lt;/div&gt;
&lt;h1 id=&#34;poi推荐20191110&#34;&gt;POI推荐——2019.11.10
&lt;/h1&gt;&lt;p&gt;兴趣点预测是预测用户将要访问的兴趣点(其中包含已经访问过的兴趣点) ，兴趣点推荐是将用户没有访问过的兴趣点推荐给用户。
including next POI recommendation, timeaware POI recommendation and out-of-town POI recommendation.&lt;/p&gt;
&lt;p&gt;Matrix Factorization (MF), Context Embedding (CE) and Pairwise Ranking (PR)
MF based methods such as GeoMF and RankGeoFM exhibit superior performance on POI recommendation.&lt;/p&gt;
&lt;p&gt;根据check-in行为加入了社交因素（又可分为朋友、评论、图片）、地理因素（空间聚类现象而导致的地理影响、幂律分布、核密度估计）
朋友：社交关系中的朋友，位置上的朋友和邻居层面的朋友、用户信任关系
时序 位置变化的序列性&lt;/p&gt;
&lt;p&gt;马尔科夫链(Markov chain)
个性化马尔科夫链(Factorizing Personalized Markov Chain, FPMC)
张量分解(Tensor Factorization, TF)
RNN(Recurrent Neural Networks
长短时记忆循环神经网络(Long-Short Memory recurrent neural networks, LSTM)
经典推荐算法：
概率矩阵分解模型（Probabilistic Matrix Factorization, PMF）
SoRec(Social Recommendation using probabilistic matrix factorization)
TrustMF(Social Collaborative Filtering by Trust)
TrustSVD(Social Collaborative Filtering by Trust with SVD)&lt;/p&gt;
&lt;p&gt;PMF 利用用户对 POI 的历史评分数据；SoＲec 利用用户社交关系和兴趣点的历史评分数据；Trust MF、Trust SVD 利用用户信任关系和 POI 的历史评分数据。
POI-LSTM模型（[1]	王立, 张谧. 基于LSTM的POI个性化推荐框架[J]. 计算机系统应用, 2018,27(12):56-61.）
单纯的 LSTM 模型只能对用户的行为序列进行建模, 将用户访问过的地点信息输入
到网络中, 只能捕捉到用户的访问地点兴趣信息, 不加入用户的历史评论信息就不能精细描述用户的兴趣变化, 同时也不能接受用户好友关系对于用户选择的影
响.&lt;/p&gt;
&lt;p&gt;狄利克雷分配(Latent
Dirichlet  Allocation，LDA)主题模型&lt;/p&gt;
&lt;h1 id=&#34;lbsn基于位置的社交网络20190721&#34;&gt;LBSN基于位置的社交网络——2019.07.21
&lt;/h1&gt;&lt;p&gt;签到(check-in)：用户上传自身位置到社交网站的行为。
每一个签到的位置称为一个兴趣点POI(Point of Interest)。&lt;/p&gt;
&lt;p&gt;对签到信息聚类，对用户历史轨迹进行机器学习，可预测用户未来的轨迹路线。
传统研究模型采用k-means或k-medoids聚类方法将数据划分为k个簇集，通过计算对象之间的相似度进行聚类。&lt;/p&gt;
&lt;p&gt;传统在线社交网络(OSN, Online Social Network)。
LBS(Location Based Service),基于位置的服务。
LBSN(Location-based Social Network)，基于位置的社会网络。
对于不同的LBSN网络，不同的推荐系统使用了不同的推荐算法，常见的推荐算法包括：协同过滤算法、基于内容的推荐算法、基于位置的推荐算法等。&lt;/p&gt;
&lt;h1 id=&#34;协同过滤算法collaborative-filtering-cf&#34;&gt;协同过滤算法(collaborative filtering, CF)
&lt;/h1&gt;&lt;h2 id=&#34;基于memory-based基于记忆基于content-based基于内容基于邻域&#34;&gt;基于Memory-based(基于记忆)/基于Content-based基于内容/基于邻域
&lt;/h2&gt;&lt;p&gt;又可分为Item-based推荐算法和User-based推荐算法，计算用户和用户之间的相似度(User-based)，商品和商品之间的相似度(Item-based)
Item-based推荐算法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输入item-user矩阵&lt;/li&gt;
&lt;li&gt;求item-item相似度 （不同相似度度量：person系数、曼哈顿距离、余弦值、欧几里得距离）&lt;/li&gt;
&lt;li&gt;根据相似度求评分&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;User-based推荐算法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输入item-user矩阵&lt;/li&gt;
&lt;li&gt;求user-user相似度（不同相似度度量：person系数、曼哈顿距离、余弦值、欧几里得距离）&lt;/li&gt;
&lt;li&gt;根据相似度求评分&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;基于model-based基于模型&#34;&gt;基于Model-based(基于模型)
&lt;/h2&gt;&lt;p&gt;分解模型算法：如奇异值分解(Singular Value Decomposition)模型算法
基于矩阵分解的协同过滤算法（简称矩阵分解推荐方法）
矩阵分解(Matrix Factorization, MF)算法：它将用户–兴趣点矩阵分解成两个或者多个低维矩阵的乘积实现维数的规约,  用低维空间数据研究高维数据的性质,主要包括正则矩阵分解、非负矩阵分解和概率矩阵分解等方法。
该方法仅仅利用评分信息，将用户对物品的评分信息用矩阵的形式进行表示; 然后将评分矩阵分解为低维的用户特征矩阵和物品特征矩阵，利用用户与物品的向量内积来表示用户对物品的喜好程度，进而构建出基于矩阵分解的推荐方法。然而，由于评分矩阵的高稀疏和不均匀分布等特点，导致仅仅利用评分信息进行推荐带来的推荐性能低、冷启动等问题。&lt;/p&gt;
&lt;p&gt;基于图模型的推荐算法：如贝叶斯网络(Bayesian Network)模型推荐算法
决策树(Decision Tree)模型推荐算法
图聚类(Graph Clustering)模型推荐算法&lt;/p&gt;
&lt;p&gt;CF面临的问题：数据稀疏&lt;/p&gt;
&lt;h3 id=&#34;基于关联规则的推荐算法&#34;&gt;基于关联规则的推荐算法
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Apriori算法&lt;/li&gt;
&lt;li&gt;FPGrowth算法&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;聚类&#34;&gt;聚类
&lt;/h3&gt;&lt;p&gt;K-Means等&lt;/p&gt;
&lt;h3 id=&#34;分类&#34;&gt;分类
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;贝叶斯分类器&lt;/li&gt;
&lt;li&gt;逻辑回归&lt;/li&gt;
&lt;li&gt;KNN&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;回归&#34;&gt;回归
&lt;/h3&gt;&lt;h3 id=&#34;隐语义&#34;&gt;隐语义
&lt;/h3&gt;&lt;p&gt;SVD
SVD++
TrustSVD(加入社会化信任机制)&lt;/p&gt;
&lt;h2 id=&#34;神经网络&#34;&gt;神经网络
&lt;/h2&gt;&lt;h2 id=&#34;基于混合的推荐算法&#34;&gt;基于混合的推荐算法
&lt;/h2&gt;&lt;p&gt;常用混合思路：加权、特征组合、层叠、变换等&lt;/p&gt;
&lt;h1 id=&#34;基于位置的推荐算法&#34;&gt;基于位置的推荐算法
&lt;/h1&gt;&lt;h1 id=&#34;lbsn用户行为预测&#34;&gt;LBSN用户行为预测
&lt;/h1&gt;&lt;h2 id=&#34;基于用户个人的数据&#34;&gt;基于用户个人的数据
&lt;/h2&gt;&lt;p&gt;只关注用户的历史移动轨迹来预测用户下一个位置。&lt;/p&gt;
&lt;h2 id=&#34;基于所有用户产生的数据&#34;&gt;基于所有用户产生的数据
&lt;/h2&gt;&lt;p&gt;采用概率分布模型的方法预测下一个位置。&lt;/p&gt;
&lt;h2 id=&#34;基于前两种数据的结合&#34;&gt;基于前两种数据的结合
&lt;/h2&gt;&lt;h1 id=&#34;参考资料&#34;&gt;参考资料
&lt;/h1&gt;&lt;p&gt;罗维佳.基于LBSN的个性化推荐技术研究 2016&lt;/p&gt;</description>
        </item>
        
    </channel>
</rss>
