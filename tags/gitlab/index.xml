<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>GitLab on 靖待</title>
        <link>https://hubojing.github.io/tags/gitlab/</link>
        <description>Recent content in GitLab on 靖待</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>靖待</copyright>
        <lastBuildDate>Wed, 08 Jun 2022 10:19:16 +0000</lastBuildDate><atom:link href="https://hubojing.github.io/tags/gitlab/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>2022年最新教程！Hexo &#43; GitLab搭建个人博客详细教程</title>
        <link>https://hubojing.github.io/rhvdojbx/</link>
        <pubDate>Wed, 08 Jun 2022 10:19:16 +0000</pubDate>
        
        <guid>https://hubojing.github.io/rhvdojbx/</guid>
        <description>&lt;div align=&#34;left&#34;&gt;
&lt;img src=&#34;\images\Hexo+Gitlab.png&#34; width=&#34;300&#34; height=&#34;180&#34; style=&#34;float:right;&#34;/&gt;
&lt;p&gt;　　&lt;strong&gt;不是标题党，我自己刚写的，保证最新。（2022年6月）&lt;/strong&gt;&lt;/p&gt;
 &lt;/div&gt;
&lt;h1 id=&#34;前言可不看&#34;&gt;前言（可不看）
&lt;/h1&gt;&lt;p&gt;　　以前生活博客放在Gitee上，每次命令部署后还得登录网页管理端手动更新一下Page服务才能完成一次部署，着实很麻烦。&lt;del&gt;懒人要贯彻到底，&lt;del&gt;为追求效率，弃之转GitLab。
　　幸好生活博客都是我&lt;/del&gt;静悄悄&lt;/del&gt;自娱自乐写写东西，没推广，百度也搜不到，基本没人看，损失的点击数不心疼哈哈哈。&lt;/p&gt;
&lt;p&gt;　　但是，全网我竟然搜不到一篇像样的GitLab搭建博客教程（很多都是三四年前的，过时了，都不教GitLab的runners如何自建的。），反观Github搭建博客教程可是满天飞！&lt;/p&gt;
&lt;p&gt;　　是&lt;strong&gt;GitLab&lt;/strong&gt;，不是&lt;strong&gt;GitHub&lt;/strong&gt;，看错请在下方评论哈哈哈。&lt;/p&gt;
&lt;p&gt;　　不能忍，我只好自己写了。（草稿箱里这几个月堆积的其它文章都还没发&amp;hellip;&amp;hellip;属实是和博客纠纠缠缠多少年）&lt;/p&gt;
&lt;h1 id=&#34;hexo&#34;&gt;Hexo
&lt;/h1&gt;&lt;p&gt;　　前置条件：安装Node.js和Git。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;npm install hexo-cli -g
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;hexo init blog
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; blog
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;npm install
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;hexo server
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;　　本地能运行http://localhost:4000/ ，ok。&lt;/p&gt;
&lt;h1 id=&#34;gitlab&#34;&gt;GitLab
&lt;/h1&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://hexo.io/docs/gitlab-pages&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;官网指引&lt;/a&gt;
　　&lt;strong&gt;看英文版！&lt;/strong&gt;
　　&lt;strong&gt;看英文版！&lt;/strong&gt;
　　&lt;strong&gt;看英文版！&lt;/strong&gt;
　　重要的事情说三遍！我中途看了一下中文版，被坑了好几次。那个中文网的配置文件不对，部署疯狂报错！！！（中英文文档版本竟然不一致，我也是醉了&amp;hellip;）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;GitLab账户注册。&lt;/li&gt;
&lt;li&gt;创建一个username.github.io的项目，或者把已有项目更名为此，可以选择Private。&lt;/li&gt;
&lt;li&gt;Settings &amp;gt; CI/CD &amp;gt; Runners &amp;gt; Enable，开启Runners。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;　　重点来了！！！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Pipeline failing? To keep GitLab spam and abuse free we ask that you verify your identity.Until then, shared runners will be unavailable. Validate your account or use your own runners.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;　　GitLab要求上传身份证（经评论区指正，是信用卡号）才给用shared runners。Validate是不可能validate的。现有的教程到这里都是直接用共享runners，我猜前几年可能GitLab无需验证这一步吧。&lt;/p&gt;
&lt;p&gt;　　既然还有自建Runners这种方法当然要试一试了。&lt;/p&gt;
&lt;h2 id=&#34;gitlab自建runners&#34;&gt;GitLab自建Runners
&lt;/h2&gt;&lt;p&gt;　　首先，这个东西是干什么用的呢？Github部署博客时，是在本地&lt;code&gt;hexo g&lt;/code&gt;生成好静态页面，然后把静态页面&lt;code&gt;hexo d&lt;/code&gt;部署上去。而GitLab不同，它要把所有源文件push到项目中，当push后，GitLab会自动调用一个叫runners的玩意儿帮项目自动生成页面并部署。它本身是个优化的东西，叫CI/CD，也就是持续集成、持续交付和持续部署，用它可以很好地实现自动化开发。&lt;/p&gt;
&lt;p&gt;　　介绍完毕，开始安装。&lt;/p&gt;
&lt;h3 id=&#34;安装&#34;&gt;安装
&lt;/h3&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://docs.gitlab.com/runner/install/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://docs.gitlab.com/runner/install/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　以windows为例。
&lt;a class=&#34;link&#34; href=&#34;https://docs.gitlab.com/runner/install/windows.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://docs.gitlab.com/runner/install/windows.html&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建一个文件夹，如E:\GitLab-Runner。&lt;/li&gt;
&lt;li&gt;下载二进制文件。&lt;/li&gt;
&lt;li&gt;限制文件夹写权限。(我没特地设置)&lt;/li&gt;
&lt;li&gt;打开cmd。&lt;/li&gt;
&lt;li&gt;注册一个runner。
　　怎么注册呢？这里也是一个坑巨多的地方。想建博客的小伙伴们就别想那么多了，跟着我一步步走就完事了。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;注册runner&#34;&gt;注册Runner
&lt;/h3&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://docs.gitlab.com/runner/register/index.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://docs.gitlab.com/runner/register/index.html&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在刚才下载好文件的文件夹中打开cmd运行&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cmd&#34; data-lang=&#34;cmd&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;.\gitlab-runner.exe register
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;输入URL。这个URL在哪找呢？Settings-CI/CD Settings-Runners-Specific runners，里面就有URL。一般是https://gitlab.com/ 。&lt;/li&gt;
&lt;li&gt;输入token。&lt;/li&gt;
&lt;li&gt;输入描述。可不写。&lt;/li&gt;
&lt;li&gt;输入tag。最好不写。否则还得后面还得去设置untag。&lt;/li&gt;
&lt;li&gt;输入备注。可不写。&lt;/li&gt;
&lt;li&gt;输入runner执行器。我写的shell。结束注册。如果是docker，后面还要输入默认image。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;　　怎么验证我的runner是好的呢？
　　Settings-Runners-Specific runners下方出现刚才建立的Runner，并且前面有个绿色的圆圈。如果是感叹号，证明上面的过程出现问题。&lt;/p&gt;
&lt;h3 id=&#34;配置&#34;&gt;配置
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;使用&lt;code&gt;node --version&lt;/code&gt;检查Node.js版本，记录下来（比如v16.y.z）。&lt;/li&gt;
&lt;li&gt;在项目中增加&lt;code&gt;.gitlab-ci.yml&lt;/code&gt;文件，其中将&lt;code&gt;16&lt;/code&gt;替换为自己Node.js的版本：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;node:16-alpine&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cache&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;paths&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;node_modules/&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;before_script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;npm install hexo-cli -g&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;npm install&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;pages&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;npm run build&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;artifacts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;paths&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;将hexo文件夹push到GitLab。一旦push完成，GitLab自动部署开始。&lt;/li&gt;
&lt;li&gt;当GitLib CI成功部署，username.gitlab.io就能运行了。&lt;/li&gt;
&lt;li&gt;（可选）如果希望检查生成的站点资产(html、css、js等)，可看https://docs.gitlab.com/ee/ci/pipelines/job_artifacts.html 。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;　　注意，网站看起来似乎能运行了，结果把GitLab账号退出后再点击网站就看不到了，而是转到GitLab要登录。这是因为项目本身是Private的，需要把Page页的权限设置为Public！
　　Settings-&amp;gt;General-&amp;gt;Visibility, project features, permissions，仓库权限保持private，下面的Pages选项改为Everyone。&lt;/p&gt;
&lt;h1 id=&#34;一些报错解决方法&#34;&gt;一些报错解决方法
&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;GitLab push报错。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; existing_repo
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git init
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git remote add origin https://gitlab.com/username/username.gitlab.io.git
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git branch -M main
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git push -uf origin main
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;　　报错：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;! [remote rejected] main -&amp;gt; main (pre-receive hook declined)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;　　这是因为main分支默认是protected，需要在Settings-Repository-Protected branch，修改权限。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;部署时runner报错。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;ERROR: Job failed (system failure): prepare environment: failed to start process: exec: &amp;ldquo;pwsh&amp;rdquo;: executable file not found in %PATH%.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;　　转到GitLab运行程序的安装目录，如E:\GitLab-Runner。记事本打开config.toml文件，并用powershell替换pwsh，如下所示：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[[runners]]
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  shell = &amp;#34;pwsh&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;改为：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;shell = &amp;#34;powershell&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h1 id=&#34;后记&#34;&gt;后记
&lt;/h1&gt;&lt;p&gt;　　换到GitLab部署后，总体效率是不错，一次push就完事儿，还把源文件备份的工作一道给解决了，而不是像Github部署那样，项目内只存页面。而且page打开速度似乎也比Gitee快不少。缺点就是GitLab自动部署比自己手动&lt;code&gt;hexo d&lt;/code&gt;的速度要慢。
　　把生活博客切换修好花了我大半天时间，踩了好多坑（之前没咋用过GitLab）。干脆把过程整理出来造福有需要的人吧。知识共享、开源精神yyds！
　　(难得我还为此博文专门做了一张封面图，虽然很丑)&lt;/p&gt;</description>
        </item>
        
    </channel>
</rss>
