<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>3D on 靖待</title>
        <link>https://hubojing.github.io/tags/3d/</link>
        <description>Recent content in 3D on 靖待</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>靖待</copyright>
        <lastBuildDate>Thu, 31 Aug 2017 23:53:44 +0000</lastBuildDate><atom:link href="https://hubojing.github.io/tags/3d/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>三维坐标旋转</title>
        <link>https://hubojing.github.io/yqoektny/</link>
        <pubDate>Thu, 31 Aug 2017 23:53:44 +0000</pubDate>
        
        <guid>https://hubojing.github.io/yqoektny/</guid>
        <description>&lt;div align=&#34;left&#34;&gt;
&lt;img src=&#34;https://ss0.bdstatic.com/94oJfD_bAAcT8t7mm9GUKT-xh_/timg?image&amp;quality=100&amp;size=b4000_4000&amp;sec=1504196242&amp;di=148a19814e3d8e2bc96751304edf53ba&amp;src=http://a4.att.hudong.com/13/71/01300542856671145949714084001_s.jpg&#34; width=&#34;300&#34; height=&#34;180&#34; style=&#34;float:right;&#34;/&gt;
 　　
 　　
　　**由上一篇引发的续问。　**　
 　　
　　
　　
 &lt;/div&gt;
&lt;p&gt;其实上一篇的想法都是为了这个问题进行铺垫：
已知任意三维坐标系中一条线上两点坐标AB，及该线绕A点任意方向旋转后B&amp;rsquo;的坐标，求B点经过怎样的变换（如先绕x轴旋转多少度，再绕y轴转多少度，再绕z轴绕多少度）得到B&amp;rsquo;。&lt;/p&gt;
&lt;p&gt;弄清楚这个问题前，首先需要声明一点：
&lt;strong&gt;三维空间中，旋转角不能单纯的认为是某点关于x、y、z轴的旋转角度的线性叠加。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;认清这一点后，就应老实放弃向每个平面做投影算旋转角的错误方法。&lt;/p&gt;
&lt;p&gt;旋转说穿了是矩阵的相乘。&lt;/p&gt;
&lt;p&gt;然后从特殊情况入手，再从特殊到一般。&lt;/p&gt;
&lt;p&gt;特殊情况：
1.旋转轴是x轴
2.旋转轴是y轴
3.旋转轴是z轴&lt;/p&gt;
&lt;p&gt;一般情况：
旋转轴是任意直线&lt;/p&gt;
&lt;p&gt;推导过程网上很多资料，其中，绕x、y、z轴的公式见&lt;a class=&#34;link&#34; href=&#34;http://blog.miskcoo.com/2016/12/rotation-in-3d-space&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;三维空间中的旋转&lt;/a&gt; ，markdown写数学公式太麻烦了。&lt;/p&gt;
&lt;p&gt;旋转轴是任意直线，参考&lt;a class=&#34;link&#34; href=&#34;http://blog.sina.cn/dpool/blog/s/blog_6541e59a0101kukr.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;三维旋转矩阵的计算&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;回到开头问题，既然已知B和B’，和A三点组成一个面，求出它的法向量，结合BB&amp;rsquo;中垂线，可算出该点的旋转轴向量。将该向量平移到原点处，再使用欧拉角计算旋转向量，进而得到所需要的x、y、z轴旋转角度（这是有顺序的）。这种方法得到的角度如果旋转顺序不同，则得到的解不同。当然最后别忘了反平移回去。
四元数的形式看起来简单些，可惜四元数里的角度不是所希望的关于x、y、z轴的三个角度值。&lt;/p&gt;</description>
        </item>
        <item>
        <title>三维坐标系变换</title>
        <link>https://hubojing.github.io/fkeliz4b/</link>
        <pubDate>Tue, 29 Aug 2017 22:23:54 +0000</pubDate>
        
        <guid>https://hubojing.github.io/fkeliz4b/</guid>
        <description>&lt;div align=&#34;left&#34;&gt;
&lt;img src=&#34;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1504032008394&amp;di=e99e963bf5137db65c21d19b5589cb26&amp;imgtype=0&amp;src=http%3A%2F%2Fpic.58pic.com%2F58pic%2F16%2F55%2F89%2F38258PICNZn_1024.jpg&#34; width=&#34;300&#34; height=&#34;180&#34; style=&#34;float:right;&#34;/&gt;
 &lt;/div&gt;
&lt;p&gt;　　**关于三维坐标变换的一些思考。　**
　　&lt;strong&gt;从两条相交直线说起。&lt;/strong&gt;
　　
　　&lt;/p&gt;
&lt;p&gt;从最简单的情况入手，求空间两条相交直线AB、BC的夹角，AB和BC相交于B点，已知ABC三点三维坐标。
假设两条直线向量分别为a(x1,y1,z1),b(x2,y2,z2),根据公式cosα=a·b/(|a|*|b|)=(x1x2+y1y2+z1z2)/[√(x1^2+y1^2+z1^2)+√(x2^2+y2^2+z2^2)] 可直接求得。&lt;/p&gt;
&lt;p&gt;情况变一变：
以此两条直线中的某一条为基准（为z&amp;rsquo;轴），求另一条直线关于基准线的x&amp;rsquo;、y&amp;rsquo;、z&amp;rsquo;轴（新的基准坐标系）夹角。&lt;/p&gt;
&lt;p&gt;如果不用矩阵的做法，求解很复杂：
以AB为新的坐标系Z&amp;rsquo;轴为例，O为原坐标系原点。
B&amp;rsquo;(0,0,0)，可求AB点距离s，则A&amp;rsquo;(0,0,s)。这还是比较容易的，关键是求C&amp;rsquo;坐标。
首先要求z轴和AB之间的各种角度，想象从Z轴先延x轴平移绕x轴旋转，再延y轴平移绕y轴旋转，最后延z轴平移绕z轴旋转。同理，C点做同类运动，得到C’。
千辛万苦得到C&amp;rsquo;还没完，再将B’C’分别向x&amp;rsquo;o&amp;rsquo;y&amp;rsquo;、y&amp;rsquo;o&amp;rsquo;z&amp;rsquo;、z&amp;rsquo;o&amp;rsquo;x&amp;rsquo;面投影，求关于基准线的夹角。方可算出所求。&lt;/p&gt;
&lt;p&gt;很明显，这种方法显然不适用在3D中。
这个问题其实等价于将世界坐标系转换为物体坐标系。,矩阵的作用就发挥广大。&lt;/p&gt;
&lt;p&gt;令原坐标系为M=(i,j,k)T（转置），变换后N=(i&amp;rsquo;,j&amp;rsquo;,k&amp;rsquo;)T，i=(1,0,0),j=(0,1,0),k=(0,0,1)
原坐标系中一点P为(x,y,z)，则P&amp;rsquo;=((x,y,z)-O&amp;rsquo;)N^(-1)   N^(-1)指N的逆矩阵  (若N为正交矩阵，无需求逆矩阵，求转置矩阵即可。)&lt;/p&gt;
&lt;p&gt;推导：∵P=O+(x,y,z)M=O&amp;rsquo;+(x&amp;rsquo;,y&amp;rsquo;,z&amp;rsquo;)N
∴(x&amp;rsquo;,y&amp;rsquo;,z&amp;rsquo;)=((x,y,z)M+(O-O&amp;rsquo;))N^(-1)
此时O’=(0，0，0),并带入M，则上式得证。&lt;/p&gt;
&lt;p&gt;综上所述，讨论的情况实质就是进行了坐标系的转换。目的是求C&amp;rsquo;坐标，假设A(a1,b1,c1),B(a2,b2,c2),C(a3,b3,c3),那么根据公式C’=((a3,b3,c3)-(a2,b2,c2))N^(-1)，问题就转化为求N。记N=MK，K=M^(-1)N，也就是说，K是将i,j,k装换为i&amp;rsquo;,k&amp;rsquo;,j&amp;rsquo;的变换矩阵。
N^(-1)=(MK)^(-1)=K^(-1)M^(-1)
∴(x&amp;rsquo;,y&amp;rsquo;,z&amp;rsquo;)=((x,y,z)M+(O-O&amp;rsquo;))K^(-1)M^(-1)
=((x,y,z)+(-O&amp;rsquo;))K^(-1)  K=N&lt;/p&gt;
&lt;p&gt;怎么求K呢？&lt;/p&gt;
&lt;p&gt;可以参考这篇文章&lt;a class=&#34;link&#34; href=&#34;http://blog.csdn.net/jc_laoshu/article/details/69657579&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;图形学1-三维坐标系间的变换矩阵推导&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;看似也挺麻烦，其实推导占据了大量篇幅，真正使用时直接套就好了。&lt;/p&gt;</description>
        </item>
        <item>
        <title>HOOPS记录</title>
        <link>https://hubojing.github.io/e8pmxuyc/</link>
        <pubDate>Sun, 25 Jun 2017 22:54:44 +0000</pubDate>
        
        <guid>https://hubojing.github.io/e8pmxuyc/</guid>
        <description>&lt;div align=&#34;left&#34;&gt;
&lt;img src=&#34;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=2467623496,1926622754&amp;fm=15&amp;gp=0.jpg&#34; width=&#34;300&#34; height=&#34;180&#34; style=&#34;float:right;&#34;/&gt;
&lt;p&gt;&lt;strong&gt;HOOPS初学概念小记（自用笔记）。&lt;/strong&gt;
　　&lt;/p&gt;
 &lt;/div&gt;
&lt;h1 id=&#34;hoops-3d-application-framework-hoops3daf&#34;&gt;HOOPS 3D Application Framework (HOOPS/3dAF)
&lt;/h1&gt;&lt;p&gt;官网描述
With HOOPS Visualize, you can rapidly produce eye-popping graphics across both mobile and desktop platforms.&lt;/p&gt;
&lt;p&gt;At its core, HOOPS Visualize provides a flexible, hierarchical scene management engine capable of handling a range of graphics entities, together with a sophisticated graphics pipeline and high-performance graphics and interaction handling algorithms. It also delivers advanced capabilities to accelerate your application development, including an animation engine, clash detection, multi-plane sectioning, and large model visualization.&lt;/p&gt;
&lt;h1 id=&#34;hoops-基本图元和属性支持&#34;&gt;HOOPS 基本图元和属性支持
&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;几 何&lt;/p&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Images, Unicode Text, Points, Lines, Polygons, Polylines, Polycylinders, NURBS curves, NURBS surfaces, Arcs, Ellipses, Circles, Tristrips, Trifans, Indexed Facesets, Cutting Planes, Capping Geometry&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;几何属性
Color, Transparency, Textures, Visibility, Patterns (Facet,edge 和 Line), Color Ramps, Lighting Interpolation, Selectability
渲染属性
Shaded, Analytic Hidden Line, Wireframe,Color Maps, Various Color Ramping Algorithms, Window Background Coloring&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;edges包含polygons,shells,meshes.
faces包含shells和meshes.
markers 单独的点.&lt;/p&gt;
&lt;p&gt;标记marker&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;可作为注释来使用&lt;/p&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;当放大和缩小时标记的大小是不变的&lt;/li&gt;
&lt;li&gt;标记的大小是朝向相机的，它并不旋转&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;hoops-mvo--mvo分别是modelviewoperator的缩写&#34;&gt;HOOPS MVO  （MVO分别是Model、View、Operator的缩写）
&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;段结构&lt;/p&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;HDB&lt;/li&gt;
&lt;li&gt;HBaseModel：处理在包含库下的段&lt;/li&gt;
&lt;li&gt;HBaseView：处理在驱动段下的段和实例&lt;/li&gt;
&lt;li&gt;HbaseOperator：处理图形用户界面/事件循环
· 相机操作
· 几何对象操作
· 选择&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;3d应用程序中经常用到的函数&#34;&gt;3D应用程序中经常用到的函数
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;保存应用程序数据&lt;/li&gt;
&lt;li&gt;绘制应用程序数据&lt;/li&gt;
&lt;li&gt;管理应用程序数据&lt;/li&gt;
&lt;li&gt;相机&lt;/li&gt;
&lt;li&gt;选择&lt;/li&gt;
&lt;li&gt;坐标&lt;/li&gt;
&lt;li&gt;查询&lt;/li&gt;
&lt;li&gt;驱动器设置&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;shell官网描述&#34;&gt;shell官网描述
&lt;/h1&gt;&lt;p&gt;3D applications typically represent 3D objects with an “indexed face set” or “polygon-point mesh”. In Visualize, such primitives are called ‘shells’. A shell defines the boundary surface of an object in 3D using a set of planar polygons. Polygons can be multi-sided and can include holes. A shell is defined as an array of vertices (3D points) and an array of indices into the vertex array that define each polygonal face.&lt;/p&gt;
&lt;p&gt;HOOPS Visualize supports a wide range of advanced functionality relating to shells, including the ability to select, highlight, and modify individual sub-entities (faces, edges, and vertices). Attributes such as normals, colors, and texture coordinates can also be set at the sub-entity level to enable a variety of complex shading and display.&lt;/p&gt;
&lt;p&gt;Shell   一系列连通的Face / Wire的集合。线、面的集合，能位于实体外，也能在内部形成空洞。一个体含一个悬挂面，一个体内嵌许多和外表面相连的面都称为shell。&lt;/p&gt;
&lt;h2 id=&#34;shell-attributes属性&#34;&gt;shell attributes属性
&lt;/h2&gt;&lt;p&gt;1.Vertex markers
2.Silhouette（外表面）/perimeter/hard/adjacent edges
3.Cut edges/faces
4.Attributes on subparts
5.Smooth shading
6.Advanced rendering&lt;/p&gt;
&lt;h1 id=&#34;selection官网描述&#34;&gt;selection官网描述
&lt;/h1&gt;&lt;p&gt;The Visualize libraries provide multiple operations for selection and several advanced highlighting techniques.&lt;/p&gt;
&lt;p&gt;Selection&lt;/p&gt;
&lt;p&gt;Control over what is targeted for selection is configurable:&lt;/p&gt;
&lt;p&gt;Segments in the scene graph can be marked as available for selection
The selection level can be specified – entity, geometry, segment, or segment tree. Selection of individual vertices, edges and faces can be configured
The number of selected items to search for is configurable
The selection proximity can be used to select the nearest item on screen within a screen-based tolerance
Selections can be made of all items inside and outside a drag box, inside arbitrary screen regions defined by polylines or polygons, by a volume of 3D space, and by an arbitrary triangle mesh in 3D for clash/collision detection.&lt;/p&gt;
&lt;h1 id=&#34;坐标系coordinate-systems&#34;&gt;坐标系（Coordinate Systems）
&lt;/h1&gt;&lt;p&gt;对象（Object）-&amp;gt;世界（World）-&amp;gt;(-&amp;gt;视点ViewPoint)-&amp;gt;外窗口（Outer Window）-&amp;gt;像素（Pixel）&lt;/p&gt;
&lt;h1 id=&#34;参考资料&#34;&gt;参考资料
&lt;/h1&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://blog.csdn.net/myan/article/details/647511&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;理解矩阵（一）&lt;/a&gt;
&lt;a class=&#34;link&#34; href=&#34;http://blog.csdn.net/myan/article/details/649018&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;理解矩阵（二）&lt;/a&gt;
&lt;a class=&#34;link&#34; href=&#34;http://blog.csdn.net/myan/article/details/1865397&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;理解矩阵（三）&lt;/a&gt;
&lt;a class=&#34;link&#34; href=&#34;https://wenku.baidu.com/view/a19bf8ec4afe04a1b071ded2.html?re=view&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;HOOPS基础培训课程1&lt;/a&gt;
&lt;a class=&#34;link&#34; href=&#34;https://wenku.baidu.com/view/a0154f28915f804d2b16c1d2.html?re=view&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;HOOPS基础培训课程2&lt;/a&gt;
&lt;a class=&#34;link&#34; href=&#34;https://wenku.baidu.com/view/84fdc0c789eb172ded63b7d2.html?re=view&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;HOOPS基础培训课程3&lt;/a&gt;
&lt;a class=&#34;link&#34; href=&#34;https://wenku.baidu.com/view/796caa5377232f60ddcca102.html?re=view&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;HOOPS_MFC应用程序向导&lt;/a&gt;&lt;/p&gt;</description>
        </item>
        
    </channel>
</rss>
