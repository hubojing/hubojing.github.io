<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Wide &amp; Deep on 靖待</title>
        <link>https://hubojing.github.io/tags/wide--deep/</link>
        <description>Recent content in Wide &amp; Deep on 靖待</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>靖待</copyright>
        <lastBuildDate>Tue, 02 Mar 2021 09:20:00 +0000</lastBuildDate><atom:link href="https://hubojing.github.io/tags/wide--deep/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>【Paper】Wide &amp; Deep Learning for Recommender Systems</title>
        <link>https://hubojing.github.io/ux6wmeer/</link>
        <pubDate>Tue, 02 Mar 2021 09:20:00 +0000</pubDate>
        
        <guid>https://hubojing.github.io/ux6wmeer/</guid>
        <description>&lt;div align=&#34;left&#34;&gt;
&lt;img src=&#34;\images\Paper-wide&amp;deep-models.png&#34; width=&#34;300&#34; height=&#34;180&#34; style=&#34;float:right;&#34;/&gt;
&lt;p&gt;　　&lt;strong&gt;推荐系统 + 深度学习 2&lt;/strong&gt;
　　&lt;strong&gt;谷歌著名的Wide &amp;amp; Deep模型&lt;/strong&gt;&lt;/p&gt;
 &lt;/div&gt;
&lt;h1 id=&#34;论文背景&#34;&gt;论文背景
&lt;/h1&gt;&lt;p&gt;　　题目：Wide &amp;amp; Deep Learning for Recommender Systems
　　作者：Heng-Tze Cheng, Levent Koc, Jeremiah Harmsen, Tal Shaked, Tushar Chandra,
　　Hrishi Aradhye, Glen Anderson, Greg Corrado, Wei Chai, Mustafa Ispir, Rohan Anil, Zakaria Haque, Lichan Hong, Vihan Jain, Xiaobing Liu, Hemal Shah, Google Inc.
　　会议信息：DLRS ’16 September 15-15, 2016, Boston, MA, USA&lt;/p&gt;
&lt;p&gt;　　谷歌引用数量：1324（截至2021年3月2日）&lt;/p&gt;
&lt;h1 id=&#34;引言-introduction&#34;&gt;引言 INTRODUCTION
&lt;/h1&gt;&lt;p&gt;　　推荐系统可视为搜索排序系统，输入是用户和上下文信息的查询，输出是物品列表。类似于一般的搜索排序问题，推荐系统中的一大挑战是同时实现记忆（memorization）和泛化（generalization）。
　　Memorization可以宽泛地定义为学习物品或特征的共现频率并探索历史数据的相关关系。
　　Generalization是基于相关性的传递性并探索过去从未出现过的新的特征组合。
　　基于memorization的推荐系统通常更局限于和直接与用户曾有过行为的物品相关。
　　基于generalization的推荐系统试图增强推荐物品的多样性。&lt;/p&gt;
&lt;p&gt;　　例子：如果用户安装了netflix，特征&amp;quot;user_installed_app=netflix&amp;quot;的值为1。
　　Memorization：通过使用稀疏特征的跨物品转换实现，例如AND(user_installed_app=netflix, impression_app=pandora&amp;quot;)，如果用户安装了netflix，然后显示pandora, AND的值为1。
　　Generalization：可以通过使用粒度更小的特性来添加，例如AND(user_installed_category=video，impression_category=music)，但是通常需要手动的特征工程。
　　叉积变换（cross-product transformations）的一个限制是它们不能推广到没有出现在训练数据中的查询项特征对。基于嵌入的模型，例如FM或者DNN跨域解决这个问题。但是当底层的查询项矩阵是稀疏且高阶的（例如用户具有特定的偏好或小范围的吸引力）时，很难学习查询和项的有效低维表示。在这种情况下，大多数查询项对之间应该没有交互，但密集嵌入将导致所有查询项对的预测非零，因此导致过拟合而产生不相干的推荐。具有叉积特征转换的线性模型可以用更少的参数记住这些“例外规则”。&lt;/p&gt;
&lt;p&gt;　　在本文中提出了Wide&amp;amp;Deep模型，通过联合训练一个线性模型组件和一个神经网络组件，实现在一个模型中记忆和泛化。
&lt;img src=&#34;https://hubojing.github.io/%5cimages%5cPaper-wide&amp;amp;deep-models.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Wide&amp;Deep模型&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;贡献点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;带有嵌入和带有特征转换的线性模型的前馈神经网络联合训练的Wide&amp;amp;Deep学习框架，用于具有稀疏输入的通用推荐系统。&lt;/li&gt;
&lt;li&gt;在谷歌Play上实施和评估，谷歌Play是一个拥有超过10亿活跃用户和超过百万应用的移动应用商店。&lt;/li&gt;
&lt;li&gt;在TensorFlow中有开源代码。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;推荐系统概述-recommender-system-overview&#34;&gt;推荐系统概述 RECOMMENDER SYSTEM OVERVIEW
&lt;/h1&gt;&lt;p&gt;&lt;img src=&#34;https://hubojing.github.io/images/Paper-wide&amp;amp;deep-models-overview.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;概述&#34;
	
	
&gt;
　　推荐系统一般分为召回（Retrieval）层，排序（Ranking）层。本文在排序层使用Wide &amp;amp; Deep学习框架。&lt;/p&gt;
&lt;h1 id=&#34;宽--深度学习框架-wide--deep-learning&#34;&gt;宽 &amp;amp; 深度学习框架 WIDE &amp;amp; DEEP LEARNING
&lt;/h1&gt;&lt;h2 id=&#34;宽度组件-the-wide-component&#34;&gt;宽度组件 The Wide Component
&lt;/h2&gt;$$\phi_k(x) = \prod_{i=1}^d{x_i}^{c_{ki}}, c_{ki}∈{0,1}$$&lt;p&gt;
　　其中，$c_{ki}$是一个布尔变量，如果第i个特征是第k个变换$\phi_k$的一部分，则为1，否则为0。
　　对于二进制特征，一个叉积变换“AND(gender=female, language=en)，只有当(“gender=female” and “language=en”)时才为1。
　　这捕获了二元特征之间的相互作用，并为广义线性模型增加了非线性。&lt;/p&gt;
&lt;h2 id=&#34;深度组件-the-deep-component&#34;&gt;深度组件 The Deep Component
&lt;/h2&gt;$$\alpha^{l+1} = f(W^{(l)}a^{(l)}) + b^{(l)})$$&lt;h2 id=&#34;模型联合训练-joint-training-of-wide--deep-model&#34;&gt;模型联合训练 Joint Training of Wide &amp;amp; Deep Model
&lt;/h2&gt;$$P(Y=1|x) = \sigma(w^T_{wide}[x,\phi(x)]+w^T_{deep}a^{(l_f)}+b)$$&lt;p&gt;
　　其中Y是二分类标签，$\sigma(·)$是sigmoid函数，$\phi(x)$是原始特征x的叉积变换，b是偏置项。$w_{wide}$是所有宽度模型权重的向量，$w_{deep}$是应用在最终激活$a^{(l_f)}$的权重。&lt;/p&gt;
&lt;h1 id=&#34;系统实现-system-implementation&#34;&gt;系统实现 SYSTEM IMPLEMENTATION
&lt;/h1&gt;&lt;p&gt;&lt;img src=&#34;https://hubojing.github.io/%5cimages%5cPaper-wide&amp;amp;deep-models-%e7%b3%bb%e7%bb%9f%e5%ae%9e%e7%8e%b0.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;系统实现&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;数据产生-data-generation&#34;&gt;数据产生 Data Generation
&lt;/h2&gt;&lt;p&gt;　　通过将一个特征值x映射到其累积分布函数P(X≤x)，将连续实值特征归一化为[0,1]，并分成$n_q$分位数。对于第i个分位数的值，规范化值为$\frac{i-1}{n_q-1}$。分位数边界i−1在数据生成时计算。&lt;/p&gt;
&lt;h2 id=&#34;模型训练-model-training&#34;&gt;模型训练 Model Training
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://hubojing.github.io/%5cimages%5cPaper-wide&amp;amp;deep-models-%e6%a8%a1%e5%9e%8b%e8%ae%ad%e7%bb%83.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;模型训练&#34;
	
	
&gt;
　　在训练过程中，输入层接收训练数据和词汇，并生成稀疏和密集特征以及标签。宽度组件包括用户安装应用和印象应用的叉积。对于模型的深层部分，每个分类特征学习一个32维的嵌入向量。将所有的嵌入与密集特征连接在一起，得到一个大约1200维的密集向量。然后将连接的矢量送入3个ReLU层，最后送入logistic输出单元。
　　Wide &amp;amp; Deep模型训练了超过5000亿个例子。每当一组新的训练数据到达时，模型就需要重新训练。然而，每次重新训练在计算上都是昂贵的，并且延迟了服务时间。为了解决这一挑战，本文实现了一个暖启动系统，该系统使用先前模型的嵌入和线性模型权值来初始化一个新的模型。
在将模型加载到模型服务器之前，需要对模型进行一次演练，以确保在服务实时流量时不会出现问题。本文根据经验来验证模型的质量，作为一个完整的检查。&lt;/p&gt;
&lt;h2 id=&#34;模型服务-model-serving&#34;&gt;模型服务 Model Serving
&lt;/h2&gt;&lt;p&gt;　　一旦模型经过训练和验证，就把它加载到模型服务器中。对于每个请求，服务器都会从应用程序检索系统和用户特性中接收一组应用程序候选项来为每个应用程序评分。然后，应用程序从最高分到最低分进行排名，并按照这个顺序向用户展示这些应用程序。分数是通过运行一个采用Wide &amp;amp; Deep模型的正向推理来计算的。
　　为了为每个请求提供10毫秒量级的服务，使用多线程并行来优化性能，通过并行运行较小的批处理，来代替在单个批处理推理步骤中对所有候选应用程序进行评分。&lt;/p&gt;
&lt;h1 id=&#34;实验-experiment-results&#34;&gt;实验 EXPERIMENT RESULTS
&lt;/h1&gt;&lt;h2 id=&#34;app-acquisitions&#34;&gt;App Acquisitions
&lt;/h2&gt;&lt;p&gt;　　本文在A/B测试框架下进行了为期3周的在线实时实验。对于对照组，随机选择1%的用户，并向他们展示由上一个版本的排名模型生成的推荐，该模型是一个高度优化的广泛性logistic回归模型，具有丰富的叉积特征转换。在实验组中，1%的用户使用了由相同的一组特征进行训练的Wide &amp;amp; Deep模型生成的推荐。
&lt;img src=&#34;https://hubojing.github.io/%5cimages%5cPaper-wide&amp;amp;deep-models-t1.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;性能对比&#34;
	
	
&gt;
　　Wide &amp;amp; Deep模式使app store主登陆页面的应用获取率比对照组提高了+3.9%。结果还与另1%组仅使用具有相同特征和神经网络结构的模型的深度部分进行了比较，Wide &amp;amp; deep模式比deep-only模型有+1%的增益。
　　除了在线实验，还展示了AUC。Wide &amp;amp; Deep的线下AUC略高，但对线上流量的影响更显著。一个可能的原因是离线数据集中的印象和标签是固定的，而在线系统可以通过混合归纳和记忆生成新的探索性推荐，并从新的用户反应中学习。&lt;/p&gt;
&lt;h2 id=&#34;服务性能-serving-performance&#34;&gt;服务性能 Serving Performance
&lt;/h2&gt;&lt;p&gt;　　面对我们的商业移动应用商店所面临的高流量，高吞吐量和低延迟的服务具有挑战性。在高峰流量时，我们的推荐服务器每秒可以获得超过1000万个应用。使用单个线程，在一次批处理中为所有候选人打分需要31毫秒。我们实现了多线程，并将每个批处理分成更小的部分，这显著地将客户端延迟减少到14毫秒（包括服务开销），如表所示。
&lt;img src=&#34;https://hubojing.github.io/%5cimages%5cPaper-wide&amp;amp;deep-models-t2.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;服务性能&#34;
	
	
&gt;&lt;/p&gt;
&lt;h1 id=&#34;相关工作-related-work&#34;&gt;相关工作 RELATED WORK
&lt;/h1&gt;&lt;p&gt;　　结合带叉积转换的广义线性模型与深层神经网络嵌入的灵感来自以前的工作，比如FM，通过在两个低维嵌入向量之间使用点积分解两个变量间的相互作用，将线性模型了进行推广。在本文中，通过神经网络代替点积来学习嵌入之间高度非线性的相互作用，从而扩展了模型容量。
　　在语言模型中，通过学习输入和输出之间的直接权值，提出了使用n元特征的递归神经网络(RNNs)和最大熵模型联合训练，以显著降低RNN的复杂性(例如，隐藏层大小)。在计算机视觉中，深度残差学习已被用于降低训练更深层次模型的难度，并通过跳过一个或多个层次的捷径连接提高准确性。
　　神经网络与图形模型的联合训练还被应用于基于图像的人体姿态估计。在这项工作中，探讨了前馈神经网络和线性模型的联合训练，在稀疏特征和输出单元之间直接连接，用于输入数据稀疏的通用推荐和排序问题。
　　在推荐系统文献中，将内容信息的深度学习与评分矩阵的协同过滤(CF)相结合来探索协同深度学习。以前的工作也曾致力于手机应用推荐系统，如AppJoy在用户的应用使用记录上使用CF。不同于之前工作中基于cf或基于内容的方法，我们在app推荐系统中，基于用户和印象数据使用Wide &amp;amp; Deep模型联合训练。&lt;/p&gt;
&lt;h1 id=&#34;总结-conclusion&#34;&gt;总结 CONCLUSION
&lt;/h1&gt;&lt;p&gt;　　宽度线性模型可以通过叉积特征变换有效地记忆稀疏特征交互，而深度神经网络可以通过低维嵌入来泛化之前未见过的特征交互。在线实验结果表明，与Wide-only和Deep-only模型相比，Wide &amp;amp; Deep模型有显著提高。&lt;/p&gt;
&lt;h1 id=&#34;代码&#34;&gt;代码
&lt;/h1&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/tensorflow/tensorflow/blob/r1.11/tensorflow/python/estimator/canned/dnn_linear_combined.py&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/tensorflow/tensorflow/blob/r1.11/tensorflow/python/estimator/canned/dnn_linear_combined.py&lt;/a&gt;&lt;/p&gt;</description>
        </item>
        
    </channel>
</rss>
